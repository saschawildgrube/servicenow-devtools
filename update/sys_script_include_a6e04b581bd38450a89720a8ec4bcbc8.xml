<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_devtools.RenderValue</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Render any value as a string. In case of objects, the keys are displayed in alphabetical order. In case of arrays, the elements are displayed in the given order. In case of a GlideRecord, the table name, sys_id and number (if available) are displayed on top, and a selected choice of fields leads the list of values despite the alphabetical order.</description>
        <mobile_callable>false</mobile_callable>
        <name>RenderValue</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[function RenderValue(vValue, bHideEmpty, bUnsortedKeys, bCompactOutput, nLevel)
{
	bHideEmpty = GetBoolValue(bHideEmpty);
	bUnsortedKeys = GetBoolValue(bUnsortedKeys);
	bCompactOutput = GetBoolValue(bCompactOutput);
	nLevel = GetIntegerValue(nLevel);
	var strLevel = '___';
	strLevel = strLevel.repeat(nLevel);

	if (vValue === undefined)
	{
		return 'undefined';
	}

	if (vValue === null)
	{
		return 'null';
	}

	var strType = GetType(vValue); 
	if (strType == 'JavaObject')
	{
		return ''+vValue;
	}	
	if (strType == 'ScopedGlideElement')
	{
		if (vValue.getDisplayValue() == '0')
		{
			return '0';
		}
		if (vValue.nil() == false)
		{
			return ''+vValue;
		}
		return vValue.getDisplayValue();
	}
	if (strType == 'function')
	{
		return '\n'+vValue;
	}
	if (strType == 'Array')
	{
		var strOutput = '';
		if (vValue.length == 0)
		{
			if (strLevel.length > 0)
			{
				strOutput += '\n';
			}
			strOutput += strLevel+'[]';
		}
		else
		{
			vValue.forEach( function(vElement,nKey)
			{
				strOutput += '\n'+strLevel+'['+nKey+']: '+RenderValue(vElement,bHideEmpty,bUnsortedKeys,bCompactOutput,nLevel+1);
			});
		}
		return strOutput;
	}
	if (IsObject(vValue))
	{
		var bScopedGlideRecord = (GetType(vValue) == 'ScopedGlideRecord');
		var strOutput = '';
				
		if (bCompactOutput == true && IsExistingRecord(vValue))
		{
			return '\n'+strLevel+RenderRecordSummary(vValue);
		}
		
		var aKeys = GetKeys(vValue);
		//var aKeys = ['sys_id','short_description']; 
		if (aKeys.length == 0)
		{
			if (strLevel.length > 0)
			{
				strOutput += '\n';
			}		
			strOutput += strLevel+'{}';
		}
		else
		{
			function Compare(value1, value2)
			{
				if (value1 < value2)
				{
					return -1;
				}
				if (value1 > value2)
				{
					return 1;
				}
				return 0;
			}
			function CompareUnderscoresAtEnd(value1, value2)
			{
				value1 = GetStringValue(value1);
				value2 = GetStringValue(value2);
				var nUnderscores1 = 0;
				var nUnderscores2 = 0;
				while (value1[nUnderscores1] == '_')
				{
					nUnderscores1++;
				}
				while (value2[nUnderscores2] == '_')
				{
					nUnderscores2++;
				}
				if (nUnderscores1 < nUnderscores2)
				{
					return -1;
				}
				if (nUnderscores1 > nUnderscores2)
				{
					return 1;
				}
				return Compare(value1, value2);
			}

			function CompareGlideRecordKeys(str1, str2)
			{
				var aPriorityKeys = ['user_name','name','short_description'];
				for (var nKey = 0; nKey < aPriorityKeys.length; nKey++)
				{
					if (str1 == aPriorityKeys[nKey])
					{
						return -1
					}
					if (str2 == aPriorityKeys[nKey])
					{
						return 1;
					}
				}
				return CompareUnderscoresAtEnd(str1,str2);
			}		

			if (IsValidRecord(vValue))
			{
				var strTable = vValue.getRecordClassName();
				var strSysId = GetStringValue(vValue.sys_id);
				var strNumber = GetStringValue(vValue.getValue('number'));
				if (strTable != '')
				{
					strOutput += '\n'+strLevel+strTable+':';
					if (strNumber != '')
					{
						strOutput += ' '+strNumber+':';
					}
					if (strSysId != '')
					{
						strOutput += ' '+strSysId+':';
					}
				}
				if (bUnsortedKeys == false)
				{
					aKeys.sort(CompareGlideRecordKeys);
				}
			}
			else if (ArrayValueExists(GetKeys(vValue),'sys_id') == true)
			{
				var strClassName = GetStringValue(GetValue(vValue,'sys_class_name'));
				var strSysId = GetStringValue(GetValue(vValue,'sys_id'));
				var strNumber = GetStringValue(GetValue(vValue,'number'));

				if (   strClassName != ''
					|| strSysId != ''
					|| strNumber != '')
				{
					strOutput += '\n'+strLevel;
					if (strClassName != '')
					{
						strOutput += strClassName+': ';
					}
					if (strNumber != '')
					{
						strOutput += strNumber+': ';
					}
					if (strSysId != '')
					{
						strOutput += strSysId+': ';
					}
				}
				if (bUnsortedKeys == false)
				{
					aKeys.sort(CompareGlideRecordKeys);
				}
			}
			else
			{
				if (bUnsortedKeys == false)
				{
					aKeys.sort(CompareUnderscoresAtEnd);
				}
			}
			aKeys.forEach( function(strKey)
			{
				if (strKey == 'sys_meta' && bScopedGlideRecord)
				{
					var strValue = RenderValue(vValue.getValue(strKey),bHideEmpty,bUnsortedKeys,bCompactOutput,nLevel+1);	
				}
				else
				{
					var strValue = RenderValue(vValue[strKey],bHideEmpty,bUnsortedKeys,bCompactOutput,nLevel+1);
				}
				if (bHideEmpty == false || strValue != '')
				{
					strOutput += '\n'+strLevel+'["'+strKey+'"]: '+strValue;
				}
			});
		}
		return strOutput;
	}

	return ''+vValue;
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-02-27 09:04:23</sys_created_on>
        <sys_id>a6e04b581bd38450a89720a8ec4bcbc8</sys_id>
        <sys_mod_count>98</sys_mod_count>
        <sys_name>RenderValue</sys_name>
        <sys_package display_value="DevTools" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevTools">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_script_include_a6e04b581bd38450a89720a8ec4bcbc8</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-10-30 10:02:45</sys_updated_on>
    </sys_script_include>
</record_update>
