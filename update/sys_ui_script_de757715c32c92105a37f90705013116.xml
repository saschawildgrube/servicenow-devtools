<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description>Client side user interface to baseline the current version for the given shared application.</description>
        <global>true</global>
        <ignore_in_now_experience>false</ignore_in_now_experience>
        <name>x_snc_devtools.SharedAppVersionBaseline</name>
        <script><![CDATA[function SharedAppVersionBaseline(strAppSysId,strVersion)
{
	var strAppSysId = GetStringValue(strAppSysId);
	var strVersion = GetStringValue(strVersion);
	var strTitle = 'DevTools - Application Version Baseline';
	var today = new Date(Date.now());
	var strDate = today.toISOString();
	strDate = strDate.substring(0,10);

	var bCheckedAlreadyRunning = false;
	var bCheckedShowStopper = false;
	var bCheckedIfBranchExists = false;
	var bCheckedUncommittedFiles = false;
	var bCheckedForRecordsWithCredentialPollution = false;
	var bUserConfirmation = false;

	StateStart();

	function StateCheckAlreadyRunning()
	{
		ServerRequest(
			'x_snc_devtools.DevToolsClientAPI',
			'AppVersionBaselineIsRunning',
			{},
			StateCheckAlreadyRunningResponse);	
		return;
	}

	function StateCheckAlreadyRunningResponse(bIsRunning)
	{
		if (bIsRunning == true)
		{
			DoModalMessage(
				strTitle,
				'An application baseline process is currently running.\n\nPlease wait a minute and try again!',
				StateEnd);
			return;
		}
		bCheckedAlreadyRunning = true;
		StateStart();
	}

	function StateCheckShowStopper()
	{
		var bShowStopper = GetBoolValue(g_form.getValue('x_snc_devtools_showstopper'));
		
		if (bShowStopper)
		{
			DoModalMessage(
				strTitle,
				'The app is flagged to contain a showstopper. This issue must be resolved (and the flag unset) before the application can be baselined.',
				StateEnd);	
			return;
		}
		bCheckedShowStopper = true;
		StateStart();

		return;
	}		

	function StateCheckIfBranchExists()
	{
		ServerRequest(
			'x_snc_devtools.DevToolsClientAPI',
			'GetAppBranches',
			{
				app_sys_id: strAppSysId
			},
			StateCheckIfBranchExistsResponse);	
		return;
	}

	function StateCheckIfBranchExistsResponse(aBranches)
	{
		if (IsArray(aBranches) == false)
		{
			StateError('Could not load branches.');
			return;
		}
		if (ArrayValueExists(aBranches,strVersion) == true) 
		{
			DoModalMessage(
				strTitle,
				'There is already a branch named "'+strVersion+'".',
				StateEnd);	
			return;
		}
		bCheckedIfBranchExists = true;
		StateStart();
	}	

	function StateCheckForRecordsWithCredentialPollution()
	{
		ServerRequest(
			'x_snc_devtools.DevToolsClientAPI',
			'GetAppRecordsWithCredentialPollution',
			{
				app_sys_id: strAppSysId
			},
			StateCheckForRecordsWithCredentialPollutionResponse);	
		return;
	}

	function StateCheckForRecordsWithCredentialPollutionResponse(aPollutedRecords)
	{
		if (IsArray(aPollutedRecords) == false)
		{
			StateError('Could not load polluted records files.');
			return;
		}
		if (aPollutedRecords.length > 0)
		{
			DoModalMessage(
				strTitle,
				'There are records that contain credentials. Remove all credentials before committing these records. If such records have been committed already, the affected credentials MUST BE CHANGED!',
				StateEnd);	
			return;
		}
		bCheckedForRecordsWithCredentialPollution = true;
		StateStart();
	}

	function StateCheckForUncommittedFiles()
	{
		ServerRequest(
			'x_snc_devtools.DevToolsClientAPI',
			'GetAppUncommittedFiles',
			{
				app_sys_id: strAppSysId
			},
			StateCheckForUncommittedFilesResponse);	
		return;
	}

	function StateCheckForUncommittedFilesResponse(aUncommittedFiles)
	{
		if (IsArray(aUncommittedFiles) == false)
		{
			StateError('Could not load uncommitted files.');
			return;
		}
		if (aUncommittedFiles.length > 0)
		{
			DoModalMessage(
				strTitle,
				'There are uncommitted files. Please commit all changes before baseline!',
				StateEnd);	
			return;
		}
		bCheckedUncommittedFiles = true;
		StateStart();
	}

	function StateUserConfirmation()
	{
		ServerRequest(
			'x_snc_devtools.DevToolsClientAPI',
			'AppVersionBaselineGetMessage',
			{
				app_sys_id: strAppSysId
			},
			StateUserConfirmationGetMessageResponse);	
		return;
	}

	function StateUserConfirmationGetMessageResponse(strMessage)
	{
		if (strMessage == '')
		{
			bUserConfirmation = true;
			StateStart();
			return;
		}
		DoModalConfirm(
			strTitle,
			strMessage
			+'\n\n'
			+'Ready to baseline?',
			StateUserConfirmationUserResponse);
	}

	function StateUserConfirmationUserResponse(bResult)
	{
		if (bResult == false)
		{
			StateEnd();
			return;
		}
		bUserConfirmation = true;
		StateStart();		
	}

			

	function OnExecutionComplete(dialog,tracker)
	{
		var buttonViewResults = GetElementById('sysparm_button_view_results');
		if (buttonViewResults)
		{
			buttonViewResults.style.display = "none";
		}
	
		var buttonClose = GetElementById('sysparm_button_close');
        if (buttonClose)
		{
            buttonClose.on('click', function()
				{
					StateEnd();
				});
        }
	}
	
	function OnExecutionFailed(dialog)
	{
		StateError('Baselining failed!');
	}
	
	function OnStatusUpdate(dialog)
	{
	}

	function StateAbort()
	{
		DoModalMessage(
			strTitle,
			'Aborting...',
			StateEnd);
		return;	
	}

	function StateError(strErrorMessage)
	{
		DoModalMessage(
			strTitle,
			'ERROR: '+strErrorMessage,
			StateEnd);		
		return;	
	}	

	function StateEnd()
	{
		RedirectToRecord('sys_app',strAppSysId,'devtools',false,{ command: '' });
	}

	function StateStart()
	{
		if (bCheckedAlreadyRunning == false)
		{
			StateCheckAlreadyRunning();
			return;
		}

		if (bCheckedShowStopper == false)
		{
			StateCheckShowStopper();
			return;
		}		

		if (bCheckedIfBranchExists == false)
		{
			StateCheckIfBranchExists();
			return;
		}

		if (bCheckedForRecordsWithCredentialPollution == false)
		{
			StateCheckForRecordsWithCredentialPollution();
			return;
		}

		if (bCheckedUncommittedFiles == false)
		{
			StateCheckForUncommittedFiles();
			return;
		}

		if (bUserConfirmation == false)
		{
			StateUserConfirmation();
			return;
		}

		DoModalProgress(
			strTitle,
			'Application Version Baseline',
			'x_snc_devtools.DevToolsClientAPI',
			{
				command: 'app_version_baseline',
				app_sys_id: strAppSysId
			},
			{
				close:
				{
					title: 'Close'
				}
			},
			{
				callbackOnExecutionComplete: OnExecutionComplete,
				callbackOnExecutionFailed: OnExecutionFailed,
				callbackOnStatusUpdate: OnStatusUpdate,
			});
	}


}]]></script>
        <script_name>SharedAppVersionBaseline</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-09 12:15:07</sys_created_on>
        <sys_id>de757715c32c92105a37f90705013116</sys_id>
        <sys_mod_count>6</sys_mod_count>
        <sys_name>x_snc_devtools.SharedAppVersionBaseline</sys_name>
        <sys_package display_value="DevTools" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevTools">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_ui_script_de757715c32c92105a37f90705013116</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-01-27 10:53:52</sys_updated_on>
        <ui_type>0</ui_type>
        <use_scoped_format>false</use_scoped_format>
        <x_snc_devtools_global>true</x_snc_devtools_global>
    </sys_ui_script>
</record_update>
