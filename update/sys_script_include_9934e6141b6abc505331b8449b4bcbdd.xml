<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_devtools.GetParentRecord</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Get the parent record of a given record if it is possible.</description>
        <mobile_callable>false</mobile_callable>
        <name>GetParentRecord</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[function GetParentRecord(strTable,strSysId)
{
	if (IsValidTable(strTable) == false)
	{
		return false;
	}
	var grRecord = GetRecord(strTable,strSysId);
	if (grRecord == false)
	{
		return false;
	}

	var grParentRecord = false;
	var gsep = new GlideScriptedExtensionPoint(); 
	var eps = gsep.getExtensions('DevTools');
	for (var nEP = 0; nEP < eps.length; nEP++)
	{
		var ep = eps[nEP];
		if (IsValidFunction(ep.GetParentRecord))
		{
			grParentRecord = ep.GetParentRecord(grRecord);
			if (grParentRecord != false)
			{
				return grParentRecord;
			}
		}
	}

	// Package dependencies to the package
	if (strTable == 'sys_package_dependency_m2m')
	{
		return GetRecord('sys_package',grRecord.sys_package);
	}
	
	
	// ATF test suite to parent test suite
	if (strTable == 'sys_atf_test_suite')
	{
		var grParent =  GetRecord('sys_atf_test_suite',grRecord.parent);
		if (IsValidRecord(grParent) == true)
		{
			return grParent;
		}
	}	

	// ATF test to suite
	if (strTable == 'sys_atf_test')
	{
		var grTestSuiteTest = new GlideRecord('sys_atf_test_suite_test');
		grTestSuiteTest.addQuery('test','=',grRecord.sys_id);
		grTestSuiteTest.addQuery('sys_scope','=',grRecord.sys_scope);
		grTestSuiteTest.addQuery('test_suite.sys_scope','=',grRecord.sys_scope);
		grTestSuiteTest.query();
		if (grTestSuiteTest.getRowCount() == 1) // Only if the test is part of exactly one suite in the same scope!
		{
			grTestSuiteTest.next();
			var strSuiteSysId = GetStringValue(grTestSuiteTest.test_suite);
			return GetRecord('sys_atf_test_suite',strSuiteSysId);
		}
		
		var grTestSuiteTest = new GlideRecord('sys_atf_test_suite_test');
		grTestSuiteTest.addQuery('test','=',grRecord.sys_id);
		grTestSuiteTest.query();
		if (grTestSuiteTest.getRowCount() == 1) // Only if the test is part of exactly one suite in any scope!
		{
			grTestSuiteTest.next();
			var strSuiteSysId = GetStringValue(grTestSuiteTest.test_suite);
			return GetRecord('sys_atf_test_suite',strSuiteSysId);
		}	
		return false;
	}

	// ATF test step to test
	if (strTable == 'sys_atf_step')
	{
		return GetRecord('sys_atf_test',grRecord.test);
	}
	
	// ATF test result to test (or suite result)
	if (strTable == 'sys_atf_test_result')
	{
		var strParent = GetStringValue(grRecord.parent);
		if (IsValidSysId(strParent))
		{
			return GetRecord('sys_atf_test_suite_result',strParent);	
		}
		return GetRecord('sys_atf_test',grRecord.test);
	}
	
	// ATF test step result to test result
	if (strTable == 'sys_atf_test_result_step')
	{
		return GetRecord('sys_atf_test_result',grRecord.test_result);
	}
	
	// ATF Test suite result to test
	if (strTable == 'sys_atf_test_suite_result')
	{
		return GetRecord('sys_atf_test_suite',grRecord.test_suite);
	}
	
	// ATF Test suite test to the suite
	if (strTable == 'sys_atf_test_suite_test')
	{
		return GetRecord('sys_atf_test_suite',grRecord.test_suite);
	}
	
	// ATF test step config input to the test step config
	if (strTable == 'atf_input_variable')
	{
		return GetRecord('sys_atf_step_config',grRecord.model);
	}
	
	
	// Instance Scan Check to suite
	if (strTable == 'scan_check')
	{
		var grScanSuiteCheck = new GlideRecord('scan_check_suite_check');
		grScanSuiteCheck.addQuery('check','=',grRecord.sys_id);
		grScanSuiteCheck.addQuery('sys_scope','=',grRecord.sys_scope);
		grScanSuiteCheck.addQuery('suite.sys_scope','=',grRecord.sys_scope);
		grScanSuiteCheck.query();
		if (grScanSuiteCheck.getRowCount() == 1) // Only if the check is part of exactly one suite in the same scope!
		{
			grScanSuiteCheck.next();
			var strSuiteSysId = GetStringValue(grScanSuiteCheck.suite);
			return GetRecord('scan_check_suite',strSuiteSysId);
		}
		
		var grScanSuiteCheck = new GlideRecord('scan_check_suite_check');
		grScanSuiteCheck.addQuery('check','=',grRecord.sys_id);
		grScanSuiteCheck.query();
		if (grScanSuiteCheck.getRowCount() == 1) // Only if the check is part of exactly one suite in any scope!
		{
			grScanSuiteCheck.next();
			var strSuiteSysId = GetStringValue(grScanSuiteCheck.suite);
			return GetRecord('scan_check_suite',strSuiteSysId);
		}	
		return false;
	}	

	
	// DB View table to DB view
	if (strTable == 'sys_db_view_table')
	{
		return GetRecord('sys_db_view',grRecord.view);
	}

	// DB View table field to DB view table
	if (strTable == 'sys_db_view_table_field')
	{
		return GetRecord('sys_db_view_table',grRecord.view_table);
	}
	
	// Incident task to incident
	if (strTable == 'incident_task')
	{
		return GetRecord('incident',grRecord.incident);
	}

	// Change task to change request
	if (strTable == 'change_task')
	{
		return GetRecord('change_request',grRecord.change_request);
	}

	// Problem task to problem
	if (strTable == 'problem_task')
	{
		return GetRecord('problem',grRecord.problem);
	}

	// sc task to sc req item
	if (strTable == 'sc_task')
	{
		return GetRecord('sc_req_item',grRecord.request_item);
	}

	// sc req item to sc request
	if (strTable == 'sc_req_item')
	{
		return GetRecord('sc_request',grRecord.request);
	}

	// workspace list to workspace list category
	if (strTable == 'sys_aw_list')
	{
		return GetRecord('sys_aw_list_category',grRecord.category);
	}
	
	// workspace list category to workspace
	if (strTable == 'sys_aw_list_category')
	{
		return GetRecord('sys_aw_master_config',grRecord.workspace);
	}
	
	// Extension point instance to extension point
	if (strTable == 'sys_extension_instance')
	{
		var strPoint = GetStringValue(grRecord.point);
		if (strPoint != '')
		{
			var grEP = new GlideRecord('sys_extension_point');
			grEP.addQuery('api_name','=',strPoint);
			grEP.query();
			if (grEP.getRowCount() == 1)
			{
				grEP.next();
				return grEP;
			}
		}
	}
	
	if (strTable == 'sys_documentation')
	{
		var grSD = new GlideRecord('sys_dictionary');
		grSD.addQuery('name','=',grRecord.name);
		grSD.addQuery('element','=',grRecord.element);
		grSD.query();
		if (grSD.getRowCount() == 1)
		{
			grSD.next();
			return grSD;
		}
	}

	if (strTable == 'sys_dictionary')
	{
		var grSDO = new GlideRecord('sys_db_object');
		grSDO.addQuery('name','=',grRecord.name);
		grSDO.query();
		if (grSDO.getRowCount() == 1)
		{
			grSDO.next();
			return grSDO;
		}
	}
	
	if (strTable == 'sys_dictionary_override')
	{
		var grSD = new GlideRecord('sys_dictionary');
		grSD.addQuery('name','=',grRecord.base_table);
		grSD.addQuery('element','=',grRecord.element);
		grSD.query();
		if (grSD.getRowCount() == 1)
		{
			grSD.next();
			return grSD;
		}
	}	
	
	
	if (strTable == 'sys_storage_alias')
	{
		var grSDO = new GlideRecord('sys_db_object');
		grSDO.addQuery('name','=',grRecord.table_name);
		grSDO.query();
		if (grSDO.getRowCount() == 1)
		{
			grSDO.next();
			return grSDO;
		}
	}
	
	if (strTable == 'sys_schema_attribute_m2m')
	{
		return GetRecord('sys_dictionary',grRecord.schema);
	}

	if (strTable == 'sys_ui_style')
	{
		var grSD = new GlideRecord('sys_dictionary');
		grSD.addQuery('name','=',grRecord.name);
		grSD.addQuery('element','=',grRecord.element);
		grSD.query();
		if (grSD.getRowCount() == 1)
		{
			grSD.next();
			return grSD;
		}
	}	
	
	
	if (strTable == 'sys_choice')
	{
		var strTable2 = GetStringValue(grRecord.name);
		while (strTable2 != '')
		{
			var grSD = new GlideRecord('sys_dictionary');
			grSD.addQuery('name','=',strTable2);
			grSD.addQuery('element','=',grRecord.element);
			grSD.query();
			if (grSD.getRowCount() == 1)
			{
				grSD.next();
				return grSD;
			}
			else
			{
				strTable2 = GetParentTable(strTable2);
			}
		}
	}		
	

	if (strTable == 'sys_ux_list')
	{
		return GetRecord('sys_ux_list_category',grRecord.category);
	}	
	if (strTable == 'sys_ux_list_category')
	{
		return GetRecord('sys_ux_list_menu_config',grRecord.configuration);
	}	
	
	if (strTable == 'sys_update_xml')
	{
		return GetRecord('sys_update_set',grRecord.update_set,true);
	}	
	if (strTable == 'sys_update_set')
	{
		return GetRecord('sys_update_set',grRecord.parent,true);
	}	
		
	if (strTable == 'ts_table')
	{
		return GetRecord('ts_group',grRecord.group,true);
	}	

	if (strTable == 'sys_ui_list')
	{
		return GetRecord('sys_ui_view',grRecord.view,true);
	}	
	if (strTable == 'sys_ui_list_element')
	{
		return GetRecord('sys_ui_list',grRecord.list_id,true);
	}	
	if (strTable == 'sys_ui_related_list')
	{
		return GetRecord('sys_ui_view',grRecord.view,true);
	}
	if (strTable == 'sys_ui_related_list_entry')
	{
		return GetRecord('sys_ui_related_list',grRecord.list_id,true);
	}
	if (strTable == 'sys_ui_section')
	{
		return GetRecord('sys_ui_view',grRecord.view,true);
	}	
	if (strTable == 'sys_ui_element')
	{
		return GetRecord('sys_ui_section',grRecord.sys_ui_section,true);
	}
	if (strTable == 'sys_ui_form')
	{
		return GetRecord('sys_ui_view',grRecord.view,true);
	}
	
	if (strTable == 'sys_ui_policy_rl_action')
	{
		return GetRecord('sys_ui_policy',grRecord.ui_policy,true);
	}	
	if (strTable == 'sys_ui_policy_action')
	{
		return GetRecord('sys_ui_policy',grRecord.ui_policy,true);
	}		

	if (strTable == 'fx_rate')
	{
		var grCurrency = new GlideRecord('fx_currency');
		grCurrency.addQuery('code','=',grRecord.currency);
		grCurrency.query();
		if (grCurrency.next())
		{
			return grCurrency;
		}
	}		
	
	if (strTable == 'sys_decision_input')
	{
		return GetRecord('sys_decision',grRecord.model,true);
	}	
	if (strTable == 'sys_decision_question')
	{
		return GetRecord('sys_decision',grRecord.decision_table,true);
	}		

	
	if (strTable == 'sys_app_module')
	{
		return GetRecord('sys_app_application',grRecord.application,true);
	}	
	
	if (strTable == 'rm_release')
	{
		var grParent = GetRecord('rm_product',grRecord.parent,true);
		if (IsValidRecord(grParent) == true)
		{
			return grParent;
		}
		return GetRecord('rm_release',grRecord.parent,true);
	}		
	if (strTable == 'rm_release_phase')
	{
		return GetRecord('rm_release',grRecord.parent,true);
	}	
	if (strTable == 'rm_task')
	{
		return GetRecord('rm_release_phase',grRecord.parent,true);
	}		
	if (strTable == 'rm_feature')
	{
		return GetRecord('rm_release',grRecord.parent,true);
	}		
	
	if (strTable == 'label_entry')
	{
		return GetRecord('label',grRecord.label,true);
	}	
	
	if (strTable == 'cmn_location')
	{
		return GetRecord('core_company',grRecord.company,true);
	}
	
	if (strTable == 'sys_ui_action_view')
	{
		return GetRecord('sys_ui_action',grRecord.sys_ui_action,true);
	}
	
	if (strTable == 'sc_item_option')
	{
		var grItemOptionMtom = new GlideRecord('sc_item_option_mtom');
		grItemOptionMtom.addQuery('sc_item_option',grRecord.sys_id);
		grItemOptionMtom.query();
		if (grItemOptionMtom.next())
		{
			return grItemOptionMtom;
		}
	}
	
	if (strTable == 'sc_item_option_mtom')
	{
		return GetRecord('sc_req_item',grRecord.request_item);
	}
	
	if (strTable == 'item_option_new')
	{
		if (grRecord.cat_item != '')
		{
			return GetRecord('sc_cat_item',grRecord.cat_item);
		}
		if (grRecord.variable_set != '')
		{
			return GetRecord('item_option_new_set',grRecord.variable_set);
		}
	}	
	
	if (strTable == 'sys_ws_operation')
	{
		return GetRecord('sys_ws_definition',grRecord.web_service_definition);
	}	
	if (strTable == 'sys_ws_query_parameter')
	{
		return GetRecord('sys_ws_definition',grRecord.web_service_definition);
	}
	if (strTable == 'sys_ws_query_parameter_map')
	{
		return GetRecord('sys_ws_operation',grRecord.web_service_operation);
	}
		
	if (strTable == 'cmn_schedule_span')
	{
		return GetRecord('cmn_schedule',grRecord.schedule);
	}
	
	if (strTable == 'sys_ui_bookmark')
	{
		return GetRecord('sys_ui_bookmark_group',grRecord.group);
	}	
	
	if (strTable == 'sp_rectangle_menu_item')
	{
		return GetRecord('sp_rectangle_menu',grRecord.sp_rectangle_menu);
	}	
	
	if (strTable == 'sys_user')
	{
		var grParent = GetRecord('core_company',grRecord.company);
		if (IsValidRecord(grParent) == true)
		{
			return grParent;
		}
		return GetRecord('customer_account',grRecord.getValue('account'));
	}	
	
	if (strTable == 'sysevent_email_action')
	{
		return GetRecord('sys_notification_category',grRecord.category);
	}	
	
	if (strTable == 'x_snc_devtools_transporter_record')
	{
		return GetRecord('x_snc_devtools_transporter_package',grRecord.package);
	}

	if (strTable == 'syntax_editor_macro')
	{
		var grSI = new GlideRecord('sys_script_include');
		grSI.addQuery('name','=',grRecord.name);
		grSI.addQuery('sys_scope','=',grRecord.sys_scope);
		grSI.query();
		if (grSI.next())
		{
			return grSI;
		}
	}

	if (strTable == 'catalog_script_client')
	{
		if (grRecord.applies_to == 'set')
		{
			return GetRecord('item_option_new_set',grRecord.variable_set);
		}
		if (grRecord.applies_to == 'item')
		{
			return GetRecord('sc_cat_item',grRecord.cat_item);
		}		
	}

	if (strTable == 'ais_child_table')
	{
		return GetRecord('ais_datasource',grRecord.datasource);
	}	
	if (strTable == 'ais_datasource_attribute')
	{
		return GetRecord('ais_datasource',grRecord.datasource);
	}	
	if (strTable == 'ais_datasource_field_attribute')
	{
		return GetRecord('ais_datasource',grRecord.datasource);
	}	
	if (strTable == 'ais_search_source')
	{
		return GetRecord('ais_datasource',grRecord.datasource);
	}

	if (strTable == 'x_snc_devtools_dependency')
	{
		return GetRecord('sys_app',grRecord.sys_scope);
	}
	if (strTable == 'x_snc_devtools_technical_debt')
	{
		return GetRecord('sys_app',grRecord.sys_scope);
	}

	var strParentTable = GetParentTable(strTable);
	if (strParentTable != '')
	{
		return GetParentRecord(strParentTable,strSysId);
	}
	
	return false;
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-09-08 12:44:48</sys_created_on>
        <sys_id>9934e6141b6abc505331b8449b4bcbdd</sys_id>
        <sys_mod_count>143</sys_mod_count>
        <sys_name>GetParentRecord</sys_name>
        <sys_package display_value="DevTools" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevTools">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_script_include_9934e6141b6abc505331b8449b4bcbdd</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-03-21 12:59:09</sys_updated_on>
    </sys_script_include>
</record_update>
