<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_devtools.DocumentationAPI</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>The DocumentationAPI helps to render fragments of an HTML page that documents the components of a scoped application.
|
Methods:
* initialize()
* RenderHeader()
* RenderDescription()
* RenderListItem()
* RenderCopyright()
* RenderDisclaimer()
* RenderLicense()
* RenderRoles()
* RenderProperties()
* RenderTables()
* RenderConnectionAndCredentialAliases()
* RenderEvents()
* RenderUIActions()
* RenderScriptIncludes()
* RenderUIScripts()
* RenderBusinessRules()
* RenderScheduledJobs()
* RenderTestStepConfigurations()
* RenderExtensionPoints()
* RenderInstanceScanChecks()
* RenderEditorMacros()
* RenderRestApis()
* RenderDependencies()
* RenderTechnicalDebts()
* RenderSystemRequirements()
* RenderInstallationInstructionsImportFromSourceControl()
* RenderInstallationInstructionsBackgroundScript()
* RenderInstallationInstructionsConfigureTableCrossScopeAccess()
* RenderInstallationInstructionsAppInstall()
* RenderInstallationInstructionsRunTestSuite()
* RenderError()</description>
        <mobile_callable>false</mobile_callable>
        <name>DocumentationAPI</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[var DocumentationAPI = Class.create();
DocumentationAPI.prototype =
{
	initialize: function(vApp)  
	{
		this.m_bInit = false;
		this.m_strAppSysId = '';
		this.m_strAppName = 'UNDEFINED';
		this.m_strAppVersion = '';
		this.m_strScope = '';
		this.m_bGitHubRepeat = false;
		this.m_bTestSuiteRepeat = false;   

		if (IsValidSysId(vApp) == true)   
		{
			this.m_strAppSysId = GetStringValue(vApp);
		}
		
		var grApp = GetAppRecord(vApp);
		if (IsValidRecord(grApp) == true)
		{
			this.m_bInit = true;
			this.m_strAppSysId = GetStringValue(grApp.sys_id);
			this.m_strAppName = GetStringValue(grApp.getValue('name'));
			this.m_strAppVersion = GetStringValue(grApp.getValue('version'));
			this.m_strScope = GetStringValue(grApp.getValue('scope'));
			this.m_strDescription = GetStringValue(grApp.getValue('short_description'));
		}
    
	},
	
	RenderHeader: function()
	{
		return '<h1>'+this.m_strAppName+' '+this.m_strAppVersion+'</h1>';
	},
	
	RenderDescription: function()
	{
		var strDescription = HtmlEncode(this.m_strDescription);
		return '<p>'+strDescription+'</p>';
	},
	
	RenderListItem: function(strItem, strURL, strText)
	{
		strURL = GetStringValue(strURL);
		strText = GetStringValue(strText);
		var strHtml = '';
		strHtml += '<li>';
		if (strURL != '')
		{
			strHtml += HtmlRenderLink(strURL,strItem,true);
		}
		else
		{
			strHtml += '<b>'+strItem +'</b>&#160;';
		}
		if (strText != '')
		{
			strHtml += '<p>'+strText+'</p>';
		}
		strHtml += '</li>';		
		return strHtml;
	},
	
	RenderCopyright: function(nCopyrightYear, strCopyrightHolder)
	{
		var strYear = '';
		nCopyrightYear = GetIntegerValue(nCopyrightYear);
		strCopyrightHolder = GetStringValue(strCopyrightHolder);
		var datenow = new Date(GetTimeNow());
		var nCurrentYear = GetIntegerValue(datenow.getFullYear());
		if (nCurrentYear == nCopyrightYear)
		{
			strYear = GetStringValue(nCopyrightYear);
		}
		else
		{
			strYear = GetStringValue(nCopyrightYear)+'-'+GetStringValue(nCurrentYear);
		}
		return '<p>Copyright '+strYear+' by '+strCopyrightHolder+'</p>';
	},
	
	RenderDisclaimer: function()
	{
		var strHtml = '';
		strHtml += '<p>'+GetAppName(this.m_strAppSysId)+' is NOT an officially supported ServiceNow product.</p>';
		strHtml += '<p>'+GetAppName(this.m_strAppSysId)+' does NOT come with any kind of warranty. If you use it, you own it!</p>';
		return strHtml;
	},	
	
	RenderLicense: function()
	{
		var strLicense = '';
		
		strLicense += '<p>Licensed under the Apache License, Version 2.0 (the "License")</p>';
		strLicense += '<p>You may not use '+this.m_strAppName+' except in compliance with the License.</p>';
		strLicense += '<p>You may obtain a copy of the License at: '+HtmlRenderLink('https://www.apache.org/licenses/LICENSE-2.0','',true)+'</p>';
		strLicense += '<p>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.</p>';
		return strLicense;
	},
	
	RenderRoles: function()
	{
		if (this.m_bInit == false)
		{
			return this.RenderError();
		}	
		var grUR = new GlideRecord('sys_user_role');
		grUR.addQuery('sys_scope','=',this.m_strAppSysId);
		grUR.orderBy('name');
		grUR.query();

		var strHtml = '';
		if (grUR.getRowCount() == 0)
		{
			strHtml += '<p>This app does not define any roles.</p>';
		}
		else
		{
			strHtml += '<ul>';
			while (grUR.next())
			{
				strHtml += this.RenderListItem(
					grUR.getValue('name'),
					GetInstanceRecordPath('sys_user_role',grUR.sys_id),
					grUR.getValue('description'))
			}
			strHtml += '</ul>';
		}
		return strHtml;			
	},
	
	RenderProperties: function()
	{
		if (this.m_bInit == false)
		{
			return this.RenderError();
		}	
		var grSP = new GlideRecord('sys_properties');
		grSP.addQuery('sys_scope','=',this.m_strAppSysId);
		grSP.orderBy('name');
		grSP.query();

		var strHtml = '';
		if (grSP.getRowCount() == 0)
		{
			strHtml += '<p>This app does not contain any system properties.</p>';
		}
		else
		{
			strHtml += '<ul>';
			while (grSP.next())
			{
				var strDescription = HtmlEncode(grSP.getValue('description'));
				strHtml += this.RenderListItem(
					grSP.getValue('name'),
					GetInstanceRecordPath('sys_properties',grSP.sys_id),
					strDescription);
			}
			strHtml += '</ul>';
		}
		return strHtml;	
	},

	RenderTables: function()
	{
		if (this.m_bInit == false)
		{
			return this.RenderError();
		}	
		var grDBO = new GlideRecord('sys_db_object');
		grDBO.addQuery('sys_scope','=',this.m_strAppSysId);
		grDBO.orderBy('label');
		grDBO.query();

		var strHtml = '';
		if (grDBO.getRowCount() == 0)
		{
			strHtml += '<p>This app does not add any tables.</p>';
		}
		else
		{
			strHtml += '<ul>';
			while (grDBO.next())
			{
				var strDetails = '';

				var strParentTable = GetParentTable(grDBO.getValue('name'));
				if (strParentTable != '')
				{
					var grParent = new GlideRecord('sys_db_object');
					grParent.addQuery('name','=',strParentTable);
					grParent.query();
					if (grParent.next())
					{
						var strParentTableLink = HtmlRenderLink(
							GetInstanceRecordPath('sys_db_object',grParent.sys_id),
							grParent.label+' (' + grParent.name + ')',
							true);
						strDetails += 'The table is derived from table&#160;'+strParentTableLink+'.<br/>';
					}
				}
				else
				{
					strDetails += 'The table is not derived from any other table.';
				}
				strHtml += this.RenderListItem(
					grDBO.getValue('label') + ' (' + grDBO.getValue('name') + ')',
					GetInstanceRecordPath('sys_db_object',grDBO.sys_id),
					strDetails);
			}
			strHtml += '</ul>';
		}
		return strHtml;	
	},


	RenderConnectionAndCredentialAliases: function()
	{
		if (this.m_bInit == false)
		{
			return this.RenderError();
		}	
		var grAlias = new GlideRecord('sys_alias');
		grAlias.addQuery('sys_scope','=',this.m_strAppSysId);
		grAlias.orderBy('name');
		grAlias.query();

		var strHtml = '';
		if (grAlias.getRowCount() == 0)
		{
			strHtml += '<p>This app does not contain any connection or credential aliases.</p>';
		}
		else
		{
			strHtml += '<ul>';
			while (grAlias.next())
			{
				var strDescription = 'ID: '+HtmlEncode(grAlias.getValue('id'));
				strHtml += this.RenderListItem(
					grAlias.getValue('name')+' ('+grAlias.getDisplayValue('type')+')',
					GetInstanceRecordPath('sys_alias',grAlias.sys_id),
					strDescription);
			}
			strHtml += '</ul>';
		}
		return strHtml;	
	},	
	
	RenderEvents: function()
	{
		if (this.m_bInit == false)
		{
			return this.RenderError();
		}	
		var grEvent = new GlideRecord('sysevent_register');
		grEvent.addQuery('sys_scope','=',this.m_strAppSysId);
		grEvent.orderBy('event_name');
		grEvent.query();

		var strHtml = '';
		if (grEvent.getRowCount() == 0)
		{
			strHtml += '<p>This app does not contain events.</p>';
		}
		else
		{
			strHtml += '<ul>';
			while (grEvent.next())
			{
				strHtml += this.RenderListItem(
					grEvent.getValue('event_name'),
					'',
					grEvent.getValue('description'));
			}
			strHtml += '</ul>';
		}
		return strHtml;			
	},
	
	RenderUIActions: function()
	{
		if (this.m_bInit == false)
		{
			return this.RenderError();
		}
		var grSUA = new GlideRecord('sys_ui_action');
		grSUA.addQuery('sys_scope','=',this.m_strAppSysId);
		grSUA.orderBy('name');
		grSUA.addActiveQuery();
		grSUA.query();

		var strHtml = '';
		if (grSUA.getRowCount() == 0)
		{
			strHtml += '<p>This app does not contain any UI Actions.</p>';
		}
		else
		{
			strHtml += '<ul>';
			while (grSUA.next())
			{
				var strName = grSUA.getValue('name');
				var strTable = grSUA.getValue('table');
				var strComments = GetStringValue(grSUA.getValue('comments'));

				strHtml += this.RenderListItem(
					strName + ' ('+strTable+')',
					GetInstanceRecordPath('sys_ui_action',grSUA.sys_id),
					strComments);
			}
			strHtml += '</ul>';
		}
		return strHtml;
	},
	
	
	RenderScriptIncludes: function()
	{
		if (this.m_bInit == false)
		{
			return this.RenderError();
		}
		var grSSI = new GlideRecord('sys_script_include');
		grSSI.addQuery('sys_scope','=',this.m_strAppSysId);
		grSSI.addQuery('access','=','public');
		grSSI.orderBy('name');
		grSSI.query();

		var strHtml = '';
		if (grSSI.getRowCount() == 0)
		{
			strHtml += '<p>This app does not contain any Script Includes.</p>';
		}
		else
		{
			strHtml += '<ul>';
			while (grSSI.next())
			{
				var strDescription = HtmlEncode(grSSI.getValue('description'));

				strHtml += this.RenderListItem(
					grSSI.getValue('name'),
					GetInstanceRecordPath('sys_script_include',grSSI.sys_id),
					strDescription);
			}
			strHtml += '</ul>';
		}
		return strHtml;
	},
	
	
	RenderUIScripts: function()
	{
		if (this.m_bInit == false)
		{
			return this.RenderError();
		}
		var grSUS = new GlideRecord('sys_ui_script');
		grSUS.addQuery('sys_scope','=',this.m_strAppSysId);
		grSUS.addQuery('active','=','true');
		grSUS.orderBy('name');
		grSUS.query();

		var strHtml = '';
		if (grSUS.getRowCount() == 0)
		{
			strHtml += '<p>This app does not contain any UI Scripts.</p>';
		}
		else
		{
			strHtml += '<ul>';
			while (grSUS.next())
			{
				//var strDescription = HtmlEncode(grSUS.getValue('description'));
				
				strHtml += this.RenderListItem(
					grSUS.getValue('script_name'),
					'/sys_ui_script.do?sys_id='+grSUS.sys_id,
					grSUS.getValue('description'));
			}
			strHtml += '</ul>';
		}
		return strHtml;
	},	

	RenderBusinessRules: function()
	{
		if (this.m_bInit == false)
		{
			return this.RenderError();
		}
		var grSS = new GlideRecord('sys_script');
		grSS.addQuery('sys_scope','=',this.m_strAppSysId);
		grSS.orderBy('name');
		grSS.addActiveQuery();
		grSS.query();

		var strHtml = '';
		if (grSS.getRowCount() == 0)
		{
			strHtml += '<p>This app does not contain any Business Rules.</p>';
		}
		else
		{
			strHtml += '<ul>';
			while (grSS.next())
			{
				var strName = grSS.getValue('name');
				var strCollection = grSS.getValue('collection');
				var strDescription = grSS.getValue('description');
				
				strHtml += this.RenderListItem(
					strName +' ('+strCollection+')',
					GetInstanceRecordPath('sys_script',grSS.sys_id),
					strDescription);
			}
			strHtml += '</ul>';
		}
		return strHtml;
	},

	RenderScheduledJobs: function()
	{
		if (this.m_bInit == false)
		{
			return this.RenderError();
		}
		
		var strHtml = '';
		
		var grSS = new GlideRecord('sysauto_script');
		grSS.addQuery('sys_scope','=',this.m_strAppSysId);
		grSS.orderBy('name');
		grSS.addActiveQuery();
		grSS.query();

		if (grSS.getRowCount() == 0)
		{
			strHtml += '<p>This app does not contain any active scheduled jobs.</p>';
		}
		else
		{
			strHtml += '<ul>';
			while (grSS.next())
			{
				var strName = grSS.getValue('name');
				
				var strRunAs = '';
				if (GetStringValue(grSS.run_as))
				{
					strRunAs = ' as user ' + HtmlRenderLink(GetInstanceRecordPath('sys_user',grSS.run_as),grSS.run_as.getDisplayValue(),true);
				}

				strHtml += this.RenderListItem(
					strName,
					GetInstanceRecordPath('sysauto_script',grSS.sys_id),
					RenderRecordExecutionSchedule(grSS) + strRunAs
					);
			}
			strHtml += '</ul>';
		}
		return strHtml;
	},
	
	
	
	RenderTestStepConfigurations: function()
	{
		if (this.m_bInit == false)
		{
			return this.RenderError();
		}	
		var grSC = new GlideRecord('sys_atf_step_config');
		grSC.addQuery('sys_scope','=',this.m_strAppSysId);
		grSC.orderBy('name');
		grSC.query();

		
		var strHtml = '';
		if (grSC.getRowCount() == 0)
		{
			strHtml += '<p>This app does not contain any Test Step Configurations.</p>';
		}
		else
		{
			strHtml += '<ul>';
			while (grSC.next())
			{
				var strDescription = GetStringValue(grSC.getValue('html_description'));
				strDescription = strDescription.replace('<p>','');
				strDescription = strDescription.replace('</p>','');
							
				strHtml += this.RenderListItem(
					grSC.getValue('name'),
					'/sys_atf_step_config.do?sys_id='+grSC.sys_id,
					strDescription);
			}
			strHtml += '</ul>';
		}
		return strHtml;	
	},
	
	RenderExtensionPoints: function()
	{
		if (this.m_bInit == false)
		{
			return this.RenderError();
		}
		var grSEP = new GlideRecord('sys_extension_point');
		grSEP.addQuery('sys_scope','=',this.m_strAppSysId);
		grSEP.addQuery('restrict_scope','=','false');
		grSEP.orderBy('name');
		grSEP.query();

		var strHtml = '';
		if (grSEP.getRowCount() == 0)
		{
			strHtml += '<p>This app does not contain any Extension Points.</p>';
		}
		else
		{
			strHtml += '<ul>';
			while (grSEP.next())
			{
				strHtml += this.RenderListItem(
					grSEP.getValue('name'),
					GetInstanceRecordPath('sys_extension_point',grSEP.sys_id),
					grSEP.getValue('description') + '<pre>'+grSEP.getValue('example')+'</pre>');
			}
			strHtml += '</ul>';
		}
		return strHtml;
	},	
	
	RenderInstanceScanChecks: function()
	{
		if (this.m_bInit == false)
		{
			return this.RenderError();
		}
		var grSC = new GlideRecord('scan_check');
		grSC.addQuery('sys_scope','=',this.m_strAppSysId);
		grSC.orderBy('name');
		grSC.query();

		var strHtml = '';
		if (grSC.getRowCount() == 0)
		{
			strHtml += '<p>This app does not contain any Instance Scan Checks.</p>';
		}
		else
		{
			strHtml += '<ul>';
			while (grSC.next())
			{
				strHtml += this.RenderListItem(
					grSC.getValue('name'),
					GetInstanceRecordPath('scan_check',grSC.sys_id),
					grSC.getValue('short_description'));
			}
			strHtml += '</ul>';
		}
		return strHtml;
	},
	
	RenderEditorMacros: function()
	{
		if (this.m_bInit == false)
		{
			return this.RenderError();
		}
		var grSEM = new GlideRecord('syntax_editor_macro');
		grSEM.addQuery('sys_scope','=',this.m_strAppSysId);
		grSEM.orderBy('name');
		grSEM.query();

		var strHtml = '';
		if (grSEM.getRowCount() == 0)
		{
			strHtml += '<p>This app does not contain any Syntax Editor Macros.</p>';
		}
		else
		{
			strHtml += '<ul>';
			while (grSEM.next())
			{
				var strDescription = HtmlEncode(grSEM.getValue('comments'));
				var strText = GetStringValue(grSEM.getValue('text'));
				
				strHtml += this.RenderListItem(
					grSEM.getValue('name'),
					GetInstanceRecordPath('syntax_editor_macro',grSEM.sys_id),
					strDescription + '<br/>' + '<pre>'+strText+'</pre>');
			}
			strHtml += '</ul>';
		}
		return strHtml;
	},	
	
	RenderRestApis: function()
	{
		if (this.m_bInit == false)
		{
			return this.RenderError();
		}
		var grWSD = new GlideRecord('sys_ws_definition');
		grWSD.addQuery('sys_scope','=',this.m_strAppSysId);
		grWSD.orderBy('name');
		grWSD.query();
		
		var strHtml = '';
		if (grWSD.getRowCount() == 0)
		{
			strHtml += '<p>This app does not contain any REST APIs.</p>';
		}
		else
		{
			while (grWSD.next())
			{
				var strName = GetStringValue(grWSD.getValue('name'));
				var strLink = HtmlRenderLink(
					GetInstanceRecordPath('sys_ws_definition',
					grWSD.sys_id),strName,true);
				strHtml += '<h4>'+strLink+'</h4>';
				
				var strShortDescription = HtmlEncode(grWSD.getValue('short_description'));
				strHtml += '<p>'+strShortDescription+'</p>';
				
				var grWSO = new GlideRecord('sys_ws_operation');
				grWSO.addQuery('sys_scope','=',this.m_strAppSysId);
				grWSO.orderBy('name');
				grWSO.query();
				
				strHtml += '<ul>';
				while (grWSO.next())
				{
					var strShortDescription = HtmlEncode(grWSO.getValue('short_description'));
					if (strShortDescription != '')
					{
						strShortDescription += '<br/>';
					}
					
					strHtml += this.RenderListItem(
						grWSO.getValue('name'),
						GetInstanceRecordPath('sys_ws_operation',grWSO.sys_id),
						strShortDescription
						+'Method: '+grWSO.getValue('http_method')+'<br/>'
						+'URI: '+grWSO.getValue('operation_uri')+'<br/>');		
				}
				strHtml += '</ul>';
				
				
				//GetInstanceRecordPath('sys_wd_definition',grWSD.sys_id),
				//strShortDescription + strResources);
			}
		}
		return strHtml;
	},

	RenderDependencies: function()
	{
		if (this.m_bInit == false)
		{
			return this.RenderError();
		}	
		var grDep = new GlideRecord('x_snc_devtools_dependency');
		grDep.addQuery('sys_scope','=',this.m_strAppSysId);
		grDep.orderBy('dependency.name');
		grDep.query();

		var strHtml = '';
		if (grDep.getRowCount() == 0)
		{
			strHtml += '<p>This app does not have any dependencies.</p>';
		}
		else
		{
			strHtml += '<ul>';
			while (grDep.next())
			{
				var strDetails = '';
				strDetails += 'Compatible Versions: '+grDep.versions + '<br/>';
				strDetails += 'Repository url:&#160;'+HtmlRenderLink(grDep.repo_url,'',true) + '<br/>';
				strDetails += grDep.reason + '<br/>';
			
				var strLink = GetStringValue(grDep.documentation_url);
				if (IsValidUrl(strLink) == false)
				{
					strLink = GetInstanceRecordPath('sys_app',grDep.dependency);
				}
			
				strHtml += this.RenderListItem(
					grDep.getValue('name'),
					strLink,
					strDetails);
			}
			strHtml += '</ul>';
		}
		return strHtml;	
	},


	RenderTechnicalDebts: function()
	{
		if (this.m_bInit == false)
		{
			return this.RenderError();
		}	
		var grTD = new GlideRecord('x_snc_devtools_technical_debt');
		grTD.addQuery('sys_scope','=',this.m_strAppSysId);
		grTD.orderBy('short_description');
		grTD.query();

		var strHtml = '';
		if (grTD.getRowCount() == 0)
		{
			strHtml += '<p>No technical debt has been documented for this application.</p>';
		}
		else
		{
			strHtml += '<ul>';
			while (grTD.next())
			{
				var strDetails = '';
				strDetails += grTD.description + '<br/>';
				var strID = GetStringValue(grTD.id);
				if (strID != '')
				{
					strDetails += 'Switch: '+GetBoolValue(grTD.getValue('switch')) + '<br/>';
				}
			
			
				strHtml += this.RenderListItem(
					grTD.short_description,
					GetInstanceRecordPath('x_snc_devtools_technical_debt',grTD.sys_id),
					strDetails);
			}
			strHtml += '</ul>';
		}
		return strHtml;	
	},


	RenderSystemRequirements: function(aSupportedReleases,bGitHubAccessRequired,aDependencies)
	{
		aSupportedReleases = GetArrayValue(aSupportedReleases);
		var strHtml = '';
		
		if (aSupportedReleases.length > 0)
		{
			strHtml += '<li>';
			strHtml += RenderArray(aSupportedReleases,', ',' or ');
			strHtml += '</li>';
		}
		
		if (bGitHubAccessRequired == true)
		{
			strHtml += '<li>Access to&#160;<a href="https://www.github.com" target="_blank">GitHub.com</a></li>';
		}
		
		aDependencies = GetArrayValue(aDependencies);
		for (var nDependency = 0; nDependency < aDependencies.length; nDependency++)
		{
			dependency = aDependencies[nDependency];
			var strAppName = GetStringValue(GetValue(dependency,'name'));
			if (strAppName != '')
			{
				var strVersions = GetStringValue(GetValue(dependency,'compatible_versions'));
				if (strVersions == '')
				{
					strVersions = GetStringValue(GetValue(dependency,'version'));
				}
				var strUrl = GetStringValue(GetValue(dependency,'url'));
				if (strUrl == '')
				{
					strUrl = GetStringValue(GetValue(dependency,'x_snc_devtools_documentation_url'));
				}
				strHtml += '<li>';
				if (strUrl != '')
				{
					strHtml += '<a href="'+strUrl+'" target="_blank">';
				}
				strHtml += strAppName+' '+RenderArray(GetArrayValue(strVersions),', ',' or ');
				if (strUrl != '')
				{
					strHtml += '</a>';
				}
				strHtml += '</li>';
			}
		}
		return strHtml;
	},	
	
	RenderInstallationInstructionsImportFromSourceControl: function(strAppName, strRepoURL, bAdditionalSteps, strInstallURL)
	{
		bAdditionalSteps = GetBoolValue(bAdditionalSteps);
		strInstallURL = GetStringValue(strInstallURL);
		var strHtml = '';
		if (this.m_bGitHubRepeat == false)
		{
			this.m_bGitHubRepeat = true;
			strHtml += '<li>Create an account on&#160;<a href="https://github.com/" target="_blank">GitHub</a>&#160;- if not done already.</li>';
			strHtml += '<li>Create a&#160;<a href="https://github.com/settings/tokens" target="_blank">personal access token</a>&#160;for your GitHub account.</li>';
			strHtml += '<li>Add&#160;<a href="/discovery_credentials_list.do" target="_blank">credentials</a>&#160;to access GitHub - use "Basic Auth".</li>';
		}
		strHtml += '<li>Fork the repository&#160;<a href="'+strRepoURL+'" target="_blank">'+strRepoURL+'</a>.</li>';
		strHtml += '<li>Go to&#160;<a href="/$studio.do" target="_blank">Studio</a>&#160;and import the '+strAppName+' application from source control.</li>';
		if (bAdditionalSteps == true)
		{
			if (strInstallURL != '')
			{
				strHtml += '<li>Perform all installation steps for the '+strAppName+' application documented here:&#160;<a href="'+strInstallURL+'" target="_blank">'+strInstallURL+'</a>&#160;</li>';
				
			}
			else
			{
				strHtml += '<li>Perform all installation steps documented for the '+strAppName+' application.</li>';
			}
		}
		return strHtml;
	},

	RenderInstallationInstructionsBackgroundScript: function(strText, strScript, strScope)
	{
		var strText = GetStringValue(strText);
		var strScript = GetStringValue(strScript);
		var strScope = GetStringValue(strScope);
		if (strScope == '')
		{
			strScope = this.m_strScope;
		}
		if (strText != '')
		{
			strText += '<br/>';
		}
		var strHtml = '';
		strHtml +=	'<li>'+strText+'Run the following script as a <a href="/sys.scripts.do" target="_blank">background script</a> in scope&#160;<b>'+strScope+'</b>:</li>';
		strHtml +=	'<pre>'+strScript+'</pre>';
		return strHtml;
	},

	
	RenderInstallationInstructionsConfigureTableCrossScopeAccess: function(strTable)
	{
		var strTable = GetStringValue(strTable);
		if (strTable == '')
		{
			return '';
		}
		var strHtml = this.RenderInstallationInstructionsBackgroundScript(
			'Enable create, read, write and delete operations for all applications on the table&#160;<a href="/sys_db_object.do?sys_id='+strTable+'&amp;sysparm_refkey=name" target="_blank">'+strTable+'</a>.',
		"var grRecord = new GlideRecord('sys_db_object');\n"
		+"grRecord.addQuery('name','=','"+strTable+"');\n"
		+"grRecord.query();\n"
		+"if (grRecord.next())\n"
		+"{\n"
		+"   grRecord.access = 'public';\n"
		+"   grRecord.read_access = 'true';\n"
		+"   grRecord.create_access = 'true';\n"
		+"   grRecord.update_access = 'true';\n"
		+"   grRecord.delete_access = 'true';\n"
		+"   grRecord.update();\n"
		+"}\n"
		+"gs.invalidateCache();",
		'global');
		return strHtml;
	},	
	

	RenderInstallationInstructionsAppInstall: function()
	{
		var strApp = this.m_strScope;
		
		var strHtml = this.RenderInstallationInstructionsBackgroundScript(
			'Execute installation scripts.',
			'x_snc_devtools.InstallApp("'+strApp+'");');		
		return strHtml;
	},
	
	RenderInstallationInstructionsRunTestSuite: function(strTestSuiteSysId)
	{
		var strHtml = '';
		var grTestSuite = new GlideRecord('sys_atf_test_suite');
		if (grTestSuite.get(strTestSuiteSysId) != false)
		{
			if (this.m_bTestSuiteRepeat == false)
			{
				this.m_bTestSuiteRepeat = true;
				strHtml += '<li>Set the&#160;<a href="/nav_to.do?uri=sys_properties.do?sys_id=99ca5ab55b1022001f80efe5f0f91a05" target="_blank">sn_atf.runner.enabled system property</a>&#160;to "true" to activate the ATF test execution - if not set already.</li>';
			}

			strHtml += '<li>On non-production instances: Run the&#160;<a href="/nav_to.do?uri=sys_atf_test_suite.do?sys_id='+strTestSuiteSysId+'&sysparm_view=devtools&sysparm_view_forced=true" target="_blank">'+grTestSuite.name+'</a> test suite.</li>';
		}
		return strHtml;
	},
	
	RenderError: function()
	{
		return HtmlRenderError('ERROR: DocumentationAPI is not initialized!');
	},

    type: 'DocumentationAPI'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-01-20 15:26:20</sys_created_on>
        <sys_id>98912146db31e490ba15a353059619b6</sys_id>
        <sys_mod_count>262</sys_mod_count>
        <sys_name>DocumentationAPI</sys_name>
        <sys_package display_value="DevTools" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevTools">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_script_include_98912146db31e490ba15a353059619b6</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-08-28 12:58:53</sys_updated_on>
    </sys_script_include>
</record_update>
