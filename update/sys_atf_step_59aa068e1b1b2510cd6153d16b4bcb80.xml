<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_atf_step">
    <sys_atf_step action="INSERT_OR_UPDATE">
        <active>true</active>
        <copied_from/>
        <description>Run Server Side Validation Script</description>
        <display_name>Run Server Side Script</display_name>
        <inputs/>
        <mugshots_cache_json/>
        <notes/>
        <order>1</order>
        <step_config display_value="Run Server Side Script">41de4a935332120028bc29cac2dc349a</step_config>
        <sys_class_name>sys_atf_step</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-06-09 16:45:02</sys_created_on>
        <sys_id>59aa068e1b1b2510cd6153d16b4bcb80</sys_id>
        <sys_mod_count>56</sys_mod_count>
        <sys_name>Run Server Side Script</sys_name>
        <sys_package display_value="DevTools" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevTools">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_atf_step_59aa068e1b1b2510cd6153d16b4bcb80</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-03-24 18:41:19</sys_updated_on>
        <table/>
        <test display_value="DevTools - GetDependencyListFromTree">af8a828e1b1b2510cd6153d16b4bcb52</test>
        <timeout/>
        <warning_message/>
    </sys_atf_step>
    <sys_variable_value action="delete_multiple" query="document_key=59aa068e1b1b2510cd6153d16b4bcb80"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_atf_step</document>
        <document_key>59aa068e1b1b2510cd6153d16b4bcb80</document_key>
        <order>100</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-06-09 16:45:02</sys_created_on>
        <sys_id>2e1b068e1b1b2510cd6153d16b4bcbd4</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-06-09 16:45:02</sys_updated_on>
        <value>3.1</value>
        <variable display_value="Jasmine version">42f2564b73031300440211d8faf6a777</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_atf_step</document>
        <document_key>59aa068e1b1b2510cd6153d16b4bcb80</document_key>
        <order>200</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-06-09 16:45:02</sys_created_on>
        <sys_id>e21b068e1b1b2510cd6153d16b4bcbd5</sys_id>
        <sys_mod_count>56</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-03-24 18:41:19</sys_updated_on>
        <value>(function(outputs, steps, stepResult, assertEqual)&#13;
{&#13;
	var test = new x_snc_devtools.TestAPI(outputs, steps, stepResult, assertEqual);&#13;
	&#13;
	test.SetResult(true);&#13;
&#13;
&#13;
	function TestCase_GetDependencyListFromTree(dependencytree, vExpected)&#13;
	{&#13;
		function TestCase_GetDependencyListFromTree_CheckResult(vInput,vExpected,vResult)&#13;
		{&#13;
			if (vExpected === false)&#13;
			{&#13;
				return (vExpected == vResult);&#13;
			}&#13;
			var aPackages = GetArrayValue(vResult);&#13;
			if (GetValue(vExpected,'count') != aPackages.length)&#13;
			{&#13;
				test.Log('Unexpected package count.');&#13;
				return false;&#13;
			}&#13;
			if (GetValue(vExpected,'dependency_status_summary') != GetValue(aPackages,aPackages.length-1,'dependency_status_summary'))&#13;
			{&#13;
				test.Log('Unexpected dependency status summary.');&#13;
				return false;&#13;
			}&#13;
			var strTestAppCompatibleVersion = GetStringValue(GetValue(vExpected,'testapp_compatible_version'));&#13;
			if (strTestAppCompatibleVersion != '')&#13;
			{&#13;
				for (var nPackage = 0; nPackage &lt; aPackages.length; nPackage++)&#13;
				{&#13;
					if (GetValue(aPackages[nPackage],'name') == 'TestApp')&#13;
					{&#13;
						if (strTestAppCompatibleVersion != GetValue(aPackages[nPackage],'compatible_versions'))&#13;
						{&#13;
							return false;&#13;
						}&#13;
					}&#13;
				}&#13;
			}&#13;
			var strTestAppDependencyStatus = GetStringValue(GetValue(vExpected,'testapp_dependency_status'));&#13;
			if (strTestAppDependencyStatus != '')&#13;
			{&#13;
				for (var nPackage = 0; nPackage &lt; aPackages.length; nPackage++)&#13;
				{&#13;
					if (GetValue(aPackages[nPackage],'name') == 'TestApp')&#13;
					{&#13;
						if (strTestAppDependencyStatus != GetValue(aPackages[nPackage],'dependency_status'))&#13;
						{&#13;
							return false;&#13;
						}&#13;
					}&#13;
				}&#13;
			}&#13;
&#13;
			return true;&#13;
		}&#13;
&#13;
		test.TestCase(&#13;
			'Function GetDependencyListFromTree()',&#13;
			GetDependencyListFromTree,&#13;
			{&#13;
				'Dependency Tree': dependencytree&#13;
			},&#13;
			vExpected,&#13;
			TestCase_GetDependencyListFromTree_CheckResult);&#13;
	}&#13;
&#13;
	TestCase_GetDependencyListFromTree(null,false);&#13;
	TestCase_GetDependencyListFromTree('',false);&#13;
&#13;
	TestCase_GetDependencyListFromTree(GetPackageDependencyTree('x_snc_devtools'),{ count: 1, dependency_status_summary: 'ok' });&#13;
	&#13;
	&#13;
	test.Log('Scenario: differing compatible versions (higher first)');&#13;
	test.Log('A depends on B');&#13;
	test.Log('B depends on TestApp 1.2.0');&#13;
	test.Log('A depends on TestApp 1.1.0');&#13;
&#13;
	var tree = {&#13;
		name: 'A',&#13;
		version: '1.0.0',&#13;
		sys_id: '1',&#13;
		dependency_status_summary: 'ok',&#13;
		_dependencies: [&#13;
			{&#13;
				name: 'B',&#13;
				version: '1.0.0',&#13;
				sys_id: '2',&#13;
				compatible_versions: '1.0.0',&#13;
				_dependencies: [&#13;
					{&#13;
						name: 'TestApp',&#13;
						version: '1.2.0',&#13;
						sys_id: '3',&#13;
						compatible_versions: '1.2.0'&#13;
					}&#13;
				]&#13;
			},&#13;
			{&#13;
				name: 'TestApp',&#13;
				version: '1.2.0',&#13;
				sys_id: '3',&#13;
				compatible_versions: '1.1.0'&#13;
			}&#13;
		]&#13;
	};&#13;
	TestCase_GetDependencyListFromTree(tree,{ count: 3, dependency_status_summary: 'ok', testapp_compatible_version: '1.2.0' });	&#13;
&#13;
	&#13;
	test.Log('Scenario: differing compatible versions (lower first)');&#13;
	test.Log('A depends on TestApp 1.1.0');&#13;
	test.Log('A depends on B');&#13;
	test.Log('B depends on TestApp 1.2.0');&#13;
	&#13;
&#13;
	var tree = {&#13;
		name: 'A',&#13;
		version: '1.0.0',&#13;
		sys_id: '1',&#13;
		dependency_status_summary: 'ok',&#13;
		_dependencies: [&#13;
			{&#13;
				name: 'TestApp',&#13;
				version: '1.2.0',&#13;
				sys_id: '3',&#13;
				compatible_versions: '1.1.0'&#13;
			},&#13;
			{&#13;
				name: 'B',&#13;
				version: '1.0.0',&#13;
				sys_id: '2',&#13;
				compatible_versions: '1.0.0',&#13;
				_dependencies: [&#13;
					{&#13;
						name: 'TestApp',&#13;
						version: '1.2.0',&#13;
						sys_id: '3',&#13;
						compatible_versions: '1.2.0'&#13;
					}&#13;
				]&#13;
			}&#13;
		]&#13;
	};&#13;
	TestCase_GetDependencyListFromTree(tree,{ count: 3, dependency_status_summary: 'ok', testapp_compatible_version: '1.2.0' });	&#13;
&#13;
&#13;
	test.Log('Scenario: differing incompatible versions (higher first)');&#13;
	test.Log('A depends on B');&#13;
	test.Log('B depends on TestApp 2.0.0');&#13;
	test.Log('A depends on TestApp 1.1.0');&#13;
&#13;
	var tree = {&#13;
		name: 'A',&#13;
		version: '1.0.0',&#13;
		sys_id: '1',&#13;
		_dependencies: [&#13;
			{&#13;
				name: 'B',&#13;
				version: '1.0.0',&#13;
				sys_id: '2',&#13;
				compatible_versions: '1.0.0',&#13;
				_dependencies: [&#13;
					{&#13;
						name: 'TestApp',&#13;
						version: '2.0.0',&#13;
						sys_id: '3',&#13;
						compatible_versions: '2.0.0'&#13;
					}&#13;
				]&#13;
			},&#13;
			{&#13;
				name: 'TestApp',&#13;
				version: '1.1.0',&#13;
				sys_id: '3',&#13;
				compatible_versions: '1.1.0'&#13;
			}&#13;
		]&#13;
	};&#13;
	TestCase_GetDependencyListFromTree(tree,&#13;
		{&#13;
			count: 3,&#13;
			dependency_status_summary: 'conflicting_versions',&#13;
			testapp_compatible_version: ''&#13;
		});	&#13;
&#13;
	&#13;
	test.Log('Scenario: differing incompatible versions (lower first)');&#13;
	test.Log('A depends on TestApp 1.1.0');&#13;
	test.Log('A depends on B');&#13;
	test.Log('B depends on TestApp 2.0.0');&#13;
	&#13;
&#13;
	var tree = {&#13;
		name: 'A',&#13;
		version: '1.0.0',&#13;
		sys_id: '1',&#13;
		_dependencies: [&#13;
			{&#13;
				name: 'TestApp',&#13;
				version: '1.2.0',&#13;
				sys_id: '3',&#13;
				compatible_versions: '1.2.0'&#13;
			},&#13;
			{&#13;
				name: 'B',&#13;
				version: '1.0.0',&#13;
				sys_id: '2',&#13;
				compatible_versions: '1.0.0',&#13;
				_dependencies: [&#13;
					{&#13;
						name: 'TestApp',&#13;
						version: '2.0.0',&#13;
						sys_id: '3',&#13;
						compatible_versions: '2.0.0'&#13;
					}&#13;
				]&#13;
			}&#13;
		]&#13;
	};&#13;
	TestCase_GetDependencyListFromTree(tree,&#13;
		{ count: 3, dependency_status_summary: 'conflicting_versions', testapp_compatible_version: '' });		&#13;
	&#13;
&#13;
	test.Log('Scenario: ok');	&#13;
		&#13;
	var grApp = GetAppRecord('x_snc_devtools');&#13;
&#13;
	var grPackagePackage = new GlideRecord('sys_plugins');&#13;
	grPackagePackage.addQuery('name','=','Package');&#13;
	grPackagePackage.query();&#13;
	grPackagePackage.next();&#13;
&#13;
	var grPackageServicePortal = new GlideRecord('sys_plugins');&#13;
	grPackageServicePortal.addQuery('name','=','Service Portal - Core');&#13;
	grPackageServicePortal.query();&#13;
	grPackageServicePortal.next();&#13;
	&#13;
	&#13;
	var grDependency = new GlideRecord('x_snc_devtools_dependency');&#13;
	grDependency.initialize();&#13;
	grDependency.sys_scope = grApp.sys_id;&#13;
	grDependency.dependency = grPackagePackage.sys_id;&#13;
	grDependency.name = 'Package';&#13;
	grDependency.insert();&#13;
	TestCase_GetDependencyListFromTree(GetPackageDependencyTree('x_snc_devtools'),{ count: 2, dependency_status_summary: 'ok' });		&#13;
&#13;
	test.Log('Scenario: incompatible versions');	&#13;
		&#13;
	var grDependency = new GlideRecord('x_snc_devtools_dependency');&#13;
	grDependency.initialize();&#13;
	grDependency.sys_scope = grApp.sys_id;&#13;
	grDependency.dependency = grPackageServicePortal.sys_id;&#13;
	grDependency.name = 'Service Portal - Core';&#13;
	grDependency.versions = '1000.0.0';&#13;
	grDependency.insert();&#13;
	TestCase_GetDependencyListFromTree(GetPackageDependencyTree('x_snc_devtools'),&#13;
		{ count: 3, dependency_status_summary: 'incompatible_version' });&#13;
&#13;
	&#13;
	test.Log('Scenario: missing');	&#13;
&#13;
	var grDependency = new GlideRecord('x_snc_devtools_dependency');&#13;
	grDependency.initialize();&#13;
	grDependency.sys_scope = grApp.sys_id;&#13;
	grDependency.dependency = GetPseudoSysId();&#13;
	grDependency.name = 'Pseudo';&#13;
	grDependency.insert();&#13;
	TestCase_GetDependencyListFromTree(GetPackageDependencyTree('x_snc_devtools'),&#13;
		{ count: 4, dependency_status_summary: 'missing' });&#13;
	&#13;
	test.Log('Scenario: removing duplicates');	&#13;
	&#13;
	// "Service Portal - Core" now also has a dependency to "Pseudo" - so two different packages depend on the same package and duplicates are removed&#13;
	var grDependency = new GlideRecord('x_snc_devtools_dependency');&#13;
	grDependency.initialize();&#13;
	grDependency.sys_scope = grPackageServicePortal.sys_id;&#13;
	grDependency.dependency = GetPseudoSysId();&#13;
	grDependency.name = 'Pseudo';&#13;
	grDependency.insert();&#13;
	TestCase_GetDependencyListFromTree(GetPackageDependencyTree('x_snc_devtools'),&#13;
		{ count: 4, dependency_status_summary: 'missing' });	&#13;
&#13;
	test.Log('Scenario: circular dependency');&#13;
	&#13;
	// "Service Portal - Core" now has a dependency to "DevTools" - this would be a circular dependency which is not allowed!  &#13;
	var grDependency = new GlideRecord('x_snc_devtools_dependency');&#13;
	grDependency.initialize();&#13;
	grDependency.sys_scope = grPackageServicePortal.sys_id;&#13;
	grDependency.dependency = grApp.sys_id;&#13;
	grDependency.name = 'DevTools';&#13;
	grDependency.insert();&#13;
	TestCase_GetDependencyListFromTree(GetPackageDependencyTree('x_snc_devtools'),&#13;
		{ count: 5, dependency_status_summary: 'circular' });&#13;
&#13;
&#13;
	test.Log('Scenario: nested missing dependency');&#13;
	var tree = {&#13;
		name: 'Alpha',&#13;
		version: '1.0.0',&#13;
		sys_id: '1',&#13;
		_dependencies: [&#13;
			{&#13;
				name: 'Beta',&#13;
				version: '1.2.0',&#13;
				sys_id: '2',&#13;
				compatible_versions: '1.2.0'&#13;
			},&#13;
			{&#13;
				name: 'Gamma',&#13;
				version: '1.0.0',&#13;
				sys_id: '3',&#13;
				compatible_versions: '1.0.0',&#13;
				_dependencies: [&#13;
					{&#13;
						name: 'Delta',&#13;
						dependency_status: 'missing',&#13;
						sys_id: '4',&#13;
						compatible_versions: '2.0.0'&#13;
					}&#13;
				]&#13;
			}&#13;
		]&#13;
	};&#13;
&#13;
	TestCase_GetDependencyListFromTree(tree,&#13;
		{ count: 4, dependency_status_summary: 'missing' });&#13;
&#13;
	test.Log('Scenario: Nested missing and non-missing dependency to the same app');&#13;
	var tree = {&#13;
		name: 'Alpha',&#13;
		version: '1.0.0',&#13;
		sys_id: '1',&#13;
		_dependencies: [&#13;
			{&#13;
				name: 'Beta',&#13;
				version: '1.2.0',&#13;
				sys_id: '2',&#13;
				compatible_versions: '1.2.0',&#13;
				_dependencies: [&#13;
					{&#13;
						name: 'TestApp',&#13;
						version: '2.0.1',&#13;
						dependency_status: 'ok',&#13;
						sys_id: '4',&#13;
						compatible_versions: '2.0.1'&#13;
					}&#13;
				]&#13;
			},&#13;
			{&#13;
				name: 'Gamma',&#13;
				version: '1.0.0',&#13;
				sys_id: '3',&#13;
				compatible_versions: '1.0.0',&#13;
				_dependencies: [&#13;
					{&#13;
						name: 'TestApp',&#13;
						dependency_status: 'missing',&#13;
						sys_id: '4',&#13;
						compatible_versions: '2.0.0'&#13;
					}&#13;
				]&#13;
			}&#13;
		]&#13;
	};&#13;
&#13;
	TestCase_GetDependencyListFromTree(tree,&#13;
		{&#13;
			count: 4,&#13;
			dependency_status_summary: 'ok'&#13;
		});&#13;
&#13;
	test.Log('Scenario: Nested non-missing and missing (more recent version) dependency to the same app');&#13;
	var tree = {&#13;
		name: 'Alpha',&#13;
		version: '1.0.0',&#13;
		sys_id: '1',&#13;
		_dependencies: [&#13;
			{&#13;
				name: 'Beta',&#13;
				version: '1.2.0',&#13;
				sys_id: '2',&#13;
				compatible_versions: '1.2.0',&#13;
				_dependencies: [&#13;
					{&#13;
						name: 'TestApp',&#13;
						version: '2.0.1',&#13;
						dependency_status: 'ok',&#13;
						sys_id: '4',&#13;
						compatible_versions: '2.0.1'&#13;
					}&#13;
				]&#13;
			},&#13;
			{&#13;
				name: 'Gamma',&#13;
				version: '1.0.0',&#13;
				sys_id: '3',&#13;
				compatible_versions: '1.0.0',&#13;
				_dependencies: [&#13;
					{&#13;
						name: 'TestApp',&#13;
						dependency_status: 'missing',&#13;
						sys_id: '4',&#13;
						compatible_versions: '2.0.2'&#13;
					}&#13;
				]&#13;
			}&#13;
		]&#13;
	};&#13;
&#13;
	TestCase_GetDependencyListFromTree(tree,&#13;
		{&#13;
			count: 4,&#13;
			dependency_status_summary: 'missing',&#13;
			testapp_compatible_version: '2.0.2',&#13;
			testapp_dependency_status: 'missing'&#13;
		});&#13;
&#13;
	test.Log('Scenario: Nested missing (more recent version) and non-missing dependency to the same app');&#13;
	var tree = {&#13;
		name: 'Alpha',&#13;
		version: '1.0.0',&#13;
		sys_id: '1',&#13;
		_dependencies: [&#13;
			{&#13;
				name: 'Beta',&#13;
				version: '1.2.0',&#13;
				sys_id: '2',&#13;
				compatible_versions: '1.2.0',&#13;
				_dependencies: [&#13;
					{&#13;
						name: 'TestApp',&#13;
						dependency_status: 'missing',&#13;
						sys_id: '4',&#13;
						compatible_versions: '2.0.2'&#13;
					}&#13;
				]&#13;
			},&#13;
			{&#13;
				name: 'Gamma',&#13;
				version: '1.0.0',&#13;
				sys_id: '3',&#13;
				compatible_versions: '1.0.0',&#13;
				_dependencies: [&#13;
					{&#13;
						name: 'TestApp',&#13;
						version: '2.0.1',&#13;
						dependency_status: 'ok',&#13;
						sys_id: '4',&#13;
						compatible_versions: '2.0.1'&#13;
					}&#13;
				]&#13;
			}&#13;
		]&#13;
	};&#13;
&#13;
	TestCase_GetDependencyListFromTree(tree,&#13;
		{&#13;
			count: 4,&#13;
			dependency_status_summary: 'missing',&#13;
			testapp_compatible_version: '2.0.2',&#13;
			testapp_dependency_status: 'missing'&#13;
		});&#13;
&#13;
&#13;
&#13;
&#13;
	test.Log('Scenario: Multiple missing dependencies');&#13;
	var tree = {&#13;
		name: 'Alpha',&#13;
		version: '1.0.0',&#13;
		sys_id: '1',&#13;
		_dependencies: [&#13;
			{&#13;
				name: 'Beta',&#13;
				compatible_versions: '1.2.0',&#13;
				dependency_status: 'missing',&#13;
				sys_id: '2'&#13;
			},&#13;
			{&#13;
				name: 'Gamma',&#13;
				compatible_versions: '1.0.0',&#13;
				dependency_status: 'missing',&#13;
				sys_id: '3'&#13;
			}&#13;
		]&#13;
	};&#13;
&#13;
	TestCase_GetDependencyListFromTree(tree,&#13;
		{&#13;
			count: 3,&#13;
			dependency_status_summary: 'missing',&#13;
		});&#13;
&#13;
	test.Log('Scenario: Multiple missing dependencies with missing Sys Ids');&#13;
	var tree = {&#13;
		name: 'Alpha',&#13;
		version: '1.0.0',&#13;
		sys_id: '1',&#13;
		_dependencies: [&#13;
			{&#13;
				name: 'Beta',&#13;
				compatible_versions: '1.2.0',&#13;
				dependency_status: 'missing',&#13;
			},&#13;
			{&#13;
				name: 'Gamma',&#13;
				compatible_versions: '1.0.0',&#13;
				dependency_status: 'missing',&#13;
			}&#13;
		]&#13;
	};&#13;
&#13;
	TestCase_GetDependencyListFromTree(tree,&#13;
		{&#13;
			count: 3,&#13;
			dependency_status_summary: 'missing',&#13;
		});&#13;
&#13;
&#13;
	return test.GetResult();&#13;
	&#13;
})(outputs, steps, stepResult, assertEqual);</value>
        <variable display_value="Test script">989d9e235324220002c6435723dc3484</variable>
    </sys_variable_value>
</record_update>
