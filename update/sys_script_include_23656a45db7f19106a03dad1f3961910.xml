<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_devtools.HtmlRenderDependencies</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Renders all dependencies of the given package.</description>
        <mobile_callable>false</mobile_callable>
        <name>HtmlRenderDependencies</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[function HtmlRenderDependencies(vPackage, strMode, aHidePackages)
{
	strMode = GetStringValue(strMode);
	aHidePackages = GetArrayValue(aHidePackages);
	
	if (strMode == '')
	{
		strMode = 'tree';
	}

	var strHtml = '';
	var bError = false;
			
	function HtmlRenderPackage(oPackage,nLevel)
	{
		nLevel = GetIntegerValue(nLevel);
		var nLeft = nLevel * 30;

		var strHtml = '';
		
		// background-color: #EEEEEE;
		
		var strInnerHtml = '';
	
		var strVersion = ' ' + GetStringValue(oPackage.version);
		
		var strAppName = GetValue(oPackage,'name');
		if (nLevel == 0)
		{
			strAppName += ' ' + strVersion;
		}
		
		var strAppUrl = GetInstanceRecordUrl('sys_package',oPackage.sys_id,'devtools');
		var strAppLink = HtmlRenderLink(strAppUrl,'<b>'+strAppName+'</b>',true);
		var strPackageClass = GetStringValue(GetValue(oPackage,'sys_class_name'));
		if (strPackageClass == '')
		{
			strPackageClass = GetStringValue(GetValue(oPackage,'package_class'));
		}
		var strPackageInfo = '';
		if (strPackageClass == '')
		{
			strPackageInfo = ' (unknown type)';
		}
		else if (strPackageClass != 'sys_app')
		{
			strPackageInfo = ' ('+strPackageClass+')';
		}
		else
		{
			strPackageInfo = '';
		}
		var strDependencyStatus = GetStringValue(GetValue(oPackage,'dependency_status'));
		strInnerHtml += strAppLink + strPackageInfo;
		strInnerHtml += '<p>';
		if (nLevel > 0)
		{

			if (strDependencyStatus != 'ok')
			{
				bError = true;
			}
			if (strDependencyStatus != 'circular' && strDependencyStatus != 'conflicting_versions')
			{
				strInnerHtml += 'Compatible Version(s): ' + GetValue(oPackage,'compatible_versions');
				if (strDependencyStatus != 'missing')
				{
					strInnerHtml += ' / ';
					strInnerHtml += 'Installed version: ' + strVersion;
				}
				strInnerHtml += ' / ';
			}
			
			function HtmlRenderDependencyStatus(strDependencyStatus)
			{
				switch (strDependencyStatus)
				{
					case 'ok':
						return '<span style="color: green; font-weight: bold;">OK</span>';
					case 'missing':
						return '<span style="color: red; font-weight: bold;">Package not installed</span>';
					case 'incompatible_version':
						return '<span style="color: red; font-weight: bold;">Incompatible package version</span>';
					case 'circular':
						return '<span style="color: red; font-weight: bold;">CIRCULAR DEPENDENCY</span>';
					case 'conflicting_versions':
						return '<span style="color: red; font-weight: bold;">CONFLICTING VERSION REQUIREMENTS</span>';						
					default:
						return '<span style="color: red; font-weight: bold;">UNDEFINED</span>'
				}
			}
			
			strInnerHtml += 'Status: ' + HtmlRenderDependencyStatus(strDependencyStatus);
			strInnerHtml += '<br/>';
		}

		var aDependencies = GetArrayValue(GetValue(oPackage,'_dependencies'));

		if (strDependencyStatus != 'circular' && strDependencyStatus != 'missing')
		{
			if (strMode == 'tree')
			{
				strInnerHtml += 'Dependencies: '+ aDependencies.length +'<br/>';
			}
		}
		strInnerHtml += '</p>';
		
		strHtml += '<div style="margin-left: '+nLeft+'px;">';
		strHtml += HtmlRenderRoundedBox(strInnerHtml);
		strHtml += '</div>';
		
		for (var nDependency = 0; nDependency < aDependencies.length; nDependency++)
		{
			
			if (ArrayValueExists(aHidePackages,GetValue(aDependencies,nDependency,'sys_id')) == false)
			{
				strHtml += HtmlRenderPackage(aDependencies[nDependency], nLevel+1);
			}
		}
				
		return strHtml;
	}
	
	
	if (strMode == 'list')
	{
		var aPackageList = GetPackageDependencyList(vPackage);
		if (aPackageList == false)
		{
			return HtmlRenderError('Could not identify the given package or its dependencies!');
		}
		
		var nPackageCount = 0;
		for (var nPackage = 0; nPackage < aPackageList.length; nPackage++)
		{
			if (aPackageList[nPackage]['dependency_status'] != 'circular')
			{
				nPackageCount++;
			}
		}
		strHtml += '<p style="padding-left: 20px;">'+nPackageCount+' package(s) in total:</p>';
		for (var nPackage = 0; nPackage < aPackageList.length; nPackage++)
		{
			strHtml += HtmlRenderPackage(aPackageList[nPackage],(nPackage < aPackageList.length-1) ? (1) : (0));
		}

		if (AppGetProperty('logging.verbosity') == 'debug')
		{
			strHtml += HtmlRenderValue(aPackageList);
		}		
	}
	else 
	{
		var oPackage = GetPackageDependencyTree(vPackage);
		if (IsObject(oPackage) == false)
		{
			return HtmlRenderError('Could not identify the given package or its dependencies!');
		}	

		strHtml += HtmlRenderPackage(oPackage,0);

		if (AppGetProperty('logging.verbosity') == 'debug')
		{
			strHtml += HtmlRenderValue(oPackage);
		}			
	}
	
	if (bError == true)
	{
		strHtml =
			HtmlRenderError('At least one circular dependency, missing package or incompatible package version has been detected, see below for details!')
			+ '<div style="height: 10px;"></div>' 
			+ strHtml;
	}	
	
	//strHtml += HtmlRenderValue(oPackage);
	
	return strHtml;
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-14 16:26:22</sys_created_on>
        <sys_id>23656a45db7f19106a03dad1f3961910</sys_id>
        <sys_mod_count>98</sys_mod_count>
        <sys_name>HtmlRenderDependencies</sys_name>
        <sys_package display_value="DevTools" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevTools">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_script_include_23656a45db7f19106a03dad1f3961910</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-11-12 12:15:23</sys_updated_on>
    </sys_script_include>
</record_update>
