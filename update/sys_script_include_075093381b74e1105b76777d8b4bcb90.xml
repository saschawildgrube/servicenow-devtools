<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_devtools.InstallApp</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Runs the AppInstall function of the given app and of all its dependencies.</description>
        <mobile_callable>false</mobile_callable>
        <name>InstallApp</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[function InstallApp(vApp, bStopOnError)
{
	var timeStart = GetTimeNow();
	var aPackages = GetPackageDependencyList(vApp);
	if (aPackages == false)
	{
		LogError('InstallApp: Package not found based on: '+RenderValue(vApp));
		return false;
	}
	var strAppName = GetAppName(vApp); 
	Log(StringFormat('InstallApp: Installing application "{0}" and all of its dependencies...',strAppName));
	bStopOnError = GetBoolValue(bStopOnError);
	for (var nPackage = 0; nPackage < aPackages.length; nPackage++)
	{
		if (aPackages[nPackage]['dependency_status'] == 'circular')
		{
			LogError('InstallApp: Circular dependency: '+RenderValue(vApp));
			return false;
		}
	}
	
	var progresstracker = new ProgressTrackerAPI();
	progresstracker.Start();
	
	var strLog = '';
	
	var bResult = true;
	for (var nPackage = 0; nPackage < aPackages.length; nPackage++)
	{
		var strSysId = GetValue(aPackages,nPackage,'sys_id');
		var strName = GetValue(aPackages,nPackage,'name');
		var grPackage = GetRecord('sys_package',strSysId);
		if (IsValidRecord(grPackage) == false)
		{
			strLog += StringFormat('InstallApp: {0}: The package is NOT INSTALLED!\n',strName);
			bResult = false;
		}
	}

	if (bResult == true)
	{
		for (var nPackage = 0; nPackage < aPackages.length; nPackage++)
		{
			var oPackage = aPackages[nPackage];
			var strScope = GetValue(oPackage,'scope');
			var strName = GetValue(oPackage,'name');
			var strClass = GetValue(oPackage,'sys_class_name');

			progresstracker.SetPercentageProgress(nPackage * 100 / aPackages.length);
			progresstracker.SetText(StringFormat('InstallApp: Installing app "{0}"',strName));
			
			var strScopeSysId = GetValue(oPackage,'sys_id');
			if (strScope != 'global')
			{
				if (strClass == 'sys_app')
				{
					var grSI = new GlideRecord('sys_script_include');
					grSI.addQuery('api_name','=',strScope+'.AppInstall');
					grSI.addQuery('sys_scope','=',strScopeSysId);
					grSI.addActiveQuery();
					grSI.query();
					if (grSI.next() != false)
					{
						var bNewResult = RunScriptInScope(strScopeSysId,'result = AppInstall();');
						if (bNewResult != true)
						{
							if (bStopOnError == true)
							{
								strLog += StringFormat('InstallApp: {0}: {1}.AppInstall() returned false. Aborting installation.\n',strName,strScope);
								LogError(StringFormat('InstallApp: {0}.AppInstall() returned false. Aborting installation!',strScope));
								return false;
							}
							else
							{
								strLog += StringFormat('InstallApp: {0}: {1}.AppInstall() returned false. Continuing installation.\n',strName,strScope);
								LogWarning(StringFormat('InstallApp: {0}.AppInstall() returned false. Continuing...',strScope));
							}
							bResult = false;
						}
						else
						{
							strLog += StringFormat('InstallApp: {0}: {1}.AppInstall() returned true.\n',strName,strScope);
						}
					}
					else
					{
						strLog += StringFormat('InstallApp: {0}: Does not contain the AppInstall Script Include.\n',strName);
					}
					
				}
				else
				{
					strLog += StringFormat('InstallApp: {0}: The package is not a custom application. Running installation scripts is not supported.\n',strName);
				}
			}
			else
			{
				strLog += StringFormat('InstallApp: {0}: Application is global. Running installation scripts is not supported.\n',strName);
			}
			
		}
	}

	var timeEnd = GetTimeNow();

	var strLogStartEnd = 'InstallApp: Start Time: ' + RenderDateTime(timeStart) + '\n';
	strLogStartEnd +=    'InstallApp: End Time  : ' + RenderDateTime(timeEnd) + '\n'; 

	var strSummaryText = '';
	if (bResult == true)
	{
		strSummaryText = StringFormat('Installed application "{0}" and all of its dependencies successfully!',strAppName);
		Log('InstallApp: '+ strSummaryText + '\n' + strLogStartEnd + strLog);
	}
	else
	{
		strSummaryText = StringFormat('Installed application "{0}" and all of its dependencies failed!',strAppName);
		LogError('InstallApp: '+ strSummaryText+ '\n' + strLogStartEnd + strLog);
	}
	
	progresstracker.SetResult(null,bResult,strSummaryText);
	
	return bResult;
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-02-01 17:59:14</sys_created_on>
        <sys_id>075093381b74e1105b76777d8b4bcb90</sys_id>
        <sys_mod_count>37</sys_mod_count>
        <sys_name>InstallApp</sys_name>
        <sys_package display_value="DevTools" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevTools">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_script_include_075093381b74e1105b76777d8b4bcb90</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-10-08 12:33:59</sys_updated_on>
    </sys_script_include>
</record_update>
