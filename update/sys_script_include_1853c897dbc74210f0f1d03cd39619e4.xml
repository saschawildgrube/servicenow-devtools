<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_devtools.ExecuteBusinessRuleShowCredentialPollution</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Checks if the current application contains records containing credentials and displays a warning. </description>
        <mobile_callable>false</mobile_callable>
        <name>ExecuteBusinessRuleShowCredentialPollution</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[function ExecuteBusinessRuleShowCredentialPollution(grCurrent)
{
	if (gs.isInteractive() == false)
	{
		return;
	}

	var transactionCache = new TransactionCacheAPI('DEVTOOLS');
	var strRunningAlready = transactionCache.GetItem('show_credential_pollution_running');
	if (strRunningAlready == 'true')
	{
		return;
	}
	transactionCache.SetItem('show_credential_pollution_running','true');		

	if (IsActive() == false)
	{
		return;
	}	

	var bActive = GetBoolValue(AppGetProperty('ui.show_credential_pollution.active'));
	if (bActive == false)
	{
		return;
	}	
	
	var strAppSysId = GetRecordScopeSysId(grCurrent);
	if (strAppSysId == false)
	{
		return;
	}

	var grApp = GetAppRecord(strAppSysId);
	if (IsValidRecord(grApp) == false)
	{
		return;
	}

	if (grApp.getRecordClassName() != 'sys_app')
	{
		return;
	}

	var aPollutedRecords = GetAppRecordsWithCredentialPollution(grApp);
	
	if (aPollutedRecords.length > 0)
	{
		var strMessage = StringFormat(
			'Found {0} record(s) in application {1} that contain credentials:',
			aPollutedRecords.length,
			GetAppName(strAppSysId));

		for (var nRecord = 0; nRecord < aPollutedRecords.length; nRecord++)
		{
			var record = aPollutedRecords[nRecord];
			var strRecordUrl = GetInstanceRecordUrl(record.sys_class_name,record.sys_id);
			strMessage += '<br/>';
			strMessage += HtmlRenderLink(
				strRecordUrl,
				record.name + ' ('+record.sys_class_name+')',
				true);
		}

		var strBranch = GetAppCurrentBranch(strAppSysId);
		if (strBranch != '')
		{
			strMessage += HtmlEncode(
				'\n\nDO NOT COMMIT TO SOURCE CONTROL!'
				+'\nCREDENTIALS MIGHT GET COMPROMISED!');
		}
		gs.addErrorMessage(strMessage);
	}

}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-07-02 10:10:47</sys_created_on>
        <sys_id>1853c897dbc74210f0f1d03cd39619e4</sys_id>
        <sys_mod_count>32</sys_mod_count>
        <sys_name>ExecuteBusinessRuleShowCredentialPollution</sys_name>
        <sys_package display_value="DevTools" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevTools">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_script_include_1853c897dbc74210f0f1d03cd39619e4</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-08-28 12:58:40</sys_updated_on>
    </sys_script_include>
</record_update>
