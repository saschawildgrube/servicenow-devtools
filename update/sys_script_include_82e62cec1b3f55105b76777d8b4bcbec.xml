<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_devtools.GetPackageDependencyTree</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Retireves all dependencies of the given package as an object tree.</description>
        <mobile_callable>false</mobile_callable>
        <name>GetPackageDependencyTree</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[function GetPackageDependencyTree(vPackage,aCurrentPath)
{
	function GetDependencyStatusSummary(aStatusValues)
	{
		aStatusValues = GetArrayValue(aStatusValues);
		var strStatusSummary = 'ok';
		if (ArrayValueExists(aStatusValues,'incompatible_version'))
		{
			strStatusSummary = 'incompatible_version';
		}
		if (ArrayValueExists(aStatusValues,'missing'))
		{
			strStatusSummary = 'missing';
		}
		if (ArrayValueExists(aStatusValues,'circular'))
		{
			strStatusSummary = 'circular';
		}		
		return strStatusSummary;
	}
	
	
	var grPackage = GetPackageRecord(vPackage);
	if (IsValidRecord(grPackage) == false)
	{
		return false;
	}
	
	aCurrentPath = GetArrayValue(aCurrentPath);
	if (aCurrentPath.length == 0)
	{
		aCurrentPath.push(GetStringValue(grPackage.sys_id));
	}
	
	var result = Clone(grPackage);
	
	result['name'] = GetCleanAppName(result['name']);
	result['dependency_status_summary'] = 'ok';
	
	var aDependencies = [];
	
	var grDependencies = new GlideRecord('x_snc_devtools_dependency');
	grDependencies.addQuery('sys_scope','=',grPackage.sys_id);
	grDependencies.orderBy('name');
	grDependencies.query();
	while (grDependencies.next())
	{
		var strCompatibleVersions = GetStringValue(grDependencies.versions);
		
		if (ArrayValueExists(aCurrentPath,GetStringValue(grDependencies.dependency)) == true)
		{
			dependency = {
				sys_id: GetStringValue(grDependencies.dependency),
				name: GetStringValue(grDependencies.name),
				dependency_status: 'circular'
			};
		}
		else
		{
			var aNewCurrentPath = Clone(aCurrentPath);
			aNewCurrentPath.push(GetStringValue(grDependencies.dependency));
			
			if (GetStringValue(grDependencies.dependency) == '')
			{
				dependency = {
					name: GetStringValue(grDependencies.name),
					dependency_status: 'undefined'
				};
			}
			else
			{
				var dependency = GetPackageDependencyTree(grDependencies.dependency,aNewCurrentPath);
				if (dependency == false)
				{
					dependency = {
						sys_id: GetStringValue(grDependencies.dependency),
						name: GetStringValue(grDependencies.name),
						dependency_status: 'missing'
					};
				}
				else
				{
					var strDependencyVersion = GetValue(dependency,'version');
					var aCompatibleVersions = GetArrayValue(strCompatibleVersions);
					var bCompatibleVersion = false;
					for (var nVersion = 0; nVersion < aCompatibleVersions.length; nVersion++)
					{
						var strRequiredVersion = aCompatibleVersions[nVersion];
						if (IsVersionCompatible(strDependencyVersion,strRequiredVersion) == true)
						{
							bCompatibleVersion = true;
						}
					}
					if (bCompatibleVersion == true)
					{
						dependency['dependency_status'] = 'ok';
					}
					else
					{
						dependency['dependency_status'] = 'incompatible_version';
					}

				}
			}
		}
		dependency['compatible_versions'] = strCompatibleVersions;
		dependency['package_class'] = GetStringValue(grDependencies.package_class);
		
		result['dependency_status_summary'] = GetDependencyStatusSummary(
			[result['dependency_status_summary'],
			dependency['dependency_status'],
			dependency['dependency_status_summary']]);
		
		aDependencies.push(dependency);
	}
	
	SetValue(aDependencies,result,'_dependencies');
	
	return result;
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-12 18:12:56</sys_created_on>
        <sys_id>82e62cec1b3f55105b76777d8b4bcbec</sys_id>
        <sys_mod_count>25</sys_mod_count>
        <sys_name>GetPackageDependencyTree</sys_name>
        <sys_package display_value="DevTools" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevTools">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_script_include_82e62cec1b3f55105b76777d8b4bcbec</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-03-24 18:22:44</sys_updated_on>
    </sys_script_include>
</record_update>
