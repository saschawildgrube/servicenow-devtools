<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_devtools.AppVersionBaseline</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Creates a new version baseline for the given application. Handle with care! This function is still experimental. </description>
        <mobile_callable>false</mobile_callable>
        <name>AppVersionBaseline</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[function AppVersionBaseline(vApp)
{
	var progresstracker = new ProgressTrackerAPI();
	progresstracker.Start();
	progresstracker.SetPercentageProgress(1);

	function Error(strMessage)
	{
		LogError('AppVersionBaseline: '+strMessage);
		progresstracker.SetResult(null,false,strMessage);
	}

	var grApp = GetAppRecord(vApp);
	if (IsValidRecord(grApp) == false)
	{
		Error('Application could not be loaded!');
		return false;
	}

	var strScope = GetStringValue(grApp.scope);
	var strAppName = GetAppName(grApp);
	var strCurrentBranch = GetAppCurrentBranch(grApp);
	var strNewBranch = GetStringValue(grApp.version);
	var strVersion = GetStringValue(grApp.version);
	
	var grSharedApp = GetSharedApplicationRecord(grApp);


	if (IsValidRecord(grSharedApp) == false)
	{
		// Default: Baselining an application version
		var strRepoUrl = GetStringValue(grApp.x_snc_devtools_repo_url);	

		progresstracker.SetText('Sanitizing...');
		AppSanity(grApp.sys_id);

		progresstracker.SetPercentageProgress(5);
		
		progresstracker.SetText('Setting defaults...');	
		if (strScope != 'global')
		{
			RunScriptInScope(grApp.sys_id,'if (x_snc_devtools.IsValidFunction('+strScope+'.AppSetDefaults)) { '+strScope+'.AppSetDefaults(); }');
		}

		progresstracker.SetPercentageProgress(10);

		progresstracker.SetText('Calling AppBaseline() function...');
		if (strScope != 'global')
		{
			RunScriptInScope(grApp.sys_id,'if (x_snc_devtools.IsValidFunction('+strScope+'.AppBaseline)) { '+strScope+'.AppBaseline(); }');
		}	

		progresstracker.SetPercentageProgress(15);

		progresstracker.SetText('Removing application name post fix...');	
		grApp.name = strAppName;
		GlideRecordUpdate(grApp,true);
		RecordSaveToUpdateSet(grApp);
		
		progresstracker.SetPercentageProgress(20);

		progresstracker.SetText('Updating dependency records...');		
		var grDependencies = new GlideRecord('x_snc_devtools_dependency');
		grDependencies.addQuery('sys_scope','=',grApp.sys_id);
		grDependencies.query();
		while (grDependencies.next())
		{
			var grDependencyApp = GetAppRecord(grDependencies.dependency);
			if (IsValidRecord(grDependencyApp) == true)
			{
				var strDepRepoUrl = GetStringValue(grDependencyApp.x_snc_devtools_repo_url);
				if (IsValidUrl(strDepRepoUrl))
				{
					grDependencies.repo_url = strDepRepoUrl;
				}
				var strDocumentationUrl = GetStringValue(grDependencyApp.x_snc_devtools_documentation_url);
				if (IsValidUrl(strDocumentationUrl))
				{
					grDependencies.documentation_url = strDocumentationUrl;
				}
				grDependencies.update();
			}
		}
			
		//progresstracker.SetText('Updating release notes in manual...');

		progresstracker.SetPercentageProgress(25);
						
		
		progresstracker.SetText('Committing changes...');
		var bResult = SourceControlCommitToCurrentBranch(grApp,grApp.version+' baseline',false);
		if (bResult == false)
		{
			Error('Failed to commit changes to current branch!');
			return false;
		}

		progresstracker.SetPercentageProgress(50);

		progresstracker.SetText('Creating branch "'+strNewBranch+'"...');
		bResult = SourceControlCreateBranch(grApp,strNewBranch,false);
		if (bResult == false)
		{
			Error('Failed to create branch "'+strNewBranch+'"!');
			return false;
		}

		progresstracker.SetPercentageProgress(55);

		progresstracker.SetText('Switching back to branch "'+strCurrentBranch+'"...');
		bResult = SourceControlSwitchToBranch(grApp,strCurrentBranch,false);
		if (bResult == false)
		{
			Error('Failed switching to branch "'+strCurrentBranch+'"!');
			return false;
		}

		progresstracker.SetPercentageProgress(70);

		progresstracker.SetText('Preparing new version...');
		var strCurrentVersion = GetVersionFromString(GetStringValue(grApp.version));
		var aVersion = strCurrentVersion.split('.');
		var nMajor = GetIntegerValue(GetValue(aVersion,0));
		var nNewMinor = GetIntegerValue(GetValue(aVersion,1)) + 1;
		var strNewVersion = nMajor 	+ '.' + nNewMinor + '.0';
		grApp.version = strNewVersion;
		grApp.name = strAppName + ' WORK IN PROGRESS'
		GlideRecordUpdate(grApp,true);
		RecordSaveToUpdateSet(grApp);

		var grPage = GetAppManualRecord(grApp);
		if (IsValidRecord(grPage) == true)
		{
			var strHtml = GetStringValue(grPage.html);
			var strHtmlNew = StringReplace(
				strHtml,
				'<h2>Release Notes</h2>',
				'<h2>Release Notes</h2>\n\n\t<h3>'+strNewVersion+' - TODO</h3>\n\t<ol>\n\t\t<li>TODO: Document changes here...</li>\n\t</ol>\n');
			grPage.html = strHtmlNew;
			GlideRecordUpdate(grPage,true);
			RecordSaveToUpdateSet(grPage);
		}


		progresstracker.SetPercentageProgress(75);

		progresstracker.SetText('Committing changes...');
		var bResult = SourceControlCommitToCurrentBranch(grApp,strNewVersion + ' work in progress (assuming the next version is backward compatible and adds at least one new feature)',false);
		if (bResult == false)
		{
			Error('Failed to commit changes to current branch!');
			return false;
		}	

		progresstracker.SetPercentageProgress(90);
		progresstracker.SetText('Post baseline activities...');
		var gsep = new GlideScriptedExtensionPoint();
		var eps = gsep.getExtensions('DevTools');
		for (var nEP = 0; nEP < eps.length; nEP++)
		{
			var ep = eps[nEP];
			if (IsValidFunction(ep.AppVersionBaselineOnFinish))
			{
				var params = {
					mode: 'default',
					app: grApp,
					repo_url: strRepoUrl,
					branch: strNewBranch,
					version: strVersion
				};
				ep.AppVersionBaselineOnFinish(params);
			}
		}		

		
		progresstracker.SetResult(null,true,'Version Baseline complete.');

	}
	else
	{
		// Baselining a "shared" application version

		progresstracker.SetText('Sanitizing...');
		AppSanity(grApp.sys_id);

		progresstracker.SetPercentageProgress(5);
		
		progresstracker.SetText('Setting defaults...');	
		if (strScope != 'global')
		{
			RunScriptInScope(grApp.sys_id,'if (x_snc_devtools.IsValidFunction('+strScope+'.AppSetDefaults)) { '+strScope+'.AppSetDefaults(); }');
		}

		progresstracker.SetPercentageProgress(10);

		progresstracker.SetText('Calling AppBaseline() function...');
		if (strScope != 'global')
		{
			RunScriptInScope(grApp.sys_id,'if (x_snc_devtools.IsValidFunction('+strScope+'.AppBaseline)) { '+strScope+'.AppBaseline(); }');
		}	

		progresstracker.SetPercentageProgress(15);

		progresstracker.SetText('Overriding application information...');	
		grApp.name = strAppName;
		grApp.x_snc_devtools_maintainer = grSharedApp.maintainer;
		grApp.x_snc_devtools_maintainer_email = grSharedApp.maintainer_email;
		grApp.x_snc_devtools_documentation_url = grSharedApp.documentation_url;
		grApp.x_snc_devtools_repo_url = grSharedApp.repo_url;
		GlideRecordUpdate(grApp,true);
		RecordSaveToUpdateSet(grApp);
		
		var strRepoUrl = GetStringValue(grApp.x_snc_devtools_repo_url);

		progresstracker.SetPercentageProgress(20);

		progresstracker.SetText('Updating dependency records...');		
		var grDependencies = new GlideRecord('x_snc_devtools_dependency');
		grDependencies.addQuery('sys_scope','=',grApp.sys_id);
		grDependencies.query();
		while (grDependencies.next())
		{
			var grDependencyApp = GetAppRecord(grDependencies.dependency);
			if (IsValidRecord(grDependencyApp) == true)
			{
				var strDepRepoUrl = GetStringValue(grDependencyApp.x_snc_devtools_repo_url);
				if (IsValidUrl(strDepRepoUrl))
				{
					grDependencies.repo_url = strDepRepoUrl;
				}
				var strDocumentationUrl = GetStringValue(grDependencyApp.x_snc_devtools_documentation_url);
				if (IsValidUrl(strDocumentationUrl))
				{
					grDependencies.documentation_url = strDocumentationUrl;
				}
				grDependencies.update();
			}
		}
			
		progresstracker.SetPercentageProgress(40);
						
		
		progresstracker.SetText('Committing changes...');
		var bResult = SourceControlCommitToCurrentBranch(grApp,grApp.version+' baseline',false);
		if (bResult == false)
		{
			Error('Failed to commit changes to current branch!');
			return false;
		}

		progresstracker.SetPercentageProgress(60);

		progresstracker.SetText('Creating branch "'+strNewBranch+'"...');
		bResult = SourceControlCreateBranch(grApp,strNewBranch,false);
		if (bResult == false)
		{
			Error('Failed to create branch "'+strNewBranch+'"!');
			return false;
		}

		progresstracker.SetPercentageProgress(80);

		progresstracker.SetText('Switching back to branch "'+strCurrentBranch+'"...');
		bResult = SourceControlSwitchToBranch(grApp,strCurrentBranch,false);
		if (bResult == false)
		{
			Error('Failed switching to branch "'+strCurrentBranch+'"!');
			return false;
		}


		progresstracker.SetPercentageProgress(90);

		progresstracker.SetText('Post baseline activities...');
		var gsep = new GlideScriptedExtensionPoint();
		var eps = gsep.getExtensions('DevTools');
		for (var nEP = 0; nEP < eps.length; nEP++)
		{
			var ep = eps[nEP];
			if (IsValidFunction(ep.AppVersionBaselineOnFinish))
			{
				var params = {
					mode: 'shared',
					app: grApp,
					repo_url: strRepoUrl,
					branch: strNewBranch,
					version: strVersion
				};
				ep.AppVersionBaselineOnFinish(params);
			}
		}		
		
		progresstracker.SetPercentageProgress(100);


		progresstracker.SetResult(null,true,'Version Baseline complete.');

	}

	
	return true;
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-06-12 15:30:55</sys_created_on>
        <sys_id>7ac969a9dbc095109232dad1f39619c7</sys_id>
        <sys_mod_count>64</sys_mod_count>
        <sys_name>AppVersionBaseline</sys_name>
        <sys_package display_value="DevTools" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevTools">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_script_include_7ac969a9dbc095109232dad1f39619c7</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-10-23 12:02:18</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>7ac969a9dbc095109232dad1f39619c7</id>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-12-06 13:46:10</sys_created_on>
        <sys_id>393651f1939e5250959b7fda2bba10a5</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-12-06 13:46:10</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>false</use_es_latest>
    </sys_es_latest_script>
</record_update>
