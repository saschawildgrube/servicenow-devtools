<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_devtools.RecordBulkProcessor</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>A function to process large amounts of records using a callback function. The function makes use of a specified date/time field to determine which record to process next. Multiple instances of a background script can run using this function to work on large amounts of records in a table without interfering with each other.&#13;
For large tables it is imperative to add an index on the date time field!&#13;
If the ghost parameter is set to true, records are updated with setWorkflow(false) to avoid business rules etc. being triggered.</description>
        <mobile_callable>false</mobile_callable>
        <name>RecordBulkProcessor</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[function RecordBulkProcessor(grRecords,callbackRecordProcessor,strFieldDateTime,nMaxRecords,nMaxSeconds,callbackLog,nLogFrequency,bGhost)
{
	var GetStringValue = x_snc_devtools.GetStringValue;
	var RenderValue = x_snc_devtools.RenderValue;
	var GetIntegerValue = x_snc_devtools.GetIntegerValue;
	var GetBoolValue = x_snc_devtools.GetBoolValue;
	var IsValidRecord = x_snc_devtools.IsValidRecord;
	var GetType = x_snc_devtools.GetType;

	if (IsValidRecord(grRecords) != true)
	{
		return false;
	}
	
	var strClassName = grRecords.getRecordClassName();
	
	if (GetType(callbackRecordProcessor) != 'function')
	{
		return false;
	}
	
	strFieldDateTime = GetStringValue(strFieldDateTime);
	if (strFieldDateTime == '')
	{
		return false;
	}
	
	nMaxRecords = GetIntegerValue(nMaxRecords);
	if (nMaxRecords == 0)
	{
		nMaxRecords = 10000;
	}
	
	nMaxSeconds = GetIntegerValue(nMaxSeconds);
	if (nMaxSeconds == 0)
	{
		nMaxSeconds = 3600;
	}

	if (GetType(callbackLog) != 'function')
	{
		callbackLog = null;
	}
	
	nLogFrequency = GetIntegerValue(nLogFrequency);
	if (nLogFrequency == 0)
	{
		nLogFrequency = 1000;
	}
	
	bGhost = GetBoolValue(bGhost);
	
	function Log(strText)
	{
		if (callbackLog == null)
		{
			x_snc_devtools.Log(strText);
		}
		else
		{
			callbackLog(strText);
		}
	}

	var nTotalRecordsChanged = 0;
	var nTotalRecordsProcessed = 0;
	var nBatchCount = 0;

	var nTimeStampStart = GetTimeNow();

	var strLastSysId = '';
	var bContinue = true;
	while (bContinue == true)
	{
		grRecords.orderBy(strFieldDateTime);
		grRecords.setLimit(1);		
		grRecords.query();
		if (grRecords.next())
		{
			var strNextSysId = GetStringValue(grRecords.sys_id);
			if (strNextSysId == strLastSysId)
			{
				Log('Found the same record again. Aborting.');
				bContinue = false;
			}
			else
			{
				strLastSysId = strNextSysId;
				var strDateTimeLastMaintenance = grRecords.getValue(strFieldDateTime);
				var nTimeStampLastMaintenance = ParseDateTime(strDateTimeLastMaintenance);
				if (nTimeStampLastMaintenance > nTimeStampStart)
				{
					bContinue = false;
				}
				else
				{
					// The first update ensures that multiple jobs running in parallel do not pick the same record
					grRecords.setValue(strFieldDateTime,RenderDateTime(GetTimeNow()));
					if (GlideRecordUpdate(grRecords,bGhost) == false)
					{
						Log('Failed to update record '+grRecords.sys_id+' in '+strClassName+'. Aborting!');
						bContinue = false;
					}
					else
					{
						var bChanged = callbackRecordProcessor(grRecords);
						// The second update writes the actual result to the record with the now current time stamp
						grRecords.setValue(strFieldDateTime,RenderDateTime(GetTimeNow()));
						if (GlideRecordUpdate(grRecords,bGhost) == false)
						{
							Log('Failed to update record '+grRecords.sys_id+' in '+strClassName+'. Aborting!');
							bContinue = false;
						}
						else
						{
							nTotalRecordsProcessed++;
							if (bChanged == true)
							{
								nTotalRecordsChanged++;
							}
							if (nTotalRecordsProcessed > 0 && nLogFrequency > 0)
							{
								if (nTotalRecordsProcessed % nLogFrequency == 0)
								{
									var strLog = 'Processing record '+nTotalRecordsProcessed+' in '+strClassName+' and made '+nTotalRecordsChanged+' changes so far.';
									Log(strLog);
								}
							}
						}
					}
				}
			}
		}
		else
		{
			var strLog = 'No records found in '+strClassName+'.';
			Log(strLog);
			bContinue = false;
		}
				
		if (nTotalRecordsProcessed >= nMaxRecords)
		{
			bContinue = false;
		}
		if ((GetTimeNow() / 1000) >= ((nTimeStampStart / 1000) + nMaxSeconds))
		{
			bContinue = false;
		}
	}
	
	var strLog = 'Changed '+nTotalRecordsChanged+' out of '+nTotalRecordsProcessed+' processed records in '+strClassName+'.';
	Log(strLog);	
	return nTotalRecordsChanged;
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-03-18 15:15:16</sys_created_on>
        <sys_id>c3208bdcdb0fac10ba15a353059619e1</sys_id>
        <sys_mod_count>46</sys_mod_count>
        <sys_name>RecordBulkProcessor</sys_name>
        <sys_package display_value="DevTools" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevTools">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_script_include_c3208bdcdb0fac10ba15a353059619e1</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-08-28 12:58:56</sys_updated_on>
    </sys_script_include>
</record_update>
