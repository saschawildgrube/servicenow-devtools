<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_devtools.GetDependencyListFromTree</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Transforms a dependency tree into a dependency list.</description>
        <mobile_callable>false</mobile_callable>
        <name>GetDependencyListFromTree</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[function GetDependencyListFromTree(dependencytree)
{
	if (IsObject(dependencytree) == false)
	{
		return false;
	}
	
	var strStatusSummary = 'ok';	
	
	var aPackages = [];
		
	function ResolveDependencyTree(currentpackage)
	{
		var currentpackage = Clone(currentpackage);
		if (GetStringValue(currentpackage['dependency_status_summary']) == '')
		{
			currentpackage['dependency_status_summary'] = currentpackage['dependency_status'];
			if (GetStringValue(currentpackage['dependency_status_summary']) == '')
			{
				currentpackage['dependency_status_summary'] = 'ok';
			}			
		}
		
		var aDependencies = GetArrayValue(GetValue(currentpackage,'_dependencies'));
		for (var nDependency = 0; nDependency < aDependencies.length; nDependency++)
		{
			//if (GetStringValue(aDependencies[nDependency]['sys_id']) != '')
			//{
				ResolveDependencyTree(aDependencies[nDependency]);
			//}
		}
		delete currentpackage['_dependencies'];
		var bExists = false;
		for (var nPackage = 0; nPackage < aPackages.length; nPackage++)
		{
			if (aPackages[nPackage]['dependency_status'] != 'circular')
			{
				if (	(aPackages[nPackage]['sys_id'] == currentpackage['sys_id'])
					&&	(GetStringValue(aPackages[nPackage]['sys_id']) != '')
					&&	(GetStringValue(currentpackage['sys_id']) != ''))
				{
					bExists = true;
					
					var strMinimalCommonVersion = GetMinimalCommonVersion(
						aPackages[nPackage]['compatible_versions'],
						currentpackage['compatible_versions']);
					
					if (strMinimalCommonVersion == false) // Conflicting compatible versions
					{
						if (aPackages[nPackage]['dependency_status_summary'] == 'missing')
						{
							// Conflicting compatible versions and missing packages
							aPackages[nPackage] = Clone(currentpackage);
							strStatusSummary = 'missing';
						}
						else
						{
							// Conflicting compatible versions with an existing package (not missing)
							aPackages[nPackage]['compatible_versions'] = '';
							strStatusSummary = 'conflicting_versions';
							aPackages[nPackage]['dependency_status'] = strStatusSummary;
							aPackages[nPackage]['dependency_status_summary'] = strStatusSummary;
						}
					}
					else
					{
						// Compatible versions are compatible 
						if (CompareVersion(strMinimalCommonVersion,aPackages[nPackage]['version']) > 0)
						{
							// Minimum common version is higher than in the existing package: the package is replaced if it is not missing
							if (aPackages[nPackage]['dependency_status'] != 'missing')
							{
								aPackages[nPackage] = Clone(currentpackage);
								if (CompareDependencyStatus(
									strStatusSummary,currentpackage['dependency_status_summary']) < 0) 
								{
									strStatusSummary = currentpackage['dependency_status_summary'];
								}
							}
						}
						else
						{
							// The minimum compatible version is lower than in the existing package - so the compatible version is updated
							aPackages[nPackage]['compatible_versions'] = strMinimalCommonVersion;
						}
					}
					
				}
			}
		}
		var strRepoUrl = GetStringValue(GetValue(currentpackage,'repo_url'));
		if (strRepoUrl == '')
		{
			currentpackage.repo_url = GetStringValue(GetValue(currentpackage,'x_snc_devtools_repo_url'));
		}
		if (bExists == false)
		{
			aPackages.push(currentpackage);
			if (CompareDependencyStatus(strStatusSummary,currentpackage['dependency_status_summary']) < 0) 
			{
				strStatusSummary = currentpackage['dependency_status_summary'];
			}
		}
	}
	
	ResolveDependencyTree(dependencytree);
	
	if (aPackages.length > 0)
	{
		if (GetStringValue(aPackages[aPackages.length-1]['dependency_status_summary']) == '')
		{
			aPackages[aPackages.length-1]['dependency_status_summary'] = strStatusSummary;
		}
		else
		{
			if (CompareDependencyStatus(
				strStatusSummary,
				aPackages[aPackages.length-1]['dependency_status_summary'])
				> 0)
			{
				aPackages[aPackages.length-1]['dependency_status_summary'] = strStatusSummary;
			}
		}
	}	
	
	return aPackages;	
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-06-09 16:37:44</sys_created_on>
        <sys_id>9929460e1b1b2510cd6153d16b4bcb5c</sys_id>
        <sys_mod_count>76</sys_mod_count>
        <sys_name>GetDependencyListFromTree</sys_name>
        <sys_package display_value="DevTools" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevTools">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_script_include_9929460e1b1b2510cd6153d16b4bcb5c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-03-24 18:55:44</sys_updated_on>
    </sys_script_include>
</record_update>
