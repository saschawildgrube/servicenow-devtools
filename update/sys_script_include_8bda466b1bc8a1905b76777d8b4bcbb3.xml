<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_devtools.RenderDebugDump</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Provides detailed debug information. </description>
        <mobile_callable>false</mobile_callable>
        <name>RenderDebugDump</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[function RenderDebugDump()
{
	var strDebug = '__DEBUG_DUMP__\n\n';

	var gsep = new GlideScriptedExtensionPoint();
	var eps = gsep.getExtensions('DevTools');
	for (var nEP = 0; nEP < eps.length; nEP++)
	{
		var ep = eps[nEP];
		if (IsValidFunction(ep.RenderDebugDump))
		{
			var strDebugEx = GetStringValue(ep.RenderDebugDump());
			if (strDebugEx !=  '')
			{
				strDebug += strDebugEx + '\n\n';
			}
		}
	}	
	
	
	
	
	strDebug += 'BusinessRuleGetOperation:';
	var strOperation = BusinessRuleGetOperation(current);
	{
		strDebug += '\n"'+strOperation+'"';
	}
	strDebug += '\n\n';
	
	
	
	
	strDebug += 'Current Object:';
	if (IsObject(current) == true)
	{
		strDebug += RenderValue(current);
	}
	else
	{
		strDebug += '\n"current" is not an object.';
	}
	strDebug += '\n\n';

	
	
	strDebug += 'Previous Object:';
	if (IsObject(previous) == true)
	{
		strDebug += RenderValue(previous);
	}
	else
	{
		strDebug += '\n"previous" is not an object.';
	}
	strDebug += '\n\n';
		
	
	
	strDebug += 'Session User:';
	var strSessionUserSysId = gs.getUserID();
	var grSessionUser = GetRecord('sys_user',strSessionUserSysId);
	
	if (IsValidRecord(grSessionUser) == false)
	{
		strDebug += '\nSession user could not be determined.\n\n';
	}
	else
	{
		var oUser = Clone(grSessionUser);

		var aRoles = [];
		var grUserHasRole = new GlideRecord('sys_user_has_role');
		grUserHasRole.addQuery('user','=',oUser.sys_id);
		grUserHasRole.query();
		while (grUserHasRole.next())
		{
			var grRole = new GlideRecord('sys_user_role');
			if (grRole.get(grUserHasRole.role))
			{
				aRoles.push(grRole.name);
			}
		}
		aRoles = aRoles.sort();
		oUser['_roles'] = aRoles;

		var aGroups = [];
		var grGroupMember = new GlideRecord('sys_user_grmember');
		grGroupMember.addQuery('user','=',oUser.sys_id);
		grGroupMember.query();
		while (grGroupMember.next())
		{
			var grGroup = new GlideRecord('sys_user_group');
			if (grGroup.get(grGroupMember.group))
			{
				aGroups.push(grGroup.name);
			}
		}
		aGroups = aGroups.sort();
		oUser['_groups'] = aGroups;			



		strDebug += RenderValue(oUser);
		
	}
	
	strDebug += '\n\n';
	
	strDebug += 'Call Stack:';
	var callstack = GetCallStack();
	strDebug += RenderValue(callstack);
	strDebug += '\n\n';	
	
	return strDebug;
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-01-03 19:15:35</sys_created_on>
        <sys_id>8bda466b1bc8a1905b76777d8b4bcbb3</sys_id>
        <sys_mod_count>22</sys_mod_count>
        <sys_name>RenderDebugDump</sys_name>
        <sys_package display_value="DevTools" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevTools">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_script_include_8bda466b1bc8a1905b76777d8b4bcbb3</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-08-28 12:58:51</sys_updated_on>
    </sys_script_include>
</record_update>
