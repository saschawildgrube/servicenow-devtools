<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_atf_step_config">
    <sys_atf_step_config action="INSERT_OR_UPDATE">
        <active>true</active>
        <batch_order_constraint/>
        <can_mutate_page>false</can_mutate_page>
        <category display_value="Server">317c4dc20b202200a8d7a12cf6673aa8</category>
        <class_name/>
        <class_type>script</class_type>
        <deprecated>false</deprecated>
        <description_generator><![CDATA[function generateDescription()
{
    var strDescription = 'Performs sanity checks on the app.\n';
	return strDescription;
}
generateDescription();
]]></description_generator>
        <html_description><![CDATA[<p>Performs a sanity check on a scoped app. E.g. it checks if all contained system properties are not set private and all tests have an empty copied_from field.</p>]]></html_description>
        <icon>icon-article-document</icon>
        <inputs/>
        <name>DevTools - Check scoped app sanity</name>
        <order>9000</order>
        <outputs/>
        <performance_include>false</performance_include>
        <step_env display_value="Server - Independent">6c2bcea1870312009dccc9ded0e3ecca</step_env>
        <step_execution_generator><![CDATA[(function executeStep(inputs, outputs, stepResult, timeout)
{
	var GetStringValue = x_snc_devtools.GetStringValue;
	var GetBoolValue = x_snc_devtools.GetBoolValue;
	var StringRemoveCharacters = x_snc_devtools.StringRemoveCharacters;
	var IsValidSysId = x_snc_devtools.IsValidSysId;
	var IsTechnicalUser = x_snc_devtools.IsTechnicalUser;
	var IsUserDefaultAdmin = x_snc_devtools.IsUserDefaultAdmin;
	var ArrayValueExists = x_snc_devtools.ArrayValueExists;
	var GetRecord = x_snc_devtools.GetRecord;
	var GetCallStack = x_snc_devtools.GetCallStack;
	var GetAppRecord = x_snc_devtools.GetAppRecord;
	var GetValue = x_snc_devtools.GetValue;
	
	var bResult = true;
	var strMessage = '';
	
	var aCallStack = GetCallStack();

	strMessage += x_snc_devtools.RenderValue(aCallStack);

	var strAppSysId = GetValue(aCallStack,0,'sys_scope');
	
	var grApp = GetAppRecord(strAppSysId);

	if (grApp == false)
	{
		var bResult = false;
		strMessage += 'App not found. Invalid sys_id: '+strAppSysId+'\n';
	}
	else
	{
		strAppName = grApp.getValue('name') + ' ' + grApp.getValue('version');
		strMessage += 'Performing sanity checks on the scoped app: "'+strAppName+'"\n';

		

	
		// Check sys_atf_test
		var grSysAtfTest = new GlideRecord('sys_atf_test');
		grSysAtfTest.addQuery('sys_scope','=',strAppSysId);
		grSysAtfTest.query();
		while (grSysAtfTest.next())
		{
			strMessage += 'Checking ATF test: "'+GetStringValue(grSysAtfTest.getValue('name'))+'"\n';
			if (GetBoolValue(grSysAtfTest.getValue('copied_from')) != '')
			{
				bResult = false;
				strMessage += '  Failed: copied_from should be EMPTY!\n';
			}
			
			// Check sys_atf_step
			var grSysAtfStep = new GlideRecord('sys_atf_step');
			grSysAtfStep.addQuery('sys_scope','=',strAppSysId);
			grSysAtfStep.addQuery('test','=',grSysAtfTest.sys_id);
			grSysAtfStep.orderBy('order');
			grSysAtfStep.query();
			while (grSysAtfStep.next())
			{
				var strName = grSysAtfStep.getValue('order')/*++GetStringValue(grSysAtfStep.getValue('description'))*/;
				//strMessage += 'Checking ATF test step: '+strName+'\n';
				if (IsValidSysId(grSysAtfStep.getValue('step_config')) != true)
				{
					bResult = false;
					strMessage += '  Failed: Test step '+strName+': Invalid or missing step config!\n';
				}
				if (GetBoolValue(grSysAtfStep.getValue('copied_from')) != '')
				{
					bResult = false;
					strMessage += '  Failed: Test step '+strName+': copied_from should be EMPTY!\n';
				}
			}					
		}
		
		
		
		// Check sys_atf_test_suite_test
		strMessage += 'Checking test suite tests...\n';
		var grSysAtfTestSuiteTest = new GlideRecord('sys_atf_test_suite_test');
		grSysAtfTestSuiteTest.addQuery('sys_scope','=',strAppSysId);
		grSysAtfTestSuiteTest.addQuery('test_suite.sys_scope','!=',strAppSysId);
		grSysAtfTestSuiteTest.query();
		if (grSysAtfTestSuiteTest.getRowCount() > 0)
		{
			strMessage += 'Failed: There is at least one record in sys_atf_test_suite_test where the scope of the record does not match the scope of the test suite (which should be not the case)!\n';
            strMessage += 'Check out the sys_atf_test_suite_test table and delete all records where the scope does not match the scope of the suite!\n';
			bResult = false;
		}	
		

		
		// Check sys_app_module
		var grSysAppModule = new GlideRecord('sys_app_module');
		grSysAppModule.addQuery('sys_scope','=',strAppSysId);
		grSysAppModule.query();
		while (grSysAppModule.next())
		{
			strMessage += 'Checking module: "'+GetStringValue(grSysAppModule.getValue('title'))+'"\n';
			if (GetStringValue(grSysAppModule.getValue('link_type')) == 'HTML')
			{
				bResult = false;
				strMessage += '  Failed: link_type should NOT be "HTML"!\n';
			}
			if (GetStringValue(grSysAppModule.getValue('title')) != GetStringValue(grSysAppModule.getValue('sys_name')))
			{
				bResult = false;
				strMessage += '  Failed: title and sys_name should be identical!\n';
			}		
		}
		
		
		// Check sys_ui_page
		var grSysUiPage = new GlideRecord('sys_ui_page');
		grSysUiPage.addQuery('sys_scope','=',strAppSysId);
		grSysUiPage.query();
		while (grSysUiPage.next())
		{
			strMessage += 'Checking ui page: "'+GetStringValue(grSysUiPage.getValue('name'))+'"\n';
			
			strHTML = GetStringValue(grSysUiPage.getValue('html'));
			if (strHTML.search('<g:breakpoint') != -1)
			{
				bResult = false;
				strMessage += '  Failed: All breakpoints should be removed!!\n';
			
			}
		}	
		
	
		
		// Check sys_ui_script
		var grSysUiScript = new GlideRecord('sys_ui_script');
		grSysUiScript.addQuery('sys_scope','=',strAppSysId);
		grSysUiScript.query();
		while (grSysUiScript.next())
		{
			strMessage += 'Checking UI script: "'+GetStringValue(grSysUiScript.getValue('script_name'))+'"\n';
			
			var strDescription = GetStringValue(grSysUiScript.getValue('description'));
			if (strDescription == '')
			{
				bResult = false;
				strMessage += '  Failed: A ui script should have a description.\n';
			}
		}		
		
		
		// Check roles
		var grUserRole = new GlideRecord('sys_user_role');
		grUserRole.addQuery('sys_scope','=',strAppSysId);
		grUserRole.query();
		while (grUserRole.next())
		{
			strMessage += 'Checking role: "'+GetStringValue(grUserRole.getValue('name'))+'"\n';
			if (GetStringValue(grUserRole.getValue('description')) == '')
			{
				bResult = false;
				strMessage += '  Failed: description is empty.\n';
			}		
		}
		
		
		
		// Check for useless field level ACLs
		var grSSA = new GlideRecord('sys_security_acl');
		grSSA.addQuery('sys_scope','=',strAppSysId);
		grSSA.query();
		while(grSSA.next())
		{
			var strName = GetStringValue(grSSA.getValue('name'));
			var strOperation = GetStringValue(grSSA.getValue('operation'));

			strMessage += 'Checking ACL: '+strName+' / '+strOperation+'\n';
			if (strName.contains('.'))
			{
				if (strOperation == 'create' || strOperation == 'delete')
				{
					strMessage += '  Failed: Useless field level ACL: '+strName+' / '+strOperation+' ('+grSSA.sys_id+')!\n';
					bResult = false;
				}
			}
			
			// Get all roles associated to the ACL
			var grSSAR = new GlideRecord('sys_security_acl_role');
			grSSAR.addQuery('sys_security_acl','=',grSSA.sys_id);
			grSSAR.query();
			if (grSSAR.getRowCount() > 1)
			{
				var aRoles = [];
				while(grSSAR.next())
				{
					var grRole = GetRecord('sys_user_role',grSSAR.sys_user_role);
					if (grRole != false)
					{
						aRoles.push(GetStringValue(grRole.name));
					}
				}
				if (ArrayValueExists(aRoles,'snc_internal'))
				{
					strMessage += '  Failed: If more than one role is associated to an ACL, snc_internal should not be contained!\n';
					bResult = false;
				}
			}
			
			
			// Check for snc_internal in combination with another role
			
			
		}
		
		/*
		// Check scheduled jobs
		var grSA = new GlideRecord('sysauto_script');
		grSA.addQuery('sys_scope','=',strAppSysId);
		grSA.query();
		while (grSA.next())
		{
			var strName = grSA.getValue('name');
			strMessage += 'Checking Scheduled Job: '+strName+'\n';
			
			var strRunAs = grSA.getValue('run_as');
			
			if (IsTechnicalUser(strRunAs) == false && IsUserDefaultAdmin(strRunAs) == false)
			{
				strMessage += 'Failed: Scheduled job "'+strName+'" is neither configured to run as a technical user (web_service_access_only is set to true) nor as the default System Administrator user!\n';
				bResult = false;
			}
			
		}
		*/
		
		
		// Check notification subscription 
		strMessage += 'Checking notification subscriptions...\n';
		var grNS = new GlideRecord('sys_notif_subscription');
		grNS.addQuery('sys_scope','=',strAppSysId);
		grNS.query();
		if (grNS.getRowCount() > 0)
		{
			strMessage += 'Failed: There is at least one notification subscription associated to the scoped app (which should be not the case)!\n';
            strMessage += 'Check out the sys_notif_subscription table and delete all records associated to the scoped app.\n';
			bResult = false;
		}
		
		
/*		
		// Check sys_index
		strMessage += 'Checking indexes...\n';
		var grSI = new GlideRecord('sys_index');
		grSI.addQuery('sys_scope','=',strAppSysId);
		grSI.query();
		if (grSI.getRowCount() > 0)
		{
			strMessage += 'Failed: There is at least one record in sys_index to the scoped app (which should be not the case)!\n';
            strMessage += 'Check out the sys_index table and delete all records associated to the scoped app.\n';
			bResult = false;
		}
*/		
		
		
	}
	

	
	
	if (bResult == true)
	{
		stepResult.setSuccess();
	}
	else
	{
		stepResult.setFailed();
	}
	stepResult.setOutputMessage(strMessage);
	
	
	
}(inputs, outputs, stepResult, timeout));
]]></step_execution_generator>
        <sys_class_name>sys_atf_step_config</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-11-23 13:28:01</sys_created_on>
        <sys_id>786a921f1b6c2090a89720a8ec4bcbc9</sys_id>
        <sys_mod_count>95</sys_mod_count>
        <sys_name>DevTools - Check scoped app sanity</sys_name>
        <sys_package display_value="DevTools" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevTools">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_atf_step_config_786a921f1b6c2090a89720a8ec4bcbc9</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-12-13 11:23:30</sys_updated_on>
        <template_reminder>TBD</template_reminder>
        <type display_value="Test Step" name="sys_atf_step">844d8f97d1e302104f34ba60d8b7c1dc</type>
        <wizard_redirect/>
    </sys_atf_step_config>
    <sys_translated_text action="delete_multiple" query="documentkey=786a921f1b6c2090a89720a8ec4bcbc9"/>
    <sys_variable_value action="delete_multiple" query="document_key=786a921f1b6c2090a89720a8ec4bcbc9"/>
</record_update>
