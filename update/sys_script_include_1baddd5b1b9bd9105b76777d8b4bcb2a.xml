<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_devtools.ProgressTrackerAPI</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>The ProgressTracker class encapsulates the SNC.GlideExecutionTracker object for use within scoped applications.
|
Methods:
* initialize()
* IsInitialized()
* Start()
* SetPercentageProgress()
* SetText()
* SetResult()</description>
        <mobile_callable>false</mobile_callable>
        <name>ProgressTrackerAPI</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[var ProgressTrackerAPI = Class.create();
ProgressTrackerAPI.prototype =
{ 
    initialize: function()
	{
		if (IsTestRunning() == true) 
		{
			// In case a function is called within an ATF, reporting an error derails test execution
			this.tracker = null;
		}
		else
		{
			this.tracker = RunScriptInGlobalScope('result = SNC.GlideExecutionTracker.getLastRunning();');
		}
	},
	
	IsInitialized: function()
	{
		if (this.tracker != null)
		{
			if (IsValidSysId(this.tracker.getSysID()))
			{
				return true;
			}
		}
		return false;
	},
	
	Start: function()
	{
		if (this.IsInitialized())
		{
			strTable = 'sys_app';
			
			RunScriptInGlobalScope('param1.setSourceTable(param2);',this.tracker,strTable);

			RunScriptInGlobalScope('param1.run();',this.tracker);
		}
	},
	
	SetPercentageProgress: function(nProgress)
	{
		if (this.IsInitialized())
		{
			nProgress = GetIntegerValue(nProgress);
			if (nProgress < 0)
			{
				nProgress = 0;
			}
			if (nProgress > 100)
			{
				nProgress = 100;
			}
			RecordSetValue('sys_execution_tracker',this.tracker.getSysID(),'percent_complete',nProgress);
		}
	},
	
	SetText: function(strText)
	{
		if (this.IsInitialized())
		{		
			strText = GetStringValue(strText);
			RecordSetValue('sys_execution_tracker',this.tracker.getSysID(),'detail_message',strText);
		}
	},
	
	
	SetResult: function(result,bSuccess,strMessage)
	{
		if (this.IsInitialized())
		{	
			bSuccess = GetBoolValue(bSuccess);
			strMessage = GetStringValue(strMessage);
			this.tracker.updateResult(result);
			if (bSuccess == true)
			{
				this.tracker.success(strMessage);
			}
			else
			{
				this.tracker.fail(strMessage);
			}
		}
	},

    type: 'ProgressTrackerAPI'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-11-26 14:32:09</sys_created_on>
        <sys_id>1baddd5b1b9bd9105b76777d8b4bcb2a</sys_id>
        <sys_mod_count>58</sys_mod_count>
        <sys_name>ProgressTrackerAPI</sys_name>
        <sys_package display_value="DevTools" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevTools">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_script_include_1baddd5b1b9bd9105b76777d8b4bcb2a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-10-25 12:28:56</sys_updated_on>
    </sys_script_include>
</record_update>
