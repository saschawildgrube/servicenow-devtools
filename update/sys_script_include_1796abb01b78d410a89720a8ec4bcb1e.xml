<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_devtools.TestDataAPI</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>A class to create test data records.
|
Methods:
* initialize()
* SetPrefix()
* GetPrefix()
* GetAllData()
* DeleteAllData()
* GetAllRecordsFromTable()
* DeleteAllRecordsByName()
* CreateRecord()
* GetRecord()
* CreateTestItem()
* GetAllTestItems()
* GetTestItem()
* CreateUser()
* GetAllUsers()
* GetUser()
* CreateGroup()
* GetAllGroups()
* GetGroup()
* CreateRole()
* GetAllRoles()
* GetRole()
* CreateCompany()
* GetAllCompanies()
* GetCompany()
* CreateContract()
* GetAllContracts()
* GetContract()
* CreateIncident()
* GetAllIncidents()
* GetIncident()
* CreateIncidentTask()
* GetAllIncidentTasks()
* GetIncidentTask()
* CreateChangeRequest()
* GetAllChangeRequests()
* GetChangeRequest()
* CreateChangeTask()
* GetAllChangeTasks()
* GetChangeTask()
* CreateProblem()
* GetAllProblems()
* GetProblem()
* CreateProblemTask()
* GetAllProblemTasks()
* GetProblemTask()
* CreateRequest()
* GetAllRequests()
* GetRequest()
* CreateRequestItem()
* GetAllRequestItems()
* GetRequestItem()
* CreateRequestTask()
* GetAllRequestTasks()
* GetRequestTask()
* GetAllConfigurationItems()
* GetConfigurationItem()
* CreateDatabaseView()
* GetDatabaseViewPrefix()
* GetDatabaseViewName()
* GetAllDatabaseViews()
* GetDataBaseView()
* CreateScriptInclude()
* GetAllScriptIncludes()
* GetScriptInclude()
* CreateServicePortalWidget()
* GetAllServicePortalWidgets()
* GetServicePortalWidget()</description>
        <mobile_callable>false</mobile_callable>
        <name>TestDataAPI</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[var TestDataAPI = Class.create(); 
TestDataAPI.prototype =
{
	initialize:function(strPrefix) 
	{
		this.SetPrefix(strPrefix);
	},
	
	SetPrefix:function(strPrefix)
	{
		this.m_strPrefix = ''+strPrefix;
	},
	
	GetPrefix:function()
	{
		return this.m_strPrefix;
	},
	
	GetAllData:function()
	{
		var result = {};

		result.x_snc_devtools_test = this.GetAllTestItems();
		
		result.sys_user = this.GetAllUsers();
		result.sys_user_group = this.GetAllGroups();
		result.sys_user_role = this.GetAllRoles();
		result.core_company = this.GetAllCompanies();
		result.ast_contract = this.GetAllContracts();
		
		result.incident = this.GetAllIncidents();
		result.incident_task = this.GetAllIncidentTasks();
		result.problem = this.GetAllProblems();
		result.problem_task = this.GetAllProblemTasks();
		result.change_request = this.GetAllChangeRequests();
		result.change_task = this.GetAllChangeTasks();
		result.sc_request = this.GetAllRequests();
		result.sc_req_item = this.GetAllRequestItems();
		result.sc_task = this.GetAllRequestTasks();
		
		result.cmdb_ci = this.GetAllConfigurationItems();
		
		result.sys_db_view = this.GetAllDatabaseViews();
		
		result.sys_script_include = this.GetAllScriptIncludes();
		
		result.sp_widget = this.GetAllServicePortalWidgets();
		
		return result;
	},
	
	DeleteAllData:function(data)
	{
		if (IsObject(data) == false)
		{
			var data = this.GetAllData();
		}
		var aTables = GetKeys(data);
		for (var nTable = 0; nTable < aTables.length; nTable++)
		{
			var strTable = aTables[nTable];
			var aRecords = GetValue(data,strTable);
			if (IsArray(aRecords) == true)
			{
				for (var nRecord = 0; nRecord < aRecords.length; nRecord++)
				{
					var oRecord = aRecords[nRecord];
					var strSysId = GetValue(oRecord,'sys_id');
					if (IsValidSysId(strSysId) == true)
					{
						RecordDelete(strTable,strSysId);
					}
				}
			}
		}
	},
	
	GetAllRecordsFromTable:function(strTable,strNameColumn)
	{
		strTable = GetStringValue(strTable);
		strNameColumn = GetStringValue(strNameColumn);
		if (IsValidTable(strTable) == false)
		{
			return false;
		}
		if (IsValidColumn(strTable,strNameColumn) == false)
		{
			return false;
		}

		var strPrefix = this.GetPrefix();
		var aResult = [];
		
		var grRecords = new GlideRecord(strTable);
		grRecords.addQuery(strNameColumn,'STARTSWITH',strPrefix);
		grRecords.orderBy(strNameColumn);
		grRecords.query();
		while (grRecords.next())
		{
			aResult.push(Clone(grRecords));
		}
		return aResult;
	},
			
	DeleteAllRecordsByName:function(strTable, strNameColumn, strName)
	{
		strTable = GetStringValue(strTable);
		strNameColumn = GetStringValue(strNameColumn);
		strName = GetStringValue(strName);
		var strPrefix = this.GetPrefix();
		if (IsValidTable(strTable) == false)
		{
			return false;
		}
		if (IsValidColumn(strTable,strNameColumn) == false)
		{
			return false;
		}
		if (strName == '')
		{
			return false;
		}
		var grRecordsToDelete = new GlideRecord(strTable);
		grRecordsToDelete.addQuery(strNameColumn,'=',strPrefix+strName);
		grRecordsToDelete.query();
		GlideRecordDeleteMultiple(grRecordsToDelete);
		return true;
	},
	
	CreateRecord:function(strTable,strNameColumn,strName,oValues)
	{
		strTable = GetStringValue(strTable);
		strNameColumn = GetStringValue(strNameColumn);
		strName = GetStringValue(strName);
		var strPrefix = this.GetPrefix();
		if (IsValidTable(strTable) == false)
		{
			return false;
		}
		if (IsValidColumn(strTable,strNameColumn) == false)
		{
			return false;
		}
		if (strName == '')
		{
			return false;
		}
		if (GetType(oValues) != 'Object')
		{
			oValues = {};
		}
		oValues[strNameColumn] = strPrefix+strName;
		return RecordInsert(strTable,oValues);
	},

	GetRecord:function(strTable,strNameColumn,strName)
	{
		var query = {};
		query[strNameColumn] = this.GetPrefix()+strName;
		var grRecord = RecordQuery(strTable,query);
		if (IsValidRecord(grRecord) == false)
		{
			return false;
		}
		return GetStringValue(grRecord.sys_id);
	},

	
	CreateTestItem:function(strName, strValue, strProcessedDateTime)
	{
		strName = GetStringValue(strName);
		strValue = GetStringValue(strValue);
		strProcessedDateTime = RenderDateTime(strProcessedDateTime);
		
		this.DeleteAllRecordsByName('x_snc_devtools_test','name',strName);

		return this.CreateRecord('x_snc_devtools_test','name',strName,
			{
				value: strValue,
				processed: strProcessedDateTime
			});
	},
	
	GetAllTestItems:function()
	{
		return this.GetAllRecordsFromTable('x_snc_devtools_test','name');
	},
	
	GetTestItem: function(strName)
	{
		return this.GetRecord('x_snc_devtools_test','name',strName);
	},
	
	CreateUser:function(strName, aRoles, bTechnical, strEmail, strPassword)
	{
	
		strName = GetStringValue(strName);
		aRoles = GetArrayValue(aRoles); 
		bTechnical = GetBoolValue(bTechnical);
		strEmail = GetStringValue(strEmail);
		strPassword = GetStringValue(strPassword);
		
		strPrefix = this.GetPrefix();

		strUserName = strPrefix+strName;
		if (bTechnical == true)
		{
			strUserName = 'technical.'+strUserName;
			strUserName = strUserName.toLowerCase();
		}


		var grUser = new GlideRecord('sys_user');
		var strUserSysId = null;
		var bDeleted = true;
		if (grUser.get('user_name','=',strUserName))
		{
			strUserSysId = grUser.getValue('sys_id');
			bDeleted = GlideRecordDelete(grUser);
		}
		if (bDeleted == true || strUserSysId == null)
		{
			grUser.initialize();
			grUser.user_name = strUserName;
			if (bTechnical == true)
			{
				grUser.first_name = 'Technical';
			}
			else
			{
				grUser.first_name = 'Test';
			}
			grUser.last_name = strPrefix+strName;
			if (bTechnical == true)
			{
				grUser.web_service_access_only = true;
			}
			if (strEmail != '')
			{
				grUser.email = strEmail;
			}
			if (strPassword != '')
			{
				grUser.user_password.setDisplayValue(strPassword);
			}
			strUserSysId = GlideRecordInsert(grUser);
		}

		if (strUserSysId == null)
		{
			return null;
		}
		
		var grUserHasRole = new GlideRecord("sys_user_has_role");
		for (var nRole = 0; nRole < aRoles.length; nRole++)
		{
			var strRole = aRoles[nRole];
			if (strRole != '')
			{
				var grUserRole = new GlideRecord('sys_user_role');
				grUserRole.addQuery('name','=',strPrefix+strRole);
				grUserRole.query();
				if (grUserRole.getRowCount() == 0)
				{
					grUserRole = new GlideRecord('sys_user_role');
					grUserRole.addQuery('name','=',strRole);
					grUserRole.query();
				}
				if (grUserRole.getRowCount() == 1)
				{					
					if (grUserRole.next())
					{		
						grUserHasRole.initialize();
						grUserHasRole.role = grUserRole.sys_id;
						grUserHasRole.user = strUserSysId;
						GlideRecordInsert(grUserHasRole);
					}
				}
			}
		}
		return strUserSysId;
	},
	
	GetAllUsers:function()
	{
		var aResult = [];
		var strPrefix = this.GetPrefix();
		
		var grUser = new GlideRecord('sys_user');
		grUser.addQuery('user_name','STARTSWITH',strPrefix);
		grUser.orderBy('user_name');
		grUser.query();
		while (grUser.next())
		{
			var oUser = Clone(grUser);
			
			var aRoles = [];
			var grUserHasRole = new GlideRecord('sys_user_has_role');
			grUserHasRole.addQuery('user','=',grUser.sys_id);
			grUserHasRole.query();
			while (grUserHasRole.next())
			{
				var grRole = new GlideRecord('sys_user_role');
				if (grRole.get(grUserHasRole.role))
				{
					aRoles.push(grRole.name);
				}
			}
			aRoles = aRoles.sort();
			oUser['_roles'] = aRoles;
			
			var aGroups = [];
			var grGroupMember = new GlideRecord('sys_user_grmember');
			grGroupMember.addQuery('user','=',grUser.sys_id);
			grGroupMember.query();
			while (grGroupMember.next())
			{
				var grGroup = new GlideRecord('sys_user_group');
				if (grGroup.get(grGroupMember.group))
				{
					aGroups.push(grGroup.name);
				}
			}
			aGroups = aGroups.sort();
			oUser['_groups'] = aGroups;			
			
			
			aResult.push(oUser);
		}
		return aResult;
	},
	
	GetUser: function(strName)
	{
		return this.GetRecord('sys_user','user_name',strName);
	},
	
	CreateGroup:function(strName, aUserNames)
	{	
		strName = GetStringValue(strName);
		aUserNames = GetArrayValue(aUserNames);
		var strPrefix = this.GetPrefix();
		
		this.DeleteAllRecordsByName('sys_user_group','name',strName);

		var grGroup = new GlideRecord('sys_user_group');
		grGroup.initialize();
		grGroup.name = strPrefix+strName;
		var strGroupSysId = GlideRecordInsert(grGroup);

		if (strGroupSysId == null)
		{
			return null;
		}
		
		var grGroupMember = new GlideRecord('sys_user_grmember');
		aUserNames.forEach(function(strUserName)
		{
			if (strUserName != '')
			{
				var grUser = new GlideRecord("sys_user");
				if (grUser.get('user_name',strPrefix+strUserName))
				{						
					grGroupMember.initialize();
					grGroupMember.group = strGroupSysId;
					grGroupMember.user = grUser.sys_id;
					GlideRecordInsert(grGroupMember);
				}

			}
		});
		return strGroupSysId;
	},
	
	GetAllGroups:function()
	{
		var aResult = this.GetAllRecordsFromTable('sys_user_group','name');
		
		for (var nRecord = 0; nRecord < aResult.length; nRecord++)
		{
			var aUsers = [];
			var grGroupMember = new GlideRecord('sys_user_grmember');
			grGroupMember.addQuery('group','=',aResult[nRecord]['sys_id']);
			grGroupMember.query();
			while (grGroupMember.next())
			{
				var grUser = GetRecord('sys_user',grGroupMember.user);
				if (grUser != false)
				{
					aUsers.push(grUser.user_name);
				}
			}
			aUsers = aUsers.sort();
			aResult[nRecord]['_users'] = aUsers;					
		}
		return aResult;
	},	
	
	GetGroup: function(strName)
	{
		return this.GetRecord('sys_user_group','name',strName);
	},	
	
	CreateRole:function(strName)
	{	
		strName = GetStringValue(strName);
		this.DeleteAllRecordsByName('sys_user_role','name',strName);
		return strSysId =this.CreateRecord('sys_user_role','name',strName, {});
	},
		
	GetAllRoles:function()
	{
		return this.GetAllRecordsFromTable('sys_user_role','name');
	},
	
	GetRole: function(strName)
	{
		return this.GetRecord('sys_user_role','name',strName);
	},	
	
	CreateCompany:function(strName, oValues)
	{
		strName = GetStringValue(strName);
		this.DeleteAllRecordsByName('core_company','name',strName);
		return this.CreateRecord('core_company','name',strName, oValues);
	},
	
	GetAllCompanies:function()
	{
		return this.GetAllRecordsFromTable('core_company','name');
	},
	
	GetCompany: function(strName)
	{
		return this.GetRecord('core_company','name',strName);
	},	
	

	CreateContract:function(strName, oValues)
	{
		strName = GetStringValue(strName);
		this.DeleteAllRecordsByName('ast_contract','short_description',strName);
		return this.CreateRecord('ast_contract','short_description',strName, oValues);
	},
	
	GetAllContracts:function()
	{
		return this.GetAllRecordsFromTable('ast_contract','short_description');
	},

	GetContract: function(strName)
	{
		return this.GetRecord('ast_contract','short_description',strName);
	},	
		
	
	CreateIncident:function(strName, strOpenedByUserName, strCallerUserName, strAssignmentGroupName)
	{
		strName = GetStringValue(strName);
		strOpenedByUserName = GetStringValue(strOpenedByUserName);
		strCallerUserName = GetStringValue(strCallerUserName);
		strAssignmentGroupName = GetStringValue(strAssignmentGroupName);	

		var strPrefix = this.GetPrefix(); 

		var grIncidentToDelete = new GlideRecord('incident');
		grIncidentToDelete.addQuery('short_description','=',strPrefix+strName);
		grIncidentToDelete.query();
		GlideRecordDeleteMultiple(grIncidentToDelete);

		var strOpenedByUserSysId = '';
		if (strOpenedByUserName != '')
		{
			var grUser = new GlideRecord("sys_user");
			if (grUser.get('user_name',strPrefix+strOpenedByUserName))
			{
				strOpenedByUserSysId = grUser.sys_id;
			}
		}				
		
		var strCallerUserSysId = '';
		if (strCallerUserName != '')
		{
			var grUser = new GlideRecord("sys_user");
			if (grUser.get('user_name',strPrefix+strCallerUserName))
			{
				strCallerUserSysId = grUser.sys_id;
			}
		}		
		
		var strAssignmentGroupSysId = '';
		if (strAssignmentGroupName != '')
		{
			var grGroup = new GlideRecord("sys_user_group");
			if (grGroup.get('name',strPrefix+strAssignmentGroupName))
			{
				strAssignmentGroupSysId = grGroup.sys_id;
			}
		}
		
		var grIncident = new GlideRecord('incident');
		grIncident.initialize();
		grIncident.short_description = strPrefix+strName;
		grIncident.opened_by = strOpenedByUserSysId;
		grIncident.caller_id = strCallerUserSysId;
		grIncident.assignment_group = strAssignmentGroupSysId;
		var strIncidentSysId = GlideRecordInsert(grIncident);
		
		if (strIncidentSysId == null)
		{
			return null;
		}
		return strIncidentSysId;
	},

	GetAllIncidents:function()
	{
		var aIncidents = [];
		var strPrefix = this.GetPrefix();
		
		var grIncident = new GlideRecord('incident');
		grIncident.addQuery('short_description','STARTSWITH',strPrefix);
		grIncident.orderBy('short_description');
		grIncident.query();
		while (grIncident.next())
		{
			var oIncident = Clone(grIncident);
			var aTaskSLA = [];
			var grTaskSLA = new GlideRecord('task_sla');
			grTaskSLA.addQuery('task','=',grIncident.sys_id);
			GlideRecordQuery(grTaskSLA);
			while (grTaskSLA.next())
			{
				aTaskSLA.push(Clone(grTaskSLA));
			}
			oIncident['_task_sla'] = aTaskSLA;
			aIncidents.push(oIncident);
		}
		return aIncidents;
	},
	
	GetIncident: function(strName)
	{
		return this.GetRecord('incident','short_description',strName);
	},		
	
	CreateIncidentTask:function(strParentName, strName, strOpenedByUserName, strAssignmentGroupName)
	{
		strParentName = GetStringValue(strParentName);
		strName = GetStringValue(strName);
		strOpenedByUserName = GetStringValue(strOpenedByUserName);
		strAssignmentGroupName = GetStringValue(strAssignmentGroupName);
		
		var strPrefix = this.GetPrefix(); 

		var strShortDescription = strPrefix+strParentName+'_'+strName;
		
		var grIncidentTaskToDelete = new GlideRecord('incident_task');
		grIncidentTaskToDelete.addQuery('short_description','=',strShortDescription);
		grIncidentTaskToDelete.query();
		GlideRecordDeleteMultiple(grIncidentTaskToDelete);

		var strOpenedByUserSysId = '';
		if (strOpenedByUserName != '')
		{
			var grUser = new GlideRecord('sys_user');
			if (grUser.get('user_name',strPrefix+strOpenedByUserName))
			{
				strOpenedByUserSysId = grUser.sys_id;
			}
		}		
		
		var strAssignmentGroupSysId = '';
		if (strAssignmentGroupName != '')
		{
			var grGroup = new GlideRecord('sys_user_group');
			if (grGroup.get('name',strPrefix+strAssignmentGroupName))
			{
				strAssignmentGroupSysId = grGroup.sys_id;
			}
		}
		
		var strIncidentSysId = '';
		if (strParentName != '')
		{
			var grIncident = new GlideRecord('incident');
			if (grIncident.get('short_description',strPrefix+strParentName))
			{
				strIncidentSysId = grIncident.sys_id;
			}
		}	
		
		var grIncidentTask = new GlideRecord('incident_task');
		grIncidentTask.initialize();
		grIncidentTask.incident = strIncidentSysId;
		grIncidentTask.short_description = strShortDescription;
		grIncidentTask.opened_by = strOpenedByUserSysId;
		grIncidentTask.assignment_group = strAssignmentGroupSysId;
		var strIncidentTaskSysId = GlideRecordInsert(grIncidentTask);
		
		if (strIncidentTaskSysId == null)
		{
			return null;
		}
		return strIncidentTaskSysId;
	},
	
	GetAllIncidentTasks:function()
	{
		var aIncidentTasks = [];
		var strPrefix = this.GetPrefix();
		
		var grIncidentTask = new GlideRecord('incident_task');
		grIncidentTask.addQuery('short_description','STARTSWITH',strPrefix);
		grIncidentTask.orderBy('short_description');
		grIncidentTask.query();
		while (grIncidentTask.next())
		{
			aIncidentTasks.push(Clone(grIncidentTask));
		}
		return aIncidentTasks;
	},	
	
	GetIncidentTask: function(strName)
	{
		return this.GetRecord('incident_task','short_description',strName);
	},			
	
	CreateChangeRequest:function(strName, strOpenedByUserName, strRequestedByUserName, strAssignmentGroupName)
	{
		strName = GetStringValue(strName);
		strOpenedByUserName = GetStringValue(strOpenedByUserName);
		strRequestedByUserName = GetStringValue(strRequestedByUserName);
		strAssignmentGroupName = GetStringValue(strAssignmentGroupName);

		var strPrefix = this.GetPrefix(); 

		var grChangeRequestToDelete = new GlideRecord('change_request');
		grChangeRequestToDelete.addQuery('short_description','=',strPrefix+strName);
		grChangeRequestToDelete.query();
		GlideRecordDeleteMultiple(grChangeRequestToDelete);

		var strOpenedByUserSysId = '';
		if (strOpenedByUserName != '')
		{
			var grUser = new GlideRecord("sys_user");
			if (grUser.get('user_name',strPrefix+strOpenedByUserName))
			{
				strOpenedByUserSysId = grUser.sys_id;
			}
		}		
		
		var strRequestedByUserSysId = '';
		if (strRequestedByUserName != '')
		{
			var grUser = new GlideRecord("sys_user");
			if (grUser.get('user_name',strPrefix+strRequestedByUserName))
			{
				strRequestedByUserSysId = grUser.sys_id;
			}
		}	
		
		var strAssignmentGroupSysId = '';
		if (strAssignmentGroupName != '')
		{
			var grGroup = new GlideRecord("sys_user_group");
			if (grGroup.get('name',strPrefix+strAssignmentGroupName))
			{
				strAssignmentGroupSysId = grGroup.sys_id;
			}
		}
		
		var grChangeRequest = new GlideRecord('change_request');
		grChangeRequest.initialize();
		grChangeRequest.short_description = strPrefix+strName;
		grChangeRequest.opened_by = strOpenedByUserSysId;
		grChangeRequest.requested_by = strRequestedByUserSysId;
		grChangeRequest.assignment_group = strAssignmentGroupSysId;
		var strChangeRequestSysId = GlideRecordInsert(grChangeRequest);
		if (strChangeRequestSysId == null)
		{
			return null;
		}
		return strChangeRequestSysId;
	},
		
	GetAllChangeRequests:function()
	{
		var aResult = [];
		var strPrefix = this.GetPrefix();
		
		var grChangeRequests = new GlideRecord('change_request');
		grChangeRequests.addQuery('short_description','STARTSWITH',strPrefix);
		grChangeRequests.orderBy('short_description');
		grChangeRequests.query();
		while (grChangeRequests.next())
		{
			aResult.push(Clone(grChangeRequests));
		}
		return aResult;
	},		
	
	GetChangeRequest: function(strName)
	{
		return this.GetRecord('change_request','short_description',strName);
	},			
	
	CreateChangeTask:function(strParentName, strName, strOpenedByUserName, strAssignmentGroupName)
	{
		strParentName = GetStringValue(strParentName);
		strName = GetStringValue(strName);
		strOpenedByUserName = GetStringValue(strOpenedByUserName);
		strAssignmentGroupName = GetStringValue(strAssignmentGroupName);
		
		var strPrefix = this.GetPrefix(); 

		var strShortDescription = strPrefix+strParentName+'_'+strName;
		
		var grChangeTaskToDelete = new GlideRecord('change_task');
		grChangeTaskToDelete.addQuery('short_description','=',strShortDescription);
		grChangeTaskToDelete.query();
		GlideRecordDeleteMultiple(grChangeTaskToDelete);

		var strOpenedByUserSysId = '';
		if (strOpenedByUserName != '')
		{
			var grUser = new GlideRecord('sys_user');
			if (grUser.get('user_name',strPrefix+strOpenedByUserName))
			{
				strOpenedByUserSysId = grUser.sys_id;
			}
		}		
		
		var strAssignmentGroupSysId = '';
		if (strAssignmentGroupName != '')
		{
			var grGroup = new GlideRecord('sys_user_group');
			if (grGroup.get('name',strPrefix+strAssignmentGroupName))
			{
				strAssignmentGroupSysId = grGroup.sys_id;
			}
		}
		
		var strChangeRequestSysId = '';
		if (strParentName != '')
		{
			var grChangeRequest = new GlideRecord('change_request');
			if (grChangeRequest.get('short_description',strPrefix+strParentName))
			{
				strChangeRequestSysId = grChangeRequest.sys_id;
			}
		}	
		
		var grChangeTask = new GlideRecord('change_task');
		grChangeTask.initialize();
		grChangeTask.change_request = strChangeRequestSysId;
		grChangeTask.short_description = strShortDescription;
		grChangeTask.opened_by = strOpenedByUserSysId;
		grChangeTask.assignment_group = strAssignmentGroupSysId;
		var strChangeTaskSysId = GlideRecordInsert(grChangeTask);
		
		if (strChangeTaskSysId == null)
		{
			return null;
		}
		return strChangeTaskSysId;
	},
	
	GetAllChangeTasks:function()
	{
		var aChangeTasks = [];
		var strPrefix = this.GetPrefix();
		
		var grChangeTasks = new GlideRecord('change_task');
		grChangeTasks.addQuery('short_description','STARTSWITH',strPrefix);
		grChangeTasks.orderBy('short_description');
		grChangeTasks.query();
		while (grChangeTasks.next())
		{
			aChangeTasks.push(Clone(grChangeTasks));
		}
		return aChangeTasks;
	},		
	
	GetChangeTask: function(strName)
	{
		return this.GetRecord('change_task','short_description',strName);
	},			
		
	CreateProblem:function(strName, strOpenedByUserName, strAssignmentGroupName)
	{
		strName = GetStringValue(strName);
		strOpenedByUserName = GetStringValue(strOpenedByUserName);
		strAssignmentGroupName = GetStringValue(strAssignmentGroupName);

		var strPrefix = this.GetPrefix(); 

		var grProblemToDelete = new GlideRecord('problem');
		grProblemToDelete.addQuery('short_description','=',strPrefix+strName);
		grProblemToDelete.query();
		GlideRecordDeleteMultiple(grProblemToDelete);

		var strOpenedByUserSysId = '';
		if (strOpenedByUserName != '')
		{
			var grUser = new GlideRecord("sys_user");
			if (grUser.get('user_name',strPrefix+strOpenedByUserName))
			{
				strOpenedByUserSysId = grUser.sys_id;
			}
		}		
		
		var strAssignmentGroupSysId = '';
		if (strAssignmentGroupName != '')
		{
			var grGroup = new GlideRecord("sys_user_group");
			if (grGroup.get('name',strPrefix+strAssignmentGroupName))
			{
				strAssignmentGroupSysId = grGroup.sys_id;
			}
		}
		
		var grProblem = new GlideRecord('problem');
		grProblem.initialize();
		grProblem.short_description = strPrefix+strName;
		grProblem.opened_by = strOpenedByUserSysId;
		grProblem.assignment_group = strAssignmentGroupSysId;
		var strProblemSysId = GlideRecordInsert(grProblem);
		
		if (strProblemSysId == null)
		{
			return null;
		}
		return strProblemSysId;
	},

	GetAllProblems:function()
	{
		var aProblems = [];
		var strPrefix = this.GetPrefix();
		
		var grProblem = new GlideRecord('problem');
		grProblem.addQuery('short_description','STARTSWITH',strPrefix);
		grProblem.orderBy('short_description');
		grProblem.query();
		while (grProblem.next())
		{
			aProblems.push(Clone(grProblem));
		}
		return aProblems;
	},		
	
	GetProblem: function(strName)
	{
		return this.GetRecord('problem','short_description',strName);
	},			
	
	CreateProblemTask:function(strParentName, strName, strOpenedByUserName, strAssignmentGroupName)
	{
		strParentName = GetStringValue(strParentName);
		strName = GetStringValue(strName);
		strOpenedByUserName = GetStringValue(strOpenedByUserName);
		strAssignmentGroupName = GetStringValue(strAssignmentGroupName);

		var strPrefix = this.GetPrefix(); 

		var strShortDescription = strPrefix+strParentName+'_'+strName;
		
		var grProblemTaskToDelete = new GlideRecord('problem_task');
		grProblemTaskToDelete.addQuery('short_description','=',strShortDescription);
		grProblemTaskToDelete.query();
		GlideRecordDeleteMultiple(grProblemTaskToDelete);

		var strOpenedByUserSysId = '';
		if (strOpenedByUserName != '')
		{
			var grUser = new GlideRecord('sys_user');
			if (grUser.get('user_name',strPrefix+strOpenedByUserName))
			{
				strOpenedByUserSysId = grUser.sys_id;
			}
		}		
		
		var strAssignmentGroupSysId = '';
		if (strAssignmentGroupName != '')
		{
			var grGroup = new GlideRecord('sys_user_group');
			if (grGroup.get('name',strPrefix+strAssignmentGroupName))
			{
				strAssignmentGroupSysId = grGroup.sys_id;
			}
		}
		
		var strProblemSysId = '';
		if (strParentName != '')
		{
			var grProblem = new GlideRecord('problem');
			if (grProblem.get('short_description',strPrefix+strParentName))
			{
				strProblemSysId = grProblem.sys_id;
			}
		}	
		
		var grProblemTask = new GlideRecord('problem_task');
		grProblemTask.initialize();
		grProblemTask.problem = strProblemSysId;
		grProblemTask.short_description = strShortDescription;
		grProblemTask.opened_by = strOpenedByUserSysId;
		grProblemTask.assignment_group = strAssignmentGroupSysId;
		var strProblemTaskSysId = GlideRecordInsert(grProblemTask);
		
		if (strProblemTaskSysId == null)
		{
			return null;
		}
		return strProblemTaskSysId;
	},
	
	GetAllProblemTasks:function()
	{
		var aResult = [];
		var strPrefix = this.GetPrefix();
		
		var grProblemTask = new GlideRecord('problem_task');
		grProblemTask.addQuery('short_description','STARTSWITH',strPrefix);
		grProblemTask.orderBy('short_description');
		grProblemTask.query();
		while (grProblemTask.next())
		{
			aResult.push(Clone(grProblemTask));
		}
		return aResult;
	},	
	
	GetProblemTask: function(strName)
	{
		return this.GetRecord('problem_task','short_description',strName);
	},		
	
	CreateRequest:function(strName, strOpenedByUserName, strRequestedForUserName, strAssignmentGroupName)
	{
		strName = GetStringValue(strName);
		strOpenedByUserName = GetStringValue(strOpenedByUserName);
		strRequestedForUserName = GetStringValue(strRequestedForUserName);
		strAssignmentGroupName = GetStringValue(strAssignmentGroupName);
		
		var strPrefix = this.GetPrefix(); 

		var grRequestToDelete = new GlideRecord('sc_request');
		grRequestToDelete.addQuery('short_description','=',strPrefix+strName);
		grRequestToDelete.query();
		GlideRecordDeleteMultiple(grRequestToDelete);

		var strOpenedByUserSysId = '';
		if (strOpenedByUserName != '')
		{
			var grUser = new GlideRecord("sys_user");
			if (grUser.get('user_name',strPrefix+strOpenedByUserName))
			{
				strOpenedByUserSysId = grUser.sys_id;
			}
		}		
		
		var strRequestedForUserSysId = '';
		if (strRequestedForUserName != '')
		{
			var grUser = new GlideRecord("sys_user");
			if (grUser.get('user_name',strPrefix+strRequestedForUserName))
			{
				strRequestedForUserSysId = grUser.sys_id;
			}
		}	 
		
		var strAssignmentGroupSysId = '';
		if (strAssignmentGroupName != '')
		{
			var grGroup = new GlideRecord("sys_user_group");
			if (grGroup.get('name',strPrefix+strAssignmentGroupName))
			{
				strAssignmentGroupSysId = grGroup.sys_id;
			}
		}
		
		var grRequest = new GlideRecord('sc_request');
		grRequest.initialize();
		grRequest.short_description = strPrefix+strName;
		grRequest.opened_by = strOpenedByUserSysId;
		grRequest.requested_for = strRequestedForUserSysId;
		grRequest.assignment_group = strAssignmentGroupSysId;
		var strRequestSysId = GlideRecordInsert(grRequest);
		if (strRequestSysId == null)
		{
			return null;
		}
		return strRequestSysId;
		
	},
	
	GetAllRequests:function()
	{
		var aResult = [];
		var strPrefix = this.GetPrefix();
		
		var grRequests = new GlideRecord('sc_request');
		grRequests.addQuery('short_description','STARTSWITH',strPrefix);
		grRequests.orderBy('short_description');
		grRequests.query();
		while (grRequests.next())
		{
			aResult.push(Clone(grRequests));
		}
		return aResult;
	},	
	
	
	GetRequest: function(strName)
	{
		return this.GetRecord('sc_request','short_description',strName);
	},			

	CreateRequestItem:function(strName, strRequestSysId, strCatalogItemSysId, strOpenedByUserName)
	{
		strName = GetStringValue(strName);
		strRequestSysId = GetStringValue(strRequestSysId);
		strCatalogItemSysId = GetStringValue(strCatalogItemSysId);
		strOpenedByUserName = GetStringValue(strOpenedByUserName);
		
		var strPrefix = this.GetPrefix(); 

		var grRequestItemToDelete = new GlideRecord('sc_req_item');
		grRequestItemToDelete.addQuery('short_description','=',strPrefix+strName);
		grRequestItemToDelete.query();
		GlideRecordDeleteMultiple(grRequestItemToDelete);

		var strOpenedByUserSysId = '';
		if (strOpenedByUserName != '')
		{
			var grUser = new GlideRecord("sys_user");
			if (grUser.get('user_name',strPrefix+strOpenedByUserName))
			{
				strOpenedByUserSysId = grUser.sys_id;
			}
		}		
		
	
		var grRequestItem = new GlideRecord('sc_req_item');
		grRequestItem.initialize();
		grRequestItem.short_description = strPrefix+strName;
		grRequestItem.opened_by = strOpenedByUserSysId;
		grRequestItem.request = strRequestSysId;
		grRequestItem.cat_item = strCatalogItemSysId;
		var strRequestItemSysId = GlideRecordInsert(grRequestItem);
		if (strRequestItemSysId == null)
		{
			return null;
		}
		return strRequestItemSysId;
		
	},
	
	GetAllRequestItems:function()
	{
		var aResult = [];
		var strPrefix = this.GetPrefix();
		
		var grRequestItems = new GlideRecord('sc_req_item');
		var query = grRequestItems.addQuery('short_description','STARTSWITH',strPrefix);
		//query.addOrCondition('request.short_description','STARTSWITH',strPrefix);
		grRequestItems.orderBy('number');
		grRequestItems.query();
		while (grRequestItems.next())
		{
			aResult.push(Clone(grRequestItems));
		}
		return aResult;
	},	
	
	GetRequestItem: function(strName)
	{
		return this.GetRecord('sc_item','short_description',strName);
	},		

	CreateRequestTask:function(strName, strRequestItemSysId, strOpenedByUserName)
	{
		strName = GetStringValue(strName);
		strRequestItemSysId = GetStringValue(strRequestItemSysId);
		strOpenedByUserName = GetStringValue(strOpenedByUserName);
		
		var strPrefix = this.GetPrefix(); 

		var grRequestTaskToDelete = new GlideRecord('sc_req_item');
		grRequestTaskToDelete.addQuery('short_description','=',strPrefix+strName);
		grRequestTaskToDelete.query();
		GlideRecordDeleteMultiple(grRequestTaskToDelete);

		var strOpenedByUserSysId = '';
		if (strOpenedByUserName != '')
		{
			var grUser = new GlideRecord("sys_user");
			if (grUser.get('user_name',strPrefix+strOpenedByUserName))
			{
				strOpenedByUserSysId = grUser.sys_id;
			}
		}		
		
	
		var grRequestTask = new GlideRecord('sc_task');
		grRequestTask.initialize();
		grRequestTask.short_description = strPrefix+strName;
		grRequestTask.opened_by = strOpenedByUserSysId;
		grRequestTask.request_item = strRequestItemSysId;
		var strRequestTaskSysId = GlideRecordInsert(grRequestTask);
		if (strRequestTaskSysId == null)
		{
			return null;
		}
		return strRequestTaskSysId;
		
	},
	
	
	GetAllRequestTasks:function()
	{
		var aResult = [];
		var strPrefix = this.GetPrefix();
		
		var grRequestTasks = new GlideRecord('sc_task');
		grRequestTasks.addQuery('short_description','STARTSWITH',strPrefix);
		grRequestTasks.orderBy('short_description');
		grRequestTasks.query();
		while (grRequestTasks.next())
		{
			aResult.push(Clone(grRequestTasks));
		}
		return aResult;
	},	
	
	GetRequestTask: function(strName)
	{
		return this.GetRecord('sc_task','short_description',strName);
	},		
	
	GetAllConfigurationItems:function()
	{
		var aResult = [];
		var strPrefix = this.GetPrefix();
		
		var grRecords = new GlideRecord('cmdb_ci');
		grRecords.addQuery('name','STARTSWITH',strPrefix);
		grRecords.orderBy('name');
		grRecords.query();
		while (grRecords.next())
		{
			aResult.push(Clone(grRecords));
		}
		return aResult;
	},	
	
	GetConfigurationItem: function(strName)
	{
		return this.GetRecord('cmdb_ci','name',strName);
	},		

	CreateDatabaseView:function(strName, oDbView)
	{
		strName = GetStringValue(strName);
		
		if (strName == '')
		{
			return null;
		}
		
		if (IsObject(oDbView) == false)
		{
			return null;
		}

		var aTables = GetArrayValue(GetValue(oDbView,'tables'));
		if (aTables.length == 0)
		{
			return null;
		}
	
		
		var strDatabaseViewName = this.GetDatabaseViewName(strName);
		
		var grDbViewToDelete = new GlideRecord('sys_db_view');
		grDbViewToDelete.addQuery('name','=',strDatabaseViewName);
		grDbViewToDelete.query();
		while(grDbViewToDelete.next())
		{
			GlideRecordDelete(grDbViewToDelete);
		}
		
		var grDbView = new GlideRecord('sys_db_view');
		grDbView.initialize();
		grDbView.name = strDatabaseViewName;
		var strDbViewSysId = GlideRecordInsert(grDbView);
		if (strDbViewSysId == null)
		{
			return null;
		}
		
		for (var nTable = 0; nTable < aTables.length; nTable++)
		{
			var table = aTables[nTable];
			if (IsObject(table) == true)
			{
				var grDbViewTable = new GlideRecord('sys_db_view_table');
				grDbViewTable.initialize();
				grDbViewTable.active = true;
				grDbViewTable.view = strDbViewSysId;
				grDbViewTable.table = GetValue(table,'table');
				grDbViewTable.order = GetStringValue(GetValue(table,'order'));
				grDbViewTable.left_join = GetBoolValue(GetValue(table,'left_join'));
				grDbViewTable.variable_prefix = GetValue(table,'variable_prefix');
				grDbViewTable.where_clause = GetValue(table,'where_clause');
				var strDbViewTableSysId = GlideRecordInsert(grDbViewTable);
				
				if (IsValidSysId(strDbViewTableSysId))
				{
					var aFields = GetArrayValue(GetValue(table,'fields'));
					for (var nField = 0; nField < aFields.length; nField++)
					{
						var strField = aFields[nField];
						if (strField != '')
						{
							var grDbViewTableField = new GlideRecord('sys_db_view_table_field');
							grDbViewTableField.initialize();
							grDbViewTableField.field = strField;
							grDbViewTableField.view_table = strDbViewTableSysId;
							grDbViewTableField.table = GetValue(table,'table');
							var strDbViewTableFieldSysId = GlideRecordInsert(grDbViewTableField);
						}
					}
				}
				
			}
		}
		return strDbViewSysId;
	},	

	GetDatabaseViewPrefix:function()
	{
		var strPrefix = this.GetPrefix();
		return 'u_'+strPrefix.toLowerCase();
	},	
	
	GetDatabaseViewName:function(strName)
	{
		return this.GetDatabaseViewPrefix()+strName.toLowerCase();
	},
	
	GetAllDatabaseViews:function()
	{
		var aResult = [];
		var strPrefix = this.GetDatabaseViewPrefix();
		
		var grDbViews = new GlideRecord('sys_db_view');
		grDbViews.addQuery('name','STARTSWITH',strPrefix);
		grDbViews.orderBy('name');
		grDbViews.query();
		while (grDbViews.next())
		{
			var dbview = Clone(grDbViews);
			
			var aTables = [];
			
			var grDbViewTables = new GlideRecord('sys_db_view_table');
			grDbViewTables.addQuery('view','=',grDbViews.sys_id);
			grDbViewTables.query();
			while (grDbViewTables.next())
			{
				var table = Clone(grDbViewTables);
				
				var aFields = [];
				var grDbViewTableFields = new GlideRecord('sys_db_view_table_field');
				grDbViewTableFields.addQuery('view_table','=',grDbViewTables.sys_id);
				grDbViewTableFields.orderBy('field');
				grDbViewTableFields.query();
				while (grDbViewTableFields.next())
				{
					var field = Clone(grDbViewTableFields);
					aFields.push(field);
				}
				table['_fields'] = aFields;
				aTables.push(table);
			}
			dbview['_tables'] = aTables;
			aResult.push(dbview);
		}
		return aResult;
	},			
	
	GetDataBaseView: function(strName)
	{
		return this.GetRecord('sys_db_view','name',strName);
	},		
	
	
	
	CreateScriptInclude:function(strScope, strName, strScript, strAccess, strDescription)
	{
		strScope = GetStringValue(strScope);
		strName = GetStringValue(strName);
		strScript = GetStringValue(strScript);
		strAccess = GetStringValue(strAccess);
		strDescription = GetStringValue(strDescription);
		
		this.DeleteAllRecordsByName('sys_script_include','name',strName);

		return this.CreateRecord('sys_script_include',
			'name',
			strName,
			{
				sys_scope: strScope,
				script: strScript,
				access: strAccess,
				description: strDescription
			});
	},
	
	GetAllScriptIncludes:function()
	{
		return this.GetAllRecordsFromTable('sys_script_include','name');
	},
	
	GetScriptInclude: function(strName)
	{
		return this.GetRecord('sys_script_include','name',strName);
	},	
	
	
	CreateServicePortalWidget:function(strScope, strName, strDescription, strTemplate, strCss, strScript, strClientScript)
	{
		strScope = GetStringValue(strScope);
		strName = GetStringValue(strName);
		strDescription = GetStringValue(strDescription);
		strTemplate = GetStringValue(strTemplate);
		strCss = GetStringValue(strCss);
		strScript = GetStringValue(strScript);
		strClientScript = GetStringValue(strClientScript);
		
		this.DeleteAllRecordsByName('sp_widget','name',strName);

		return this.CreateRecord('sp_widget',
			'name',
			strName,
			{
				sys_scope: strScope,
				template: strTemplate,
				css: strCss,
				script: strScript,
				client_script: strClientScript
			});
	},
	
	GetAllServicePortalWidgets:function()
	{
		return this.GetAllRecordsFromTable('sp_widget','name');
	},
	
	GetServicePortalWidget: function(strName)
	{
		return this.GetRecord('sp_widget','name',strName);
	},		
	
	type: 'TestDataAPI'
	
	
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-05-13 14:53:39</sys_created_on>
        <sys_id>1796abb01b78d410a89720a8ec4bcb1e</sys_id>
        <sys_mod_count>197</sys_mod_count>
        <sys_name>TestDataAPI</sys_name>
        <sys_package display_value="DevTools" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevTools">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_script_include_1796abb01b78d410a89720a8ec4bcb1e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-10 08:41:52</sys_updated_on>
    </sys_script_include>
</record_update>
