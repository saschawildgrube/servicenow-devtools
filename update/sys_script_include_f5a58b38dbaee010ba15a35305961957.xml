<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_devtools.AppSanity</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Performs a number of changes to a scoped app's assets to maintain application sanity. E.g., the function removes the copied_from attribute in atf tests, removes unneccesary field level ACLs and removes the is_private flag from system properties.</description>
        <mobile_callable>false</mobile_callable>
        <name>AppSanity</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[function AppSanity(vApp)
{
	function Log(vValue)
	{
		x_snc_devtools.Log('AppSanity: '+RenderValue(vValue));
	}

	var grApp = GetAppRecord(vApp);
	if (grApp == false)
	{
		Log('Error: App not found!');
		return false;	
	}
	
	var	strAppSysId = GetStringValue(grApp.sys_id);

	Log('Checking dependencies with empty package_class field...');
	var grDep = new GlideRecord('x_snc_devtools_dependency');
	grDep.addQuery('sys_scope','=',strAppSysId);
	grDep.addQuery('package_class','=','');
	grDep.query();
	while (grDep.next())
	{
		Log('Updating dependency "'+GetStringValue(grDep.name)+'"');
		grDep.package_class = 'sys_app';
		GlideRecordUpdate(grDep);
	}

	Log('Checking dependencies with repository urls for non sys_app packages...');
	var grDep = new GlideRecord('x_snc_devtools_dependency');
	grDep.addQuery('sys_scope','=',strAppSysId);
	grDep.addQuery('package_class','!=','sys_app');
	grDep.addQuery('repo_url','!=','');
	grDep.query();
	while (grDep.next())
	{
		Log('Updating dependency "'+GetStringValue(grDep.name)+'"');
		grDep.repo_url = '';
		GlideRecordUpdate(grDep);
	}


	Log('Checking ATF tests with set copied_from field...');
	var grSAT = new GlideRecord('sys_atf_test');
	grSAT.addQuery('sys_scope','=',strAppSysId);
	grSAT.addQuery('copied_from','!=','');
	grSAT.query();
	while (grSAT.next())
	{
		Log('Updating test "'+GetStringValue(grSAT.name)+'"');
		grSAT.copied_from='';
		GlideRecordUpdate(grSAT);
	}

	Log('Checking ATF test steps...');
	var grSAS = new GlideRecord('sys_atf_step');
	grSAS.addQuery('sys_scope','=',strAppSysId);
	grSAS.addQuery('copied_from','!=','');
	grSAS.query();
	while (grSAS.next())
	{
		Log('Updating test step "'+GetStringValue(grSAS.description)+'" of test "'+GetStringValue(grSAS.test.getDisplayValue())+'"');
		grSAS.copied_from='';
		GlideRecordUpdate(grSAS);
	}
	
	
	Log('Checking test suite tests...');
	var grSysAtfTestSuiteTest = new GlideRecord('sys_atf_test_suite_test');
	grSysAtfTestSuiteTest.addQuery('sys_scope','=',strAppSysId);
	grSysAtfTestSuiteTest.addQuery('test_suite.sys_scope','!=',strAppSysId);
	grSysAtfTestSuiteTest.query();
	while (grSysAtfTestSuiteTest.next())
	{
		Log('Deleting test suite test record "'+grSysAtfTestSuiteTest.sys_id+'" of test suite "'+GetStringValue(grSysAtfTestSuiteTest.test_suite.getDisplayValue())+'" as scopes do not match.');
		GlideRecordDelete(grSysAtfTestSuiteTest);
	}		
	
	Log('Checking suite schedules left behind by API triggered suite executions...');
	var grSysAtfSuiteSchedules = new GlideRecord('sys_atf_schedule');
	grSysAtfSuiteSchedules.addQuery('sys_scope','=',strAppSysId);
	grSysAtfSuiteSchedules.addQuery('name','=','CICD adhoc schedule');
	grSysAtfSuiteSchedules.query();
	while (grSysAtfSuiteSchedules.next())
	{
		Log('Deleting suite schedule record "'+grSysAtfSuiteSchedules.sys_id+'".');
		GlideRecordDelete(grSysAtfSuiteSchedules);
	}		
	
	
	Log('Checking ACLs for useless field level operations...');
	var grSSA = new GlideRecord('sys_security_acl');
	grSSA.addQuery('sys_scope','=',strAppSysId);
	grSSA.addQuery('type','=','record'); // Type: Record
	grSSA.addQuery('name','CONTAINS','.'); // Field level
	var condition = grSSA.addQuery('operation','=','delete');
	condition.addOrCondition('operation','=','create');
	grSSA.query();
	while (grSSA.next())
	{
		Log('Deleting ACL: '+GetStringValue(grSSA.operation)+' / '+GetStringValue(grSSA.name));
		GlideRecordDelete(grSSA);
	}
	
	Log('Checking ACLs for unintended use of the snc_internal role...');
	var grSSA = new GlideRecord('sys_security_acl');
	grSSA.addQuery('sys_scope','=',strAppSysId);
	grSSA.query();
	while (grSSA.next())
	{
		// Get all roles associated to the ACL
		var grSSAR = new GlideRecord('sys_security_acl_role');
		grSSAR.addQuery('sys_security_acl','=',grSSA.sys_id);
		grSSAR.query();
		if (grSSAR.getRowCount() > 1)
		{
			var bContinue = true;
			while(bContinue && grSSAR.next())
			{
				var grRole = GetRecord('sys_user_role',grSSAR.sys_user_role);
				if (grRole != false)
				{
					if (GetStringValue(grRole.name) == 'snc_internal')
					{
						Log('Deleting snc_internal role from ACL: '+GetStringValue(grSSA.operation)+' / '+GetStringValue(grSSA.name));
						GlideRecordDelete(grSSAR);
						bContinue = false;
					}
				}
			}
		}	
		
		
	}
		
	
	
	Log('Checking properties with is_private set to true...');
	var grSP = new GlideRecord('sys_properties');
	grSP.addQuery('sys_scope','=',strAppSysId);
	grSP.addQuery('is_private','=','true');
	grSP.query();
	while (grSP.next())
	{
		Log('Updating property: '+GetStringValue(grSP.name));
		grSP.is_private = false;
		GlideRecordUpdate(grSP);
	}

	Log('Checking global properties erroneously associated with the application...');
	var grSP = new GlideRecord('sys_properties');
	grSP.addQuery('sys_scope','=',strAppSysId);
	var condition = grSP.addQuery('name','STARTSWITH','glide.');
	condition.addOrCondition('name','STARTSWITH','sn_appclient.');
	grSP.query();
	while (grSP.next())
	{
		Log('Updating property: '+GetStringValue(grSP.name));
		grSP.sys_scope = 'global';
		grSP.sys_package = 'global';
		GlideRecordUpdate(grSP);
	}	
	
	Log('Checking app modules with inconsistent sys_name...');
	var grAM = new GlideRecord('sys_app_module');
	grAM.addQuery('sys_scope','=',strAppSysId);
	grAM.query();
	while (grAM.next())
	{
		if (grAM.sys_name != grAM.title)
		{
			Log('Updating module: '+GetStringValue(grAM.title));
			grAM.sys_name = grAM.title;
			GlideRecordUpdate(grAM);
		}
	}	
	
	Log('Removing sys_index records...');
	var grSI = new GlideRecord('sys_index');
	grSI.addQuery('sys_scope','=',strAppSysId);
	grSI.query();
	GlideRecordDeleteMultiple(grSI);

	Log('Checking "async" business rules...');
	var grBR = new GlideRecord('sys_script');
	grBR.addQuery('sys_scope','=',strAppSysId);
	grBR.addQuery('when','=','async');
	grBR.query();
	while (grBR.next())
	{
		grBR.when = 'async_always';
		Log('Updating business rule: '+RenderRecordSummary(grBR));
		GlideRecordUpdate(grBR);
	}
	
	Log('Checking sys_metadata records for sys_scope vs. sys_package discrepancies...');
	var grMetaData = new GlideRecord('sys_metadata');
	grMetaData.addQuery('sys_scope','=',strAppSysId);
	grMetaData.addQuery('sys_package','=','global');
	grMetaData.query();
	while (grMetaData.next())
	{
		grMetaData.sys_package = grMetaData.sys_scope;
		Log('Updating record: '+ RenderRecordSummary(grMetaData));
		GlideRecordUpdate(grMetaData);
	}

	Log('Checking sys_metadata records for non-empty sys_policy');
	var grMetaData = new GlideRecord('sys_metadata');
	grMetaData.addQuery('sys_scope','=',strAppSysId);
	grMetaData.addQuery('sys_policy','!=','');
	grMetaData.query();
	while (grMetaData.next())
	{
		grMetaData.sys_policy = '';
		Log('Updating record: '+ RenderRecordSummary(grMetaData));
		GlideRecordUpdate(grMetaData);
	}	

	Log('Cleaning sys_push_notif_app_install records...');
	var grRecords = new GlideRecord('sys_push_notif_app_install');
	grRecords.addQuery('sys_scope','=',strAppSysId);
	grRecords.query();
	GlideRecordDeleteMultiple(grRecords);
	
	Log('Fix issues with PA Dashboards documented in KB0814656');
	RecordDelete('sys_grid_canvas','38965b7fdb330110b652edb305961986');
	RecordDelete('sys_grid_canvas','a4961b7fdb330110b652edb3059619de');
	RecordDelete('sys_grid_canvas','9e46177fdb330110b652edb3059619cd');
	RecordDelete('sys_grid_canvas','38965b7fdb330110b652edb305961972');
	RecordDelete('sys_grid_canvas','275454581b5965105b76777d8b4bcbc4');

	Log('Cleanup item_option_new "save_script" fields...');
	grDict = GetDictionaryRecord('item_option_new','save_script');
	var strDefault = '';
	if (IsValidRecord(grDict) == true)
	{
		strDefault = GetStringValue(grDict.default_value);
	}
	if (strDefault != '')
	{
		var grION = new GlideRecord('item_option_new');
		grION.addQuery('sys_scope','=',strAppSysId);
		grION.addQuery('save_script','=',strDefault);
		grION.query();
		while (grION.next())
		{
			grION.save_script = '';
			Log('Updating record: ' + RenderRecordSummary(grION));
			GlideRecordUpdate(grION);
		}

	}

	Log('Checking sys_script records for invalid "null" filter_condition...');
	var grBR = new GlideRecord('sys_script');
	grBR.addQuery('sys_scope','=',strAppSysId);
	grBR.addQuery('filter_condition','=','null');
	grBR.query();
	while (grBR.next())
	{
		Log('Updating record: '+ RenderRecordSummary(grBR));
		RecordSetValue('sys_script',grBR.sys_id,'filter_condition','');
	}
	
	Log('Deleting sys_ui_list records referring to non-existing tables...');
	var grUL = new GlideRecord('sys_ui_list');
	grUL.addQuery('sys_scope','=',strAppSysId);
	grUL.query();
	while (grUL.next())
	{
		var strTable = grUL.getValue('name');
		
		if (IsValidTable(strTable) == false)
		{
			Log('sys_ui_list record refers to an invalid table: '+ RenderRecordSummary(grUL));
			Log('Table '+strTable+' does not exist. Deleting record!');
			RecordDelete('sys_ui_list',grUL.sys_id);
		}
	}	

	Log('Moving sys_ui_list records associated to a user to the global scope...');
	var grUIL = new GlideRecord('sys_ui_list');
	grUIL.addQuery('sys_scope','=',strAppSysId);
	grUIL.addQuery('sys_user','!=','');
	grUIL.query();
	while (grUIL.next())
	{
		Log('Moving record: '+ RenderRecordSummary(grUIL));
		RecordSetValue('sys_ui_list',grUIL.sys_id,'sys_scope','global');
	}		

	Log('Moving sn_pipeline_environment records to the global scope...');
	if (IsValidTable('sn_pipeline_environment') == true)
	{
		
		var grPE = new GlideRecord('sn_pipeline_environment');
		grPE.addQuery('sys_scope','=',strAppSysId);
		grPE.query();
		while (grPE.next())
		{
			Log('Moving record: '+ RenderRecordSummary(grPE));
			RecordSetValue('sn_pipeline_environment',grPE.sys_id,'sys_scope','global');
		}		
	}

	Log('Moving sn_pipeline_pipeline records to the global scope...');
	if (IsValidTable('sn_pipeline_pipeline') == true)
	{
		var grPP = new GlideRecord('sn_pipeline_pipeline');
		grPP.addQuery('sys_scope','=',strAppSysId);
		grPP.query();
		while (grPP.next())
		{
			Log('Moving record: '+ RenderRecordSummary(grPP));
			RecordSetValue('sn_pipeline_pipeline',grPP.sys_id,'sys_scope','global');
		}		
	}

	
	Log('Completed!');
	
	return true;
	
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-02-23 08:18:05</sys_created_on>
        <sys_id>f5a58b38dbaee010ba15a35305961957</sys_id>
        <sys_mod_count>88</sys_mod_count>
        <sys_name>AppSanity</sys_name>
        <sys_package display_value="DevTools" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevTools">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_script_include_f5a58b38dbaee010ba15a35305961957</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-01-30 13:57:57</sys_updated_on>
    </sys_script_include>
</record_update>
