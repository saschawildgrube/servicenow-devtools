<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_devtools.AppBuilder</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>AppBuilder adds various application files to a scoped app. The function should be mostly idempotent.</description>
        <mobile_callable>false</mobile_callable>
        <name>AppBuilder</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[function AppBuilder(vApp, vParentApp, strAppMenuSeparator, nAppMenuOrderStart)
{
	var strAppScope = '';	
	var strParentAppScope = '';
	
	function Log(strText)
	{
		var strContext = '';
		if (strAppScope != '')
		{
			strContext = strAppScope;
			if (strParentAppScope != '')
			{
				strContext += ' (plugin of '+strParentAppScope+')';
			}
			strContext += ': ';
		}
		x_snc_devtools.Log('DevTools AppBuilder: '+strContext+strText);
	}
	
	strAppMenuSeparator = GetStringValue(strAppMenuSeparator);
	nAppMenuOrderStart = GetIntegerValue(nAppMenuOrderStart);
	
	var grApp = GetAppRecord(vApp);
	if (grApp == false)
	{
		Log('Error: Could not load app: '+vApp);
		return false;
	}

	if (grApp.scope == 'global')
	{
		Log('Error: AppBuilder does not support global apps!');
		return false;
	}

	var strAppSysId = GetStringValue(grApp.sys_id);
	strAppScope = GetStringValue(grApp.scope);	

	if (strAppScope == 'x_snc_devtools')
	{
		Log('Error: Do not use AppBuilder() on DevTools itself!');
		return false;
	}

	var grParentApp = null;
	var strParentAppSysId = '';
	if (vParentApp != null)
	{
		grParentApp = GetAppRecord(vParentApp);
		if (grParentApp == false)
		{
			Log('Error: Could not load parent app: '+vParentApp);
			return false;		
		}
		strParentAppSysId = GetStringValue(grParentApp.sys_id); 
		strParentAppScope = GetStringValue(grParentApp.scope); 
	}
	
	var strAppName = GetAppName(strAppSysId);
	var strParentAppName = GetAppName(strParentAppSysId);
	
	Log('Working on app "'+strAppName+'"');
	
	var grAppDevTools = GetAppRecord('x_snc_devtools');
	var strDevToolsVersion = '';
	if (grAppDevTools != false)
	{
		strDevToolsVersion = GetStringValue(grAppDevTools.version);
	}

	
	Log('Adding system property "active"');
	RecordQueryOrInsert('sys_properties',
		{
			sys_scope: strAppSysId,
			name: strAppScope+'.active'	
		},
		{
			suffix: 'active',
			description: 'Controls if the '+strAppName+' application is active.',
			type: 'boolean',
			value: 'true'
		},
		false);
	
	
	Log('Adding system property "logging.verbosity"');
	RecordQueryOrInsert('sys_properties',
		{
			sys_scope: strAppSysId,
			name: strAppScope+'.logging.verbosity'	
		},
		{
			suffix: 'logging.verbosity',
			description: 'Controls the verbosity of log output produced by the '+strAppName+' application.',
			type: 'choicelist',
			choices: 'Debug=debug,Info=info,Warn=warn,Error=error',
			value: 'info'
		},
		false);	

		
	Log('Adding script include "AppGetProperty"...');
	RecordQueryOrInsert('sys_script_include',
		{
			sys_scope: strAppSysId,
			name: 'AppGetProperty'
		},
		{
			description: 'Gets a system property of this application.',
			access: 'public',
			caller_access: '1',
			script:
				"function AppGetProperty(strSuffix)\n"
				+"{\n"
				+"\treturn x_snc_devtools.GetProperty('"+strAppScope+".'+strSuffix);\n"
				+"}\n"
		},
		false);	


	Log('Adding script include "IsActive"...');
	RecordQueryOrInsert('sys_script_include',
		{
			sys_scope: strAppSysId,
			name: 'IsActive'
		},
		{
			description: 'Returns true if the application is active, otherwise false.',
			access: 'public',
			caller_access: '1',
			script:
				"function IsActive()\n"
				+"{\n"
				+"\treturn AppGetProperty('active');\n"
				+"}"
		},
		false);		
	
	
	Log('Adding script include "LogError"...');
	RecordQueryOrInsert('sys_script_include',
		{
			sys_scope: strAppSysId,
			name: 'LogError'
		},
		{
			description: 'Produces an error log output in the application log.',
			access: 'public',
			caller_access: '1',
			script:
				"function LogError(vPayload)\n"
				+"{\n"
				+"\tgs.error(x_snc_devtools.PrepareLogError(vPayload));\n"
				+"}"
		},
		false);
	
	Log('Adding script include "LogWarning"...');
	RecordQueryOrInsert('sys_script_include',
		{
			sys_scope: strAppSysId,
			name: 'LogWarning'
		},
		{
			description: 'Produces a warning log output in the application log.',
			access: 'public',
			caller_access: '1',
			script:
				"function LogWarning(vPayload)\n"
				+"{\n"
				+"\tgs.warn(x_snc_devtools.PrepareLogWarning(vPayload));\n"
				+"}"
		},
		false);	
	
	Log('Adding script include "Log"...');
	RecordQueryOrInsert('sys_script_include',
		{
			sys_scope: strAppSysId,
			name: 'Log'
		},
		{
			description: 'Produces a log output in the application log.',
			access: 'public',
			caller_access: '1',
			script:
				"function Log(vPayload)\n"
				+"{\n"
				+"\tgs.info(x_snc_devtools.PrepareLogInfo(vPayload));\n"
				+"}"
		},
		false);
	
	
	Log('Adding script include "Debug"...');
	RecordQueryOrInsert('sys_script_include',
		{
			sys_scope: strAppSysId,
			name: 'Debug'
		},
		{
			description: 'Produces a log output in the application log using the DevTools Debug function.',
			access: 'public',
			caller_access: '1',
			script:
				"function Debug(vPayload)\n"
				+"{\n"
				+"\tgs.debug(x_snc_devtools.PrepareLogDebug(vPayload));\n"
				+"}"
		},
		false);	
	



	Log('Adding script include "AppSetProperty"...');
	RecordQueryOrInsert('sys_script_include',
		{
			sys_scope: strAppSysId,
			name: 'AppSetProperty'
		},
		{
			description: 'Sets a system property of this application.',
			access: 'public',
			caller_access: '1',
			script:
				"function AppSetProperty(strSuffix,vValue)\n"
				+"{\n"
				+"\treturn x_snc_devtools.SetProperty('"+strAppScope+".'+strSuffix,vValue);\n"
				+"}\n"
		},
		false);		
	
	
	
	Log('Adding script include "AppGetDependencies"...');
	var grSSI = new GlideRecord('sys_script_include');
	grSSI.addQuery('sys_scope','=',strAppSysId);
	grSSI.addQuery('name','=','AppGetDependencies');
	grSSI.query();
	if (grSSI.next() == false)
	{
		Log('Adding script include "AppGetDependencies"');
		var grSSI = new GlideRecord('sys_script_include');
		grSSI.initialize();
		grSSI.name = 'AppGetDependencies';
		grSSI.description = "Retrieves information about the app's dependencies to other apps and required versions.";
		grSSI.sys_scope = strAppSysId;
		grSSI.access = 'public';
		grSSI.caller_access = '1';
		grSSI.script =
			"function AppGetDependencies()\n"
			+"{\n"
			+"\treturn x_snc_devtools.GetValue(\n"
			+"\t\tx_snc_devtools.GetPackageDependencyTree(\n"
			+"\t\t\t'"+strAppScope+"'),\n"
			+"\t\t'_dependencies');\n"		
			+"}";
		GlideRecordInsert(grSSI);
	}

	Log('Adding the dependency record to DevTools...');
	RecordQueryOrInsert('x_snc_devtools_dependency',
		{
			sys_scope: strAppSysId,
			dependency: grAppDevTools.sys_id
		},
		{
			sys_scope: strAppSysId,
			dependency: grAppDevTools.sys_id
		},false);

	
	// Adding script include "AppSetDefaults"
	var grSSI = new GlideRecord('sys_script_include');
	grSSI.addQuery('sys_scope','=',strAppSysId);
	grSSI.addQuery('name','=','AppSetDefaults');
	grSSI.query();
	if (grSSI.next() == false)
	{
		Log('Adding script include "AppSetDefaults"');
		var grSSI = new GlideRecord('sys_script_include');
		grSSI.initialize();
		grSSI.name = 'AppSetDefaults';
		grSSI.description = "Sets all system properties to default values.";
		grSSI.sys_scope = strAppSysId;
		grSSI.access = 'public';
		grSSI.caller_access = '1';
		grSSI.script =
			"function AppSetDefaults()\n"
			+"{\n"
			+"\tAppSetProperty('active','true');\n"
			+"\tAppSetProperty('logging.verbosity','info');\n"
			+"\t\n"
			+"\t// TODO: Add more code to set default values (for properties)...\n"
			+"}\n";
		GlideRecordInsert(grSSI);
	}	
	
	
	
	Log('Adding script include "AppInstall"...');
	RecordQueryOrInsert('sys_script_include',
		{
			sys_scope: strAppSysId,
			name: 'AppInstall'
		},
		{
			description: 'This script installs '+strAppName+'.',
			access: 'public',
			caller_access: '1',
			script:
				"function AppInstall()\n"
				+"{\n"
				+"\tvar installer = new x_snc_devtools.InstallerAPI(x_snc_devtools.GetAppName('"+strAppScope+"'));\n"
				+"\t\n"
				+"\t// TODO: Add your installation code here...\n"
				+"\t\n"
				+"\treturn installer.Finish();\n"
				+"}\n"
		},
		false);			

	
	// Adding script include "DevTools" which implements the extension point
	var strDevToolsScriptInclude = false;
	var strScript = RecordGetValue('sys_extension_point','e3a183be1bae7010edf3642aab4bcbdc','example');
	strScript = strScript.replaceAll('x_this_app_scope',strAppScope);
	var grSSI = new GlideRecord('sys_script_include');
	grSSI.addQuery('sys_scope','=',strAppSysId);
	grSSI.addQuery('name','=','DevTools');
	grSSI.query();
	if (grSSI.getRowCount() != 0)
	{
		Log('Script include "DevTools" already exists. Updating it...');
		grSSI.next();
		grSSI.script = strScript;
		GlideRecordUpdate(grSSI);
		strDevToolsScriptInclude = grSSI.sys_id;
	}
	else
	{
		Log('Adding script include "DevTools"...');
		var grSSI = new GlideRecord('sys_script_include');
		grSSI.initialize();
		grSSI.name = 'DevTools';
		grSSI.description = "Implements the extension point for DevTools.";
		grSSI.sys_scope = strAppSysId;
		grSSI.access = 'public';
		grSSI.caller_access = '1';
		grSSI.script = strScript;
		strDevToolsScriptInclude = GlideRecordInsert(grSSI);
	}
	Log('Script include "DevTools": '+RenderValue(strDevToolsScriptInclude));

	// Adding extension point instance
	var strEPI = false;
	var grEPI = new GlideRecord('sys_extension_instance');
	grEPI.addQuery('sys_scope','=',strAppSysId);
	grEPI.addQuery('point','=','x_snc_devtools.DevTools');
	grEPI.query();
	if (grEPI.getRowCount() != 0)
	{
		grEPI.next();
		Log('Extension point instance for "DevTools" already exists: '+grEPI.sys_id);
	}
	else
	{
		Log('Adding extension point instance for "DevTools"...');
		var grEPI = new GlideRecord('sys_extension_instance');
		grEPI.initialize();
		grEPI.active = true;
		grEPI.point = 'x_snc_devtools.DevTools';
		grEPI.sys_scope = strAppSysId;
		grEPI.script_include = strDevToolsScriptInclude;
		grEPI.order = 100;
		strEPI = GlideRecordInsert(grEPI);
		Log('Adding extension point instance for "DevTools": '+RenderValue(strEPI));
	}
	
	
	
	// Adding script include "DevToolsGetParentRecord"
	var grSSI = new GlideRecord('sys_script_include');
	grSSI.addQuery('sys_scope','=',strAppSysId);
	grSSI.addQuery('name','=','DevToolsGetParentRecord');
	grSSI.query();
	if (grSSI.getRowCount() != 0)
	{
		Log('Script include "DevToolsGetParentRecord" already exists...');
	}
	else
	{
		Log('Adding script include "DevToolsGetParentRecord"...');
		var grSSI = new GlideRecord('sys_script_include');
		grSSI.initialize();
		grSSI.name = 'DevToolsGetParentRecord';
		grSSI.description = "The DevToolsGetParentRecord function is called by the DevTools extension point instance class and returns a parent record for the given record if it can be determined.";
		grSSI.sys_scope = strAppSysId;
		grSSI.access = 'public';
		grSSI.caller_access = '1';
		grSSI.script = 
			"function DevToolsGetParentRecord(grRecord)\n"
			+"{\n"
			+"\t// TODO: Modify or remove this code (and return false)...\n"
			+"\n"
			+"\tvar GetRecord = x_snc_devtools.GetRecord;\n"
			+"\tvar strTable = grRecord.getRecordClassName();\n"
			+"\n"
			+"\tif (strTable == 'incident_task')\n"
			+"\t{\n"
			+"\t\treturn GetRecord('incident',grRecord.incident);\n"
			+"\t}\n"
			+"\n"
			+"\treturn false;\n"
			+"}";
		strSSI = GlideRecordInsert(grSSI);
		Log('Script include "DevToolsGetParentRecord": '+RenderValue(strSSI));	
	}	
	

	// Adding script include "DevToolsGetLinkDirectory"
	var grSSI = new GlideRecord('sys_script_include');
	grSSI.addQuery('sys_scope','=',strAppSysId);
	grSSI.addQuery('name','=','DevToolsGetLinkDirectory');
	grSSI.query();
	if (grSSI.getRowCount() != 0)
	{
		Log('Script include "DevToolsGetLinkDirectory" already exists...');
	}
	else
	{
		Log('Adding script include "DevToolsGetLinkDirectory"...');
		var grSSI = new GlideRecord('sys_script_include');
		grSSI.initialize();
		grSSI.name = 'DevToolsGetLinkDirectory';
		grSSI.description = "The DevToolsGetLinkDirectory function is called by the DevTools extension point instance class and returns an extended (or modified) link directory object that serves as the basis for the DevTools Link page.";
		grSSI.sys_scope = strAppSysId;
		grSSI.access = 'public';
		grSSI.caller_access = '1';
		grSSI.script = 
			"function DevToolsGetLinkDirectory(linkdirectory)\n"
			+"{\n"
			+"\t// TODO: Create your own link directory category, add your own tables and links or remove this code (and return linkdirectory)...\n"
			+"\t\n"
			+"\tlinkdirectory['"+strAppName+"'] =\n"
			+"\t[\n"
			+"\t\t{\n"
			+"\t\t\ttable: 'x_snc_devtools_test'\n"
			+"\t\t}\n"
			+"\t];\n"
			+"\n"
			+"\treturn linkdirectory;\n"
			+"}";
		strSSI = GlideRecordInsert(grSSI);
		Log('Script include "DevToolsGetLinkDirectory": '+RenderValue(strSSI));	
	}	

	
	// Adding script include "DevToolsGetParentRecord"
	var grSSI = new GlideRecord('sys_script_include');
	grSSI.addQuery('sys_scope','=',strAppSysId);
	grSSI.addQuery('name','=','DevToolsGetFormatConfig');
	grSSI.query();
	if (grSSI.getRowCount() != 0)
	{
		Log('Script include "DevToolsGetFormatConfig" already exists...');
	}
	else
	{
		Log('Adding script include "DevToolsGetFormatConfig"...');
		var grSSI = new GlideRecord('sys_script_include');
		grSSI.initialize();
		grSSI.name = 'DevToolsGetFormatConfig';
		grSSI.description = "The DevToolsGetFormatConfig function is called by the DevTools extension point instance class and returns an object with field formatting information.";
		grSSI.sys_scope = strAppSysId;
		grSSI.access = 'public';
		grSSI.caller_access = '1';
		grSSI.script = 
			"function DevToolsGetFormatConfig(grRecord)\n"
			+"{\n"
			+"\t// TODO: Adapt this code to support your tables or just return false...\n"
			+"\n"
			+"\tvar strTable = grRecord.getRecordClassName();\n"
			+"\n"
			+"\tif (strTable == 'x_your_table')\n"
			+"\t{\n"
			+"\t\tvar formatconfig = {\n"
			+"\t\t\tperformance: {\n"
			+"\t\t\t\tdecimals: 2,\n"
			+"\t\t\t\tpostfix: ' %'\n"
			+"\t\t\t}\n"		
			+"\t\t};\n"
			+"\t\treturn formatconfig;\n"
			+"\t}\n"
			+"\n"
			+"\treturn false;\n"
			+"}";
		strSSI = GlideRecordInsert(grSSI);
		Log('Script include "DevToolsGetFormatConfig": '+RenderValue(strSSI));	
	}	
	
	// Adding script include "DevToolsGetApplicationStatus"
	var grSSI = new GlideRecord('sys_script_include');
	grSSI.addQuery('sys_scope','=',strAppSysId);
	grSSI.addQuery('name','=','DevToolsGetApplicationStatus');
	grSSI.query();
	if (grSSI.getRowCount() != 0)
	{
		Log('Script include "DevToolsGetApplicationStatus" already exists...');
	}
	else
	{
		Log('Adding script include "DevToolsGetApplicationStatus"...');
		var grSSI = new GlideRecord('sys_script_include');
		grSSI.initialize();
		grSSI.name = 'DevToolsGetApplicationStatus';
		grSSI.description = 'The function DevToolsGetApplicationStatus is called by the DevTools extension point instance class and returns the application status object with additional status information to be displayed on the "DevTools Application Overview" page.';
		grSSI.sys_scope = strAppSysId;
		grSSI.access = 'public';
		grSSI.caller_access = '1';
		grSSI.script =
			"function DevToolsGetApplicationStatus(status)\n"
			+"{\n"
			+"\t// TODO: Adapt this code to add more columns to the DevTools application overview page (or just return status)...\n"
			+"\n"
			+"\tvar GetValue = x_snc_devtools.GetValue;\n"		
			+"\tvar SetValue = x_snc_devtools.SetValue;\n"		
			+"\tvar GetKeys = x_snc_devtools.GetKeys;\n"
			+"\tvar GetAppRecord = x_snc_devtools.GetAppRecord;\n"
			+"\t\n"
			+"\t// Define a new column 'demo'\n"
			+"\tSetValue('"+strAppName+"',status,'columns','demo','header');\n"
			+"\t\n"
			+"\tvar aApps = GetKeys(GetValue(status,'applications'));\n"
			+"\tfor (var nApp = 0; nApp < aApps.length; nApp++)\n"
			+"\t{\n"
			+"\t\tvar grApp = GetAppRecord(aApps[nApp]);\n"
			+"\t\t// TODO: Add some meaningful status information or useful links for each app:\n"
			+"\t\tSetValue('TODO: Add some relevant info about app '+grApp.name,status,'applications',aApps[nApp],'demo');\n"
			+"\t}\n"
			+"\t\n"
			+"\treturn status;\n"
			+"}";
		strSSI = GlideRecordInsert(grSSI);
		Log('Script include "DevToolsGetApplicationStatus": '+RenderValue(strSSI));	
	}

	
	// Adding script include "DevToolsRenderDebugDump"
	var grSSI = new GlideRecord('sys_script_include');
	grSSI.addQuery('sys_scope','=',strAppSysId);
	grSSI.addQuery('name','=','DevToolsRenderDebugDump');
	grSSI.query();
	if (grSSI.getRowCount() != 0)
	{
		Log('Script include "DevToolsRenderDebugDump" already exists...');
	}
	else
	{
		Log('Adding script include "DevToolsRenderDebugDump"...');
		var grSSI = new GlideRecord('sys_script_include');
		grSSI.initialize();
		grSSI.name = 'DevToolsRenderDebugDump';
		grSSI.description = 'The function DevToolsRenderDebugDump is called by the DevTools extension point instance class and returns additional debug information provided by the application.';
		grSSI.sys_scope = strAppSysId;
		grSSI.access = 'public';
		grSSI.caller_access = '1';
		grSSI.script =
			"function DevToolsRenderDebugDump()\n"
			+"{\n"
			+"\t// TODO: Create additional debug information specific to this app...\n"
			+"\t\n"
			+"\treturn '';\n"
			+"}";
		strSSI = GlideRecordInsert(grSSI);
		Log('Script include "DevToolsRenderDebugDump": '+RenderValue(strSSI));	
	}

	
	// Adding script include "DevToolsGetInstancePipelineName"
	var grSSI = new GlideRecord('sys_script_include');
	grSSI.addQuery('sys_scope','=',strAppSysId);
	grSSI.addQuery('name','=','DevToolsGetInstancePipelineName');
	grSSI.query();
	if (grSSI.getRowCount() != 0)
	{
		Log('Script include "DevToolsGetInstancePipelineName" already exists...');
	}
	else
	{
		Log('Adding script include "DevToolsGetInstancePipelineName"...');
		var grSSI = new GlideRecord('sys_script_include');
		grSSI.initialize();
		grSSI.name = 'DevToolsGetInstancePipelineName';
		grSSI.description = 'The function DevToolsGetInstancePipelineName is called by the DevTools extension point instance class and returns the pipeline name of an instance based on the given actual name.';
		grSSI.sys_scope = strAppSysId;
		grSSI.access = 'public';
		grSSI.caller_access = '1';
		grSSI.script =
			"function DevToolsGetInstancePipelineName(strInstanceName)\n"
			+"{\n"
			+"\t// TODO: Create the specific mapping of instance names to pipeline instance names...\n"
			+"\t\n"
			+"\tswitch (strInstanceName)\n"
			+"\t{\n"
			+"\t\tcase 'acme':\n"
			+"\t\t\treturn 'prod';\n"
			+"\t\tcase 'acmetest':\n"
			+"\t\t\treturn 'test';\n"
			+"\t\tcase 'acmedev':\n"
			+"\t\t\treturn 'dev';\n"
			+"\t\tdefault:\n"
			+"\t}\n"
			+"\t\n"
			+"\treturn '';\n"
			+"}";
		strSSI = GlideRecordInsert(grSSI);
		Log('Script include "DevToolsGetInstancePipelineName": '+RenderValue(strSSI));	
	}	
	

	// Adding script include "DevToolsPrompt"
	var grSSI = new GlideRecord('sys_script_include');
	grSSI.addQuery('sys_scope','=',strAppSysId);
	grSSI.addQuery('name','=','DevToolsPrompt');
	grSSI.query();
	if (grSSI.getRowCount() != 0)
	{
		Log('Script include "DevToolsPrompt" already exists...');
	}
	else
	{
		Log('Adding script include "DevToolsPrompt"...');
		var grSSI = new GlideRecord('sys_script_include');
		grSSI.initialize();
		grSSI.name = 'DevToolsPrompt';
		grSSI.description = "The function DevToolsPrompt is called by the DevTools extension point instance class and overrides the default behavior of the Prompt() function that uses the Generic AI Controller plugin's generic prompt capability.";
		grSSI.sys_scope = strAppSysId;
		grSSI.access = 'public';
		grSSI.caller_access = '1';
		grSSI.script =
			"function DevToolsPrompt(vPrompt)\n"
			+"{\n"
			+"\t// TODO: Implement integration with a LLM API...\n"
			+"\t\n"
			+"\treturn false;\n"
			+"}";
		strSSI = GlideRecordInsert(grSSI);
		Log('Script include "DevToolsPrompt": '+RenderValue(strSSI));	
	}	


	// Adding script include "DevToolsIsTechnicalUser"
	var grSSI = new GlideRecord('sys_script_include');
	grSSI.addQuery('sys_scope','=',strAppSysId);
	grSSI.addQuery('name','=','DevToolsIsTechnicalUser');
	grSSI.query();
	if (grSSI.getRowCount() != 0)
	{
		Log('Script include "DevToolsIsTechnicalUser" already exists...');
	}
	else
	{
		Log('Adding script include "DevToolsIsTechnicalUser"...');
		var grSSI = new GlideRecord('sys_script_include');
		grSSI.initialize();
		grSSI.name = 'DevToolsIsTechnicalUser';
		grSSI.description = "The DevToolsIsTechnicalUser function is called by the DevTools extension point instance class and should return true if the given grUser GlideRecord object represents a valid technical user.";
		grSSI.sys_scope = strAppSysId;
		grSSI.access = 'public';
		grSSI.caller_access = '1';
		grSSI.script = 
			"function DevToolsIsTechnicalUser(grUser)\n"
			+"{\n"
			+"\t// TODO: Modify or remove this code - return true if the given grUser is a valid technical user...\n"
			+"\n"
			+"\treturn false;\n"
			+"}";
		strSSI = GlideRecordInsert(grSSI);
		Log('Script include "DevToolsIsTechnicalUser": '+RenderValue(strSSI));	
	}		



	Log('Adding UI Page "Manual"...');
	var strHtml = RecordGetValue('sys_ui_page','790addc91b584d90edf3642aab4bcbb6','html');  // template_manual ui page
	var strScopeOrSysId = strAppScope;
	if (strScopeOrSysId == 'global')
	{
		strScopeOrSysId = strAppSysId;
	}
	strHtml = strHtml.replace('%APP_SCOPE_OR_SYS_ID%',strScopeOrSysId);
	RecordQueryOrInsert('sys_ui_page',
		{
			sys_scope: strAppSysId,
			name: 'manual'
		},
		{
			html: strHtml
		},
		false);		
	
	
	
	Log('Adding test suite...');
	var strTestSuiteSysId = RecordQueryOrInsert('sys_atf_test_suite',
		{
			sys_scope: strAppSysId,
			name: strAppName
		},
		{
		},
		false);		

	
	if (IsValidSysId(strTestSuiteSysId))
	{
		// Adding Test "Installation"
		var strTestInstallationSysId = RecordQueryOrInsert('sys_atf_test',
			{
				name: strAppName+' - Installation',
				sys_scope: strAppSysId
			},
			{},
			false);
		if (IsValidSysId(strTestInstallationSysId) == false)
		{
			Log('Failed to add test "Installation".');
		}
		else
		{
			Log('Test "Installation" has been added.');
			
			// Adding test "Installation" to test suite
			var strTestSuiteTestsysId = RecordQueryOrInsert('sys_atf_test_suite_test',
				{
					sys_scope: strAppSysId,
					test: strTestInstallationSysId,
					test_suite: strTestSuiteSysId,
				},
				{
					order: 1
				},
				false);
		}

		
		
		
		// Adding Test "Implementation"
		var strTestImplementationSysId = RecordQueryOrInsert('sys_atf_test',
			{
				name: strAppName+' - Implementation',
				sys_scope: strAppSysId
			},
			{},
			false);
		if (IsValidSysId(strTestImplementationSysId) == false)
		{
			Log('Failed to add test "Implementation".');
		}
		else
		{
			Log('Test "Implementation" has been added.');
			
			// Adding test "Implementation" to test suite
			var strTestSuiteTestsysId = RecordQueryOrInsert('sys_atf_test_suite_test',
				{
					sys_scope: strAppSysId,
					test: strTestImplementationSysId,
					test_suite: strTestSuiteSysId,
				},
				{
					order: 2
				},
				false);
		}
		
	}
	
	
	var strAppMenuSysId = '';
	
	if (strParentAppScope == '') // The default: a standalone application
	{
		Log('Adding application menu...');
		strAppMenuSysId = RecordQueryOrInsert('sys_app_application',
			{
				sys_scope: strAppSysId,
				device_type: 'browser',
				title: strAppName
			},
			{
				active: true,
				category: 'e0355b31ef303000a61d5a3615c0fb78', // "Custom Applications"
				hint: grApp.short_description,
				description: grApp.short_description
			},
			false);
		
		
	}
	else // A plugin! The parent app should have it's own application menu, and the app is embedding itself into it
	{
		Log('Searching for application menu of the parent app...');
		var grAppMenu = new GlideRecord('sys_app_application');
		grAppMenu.addQuery('sys_scope','=',strParentAppSysId);
		grAppMenu.addQuery('device_type','=','browser');
		grAppMenu.addQuery('title','=',strParentAppName);
		grAppMenu.query();
		if (grAppMenu.next() == true)
		{
			strAppMenuSysId = GetStringValue(grAppMenu.sys_id);
		}
	}
	
	if (IsValidSysId(strAppMenuSysId) == false)
	{
		Log('No application menu is available. No application menu modules will be added!');
	}
	else
	{
		


	
/*	
	// Adding module "Options"
	var grSAM = new GlideRecord('sys_app_module');
	grSAM.addQuery('sys_scope','=',strAppSysId);
	grSAM.addQuery('title','CONTAINS','Options');
	grSAM.query();
	if (grSAM.next() == false)
	{
		Log('Adding module "Options"');
		var grSAM = new GlideRecord('sys_app_module');
		grSAM.initialize();
		grSAM.title = 'Options';
		grSAM.sys_scope = strAppSysId;
		grSAM.link_type = 'DIRECT';
		//grSAM.query = "system_properties_ui.do?sysparm_title=DevTools%20Options&sysparm_category=devtools";
		GlideRecordInsert(grSAM);
	}	
*/		


		if (strParentAppScope == '') // Only if we are NOT a plugin that embedds itself into another menu 
		{
			if (strAppMenuSeparator != '') // Only add the separator if explicitly requested!
			{	
				Log('Adding module "'+strAppMenuSeparator+'"...');
				RecordQueryOrInsert('sys_app_module',
					{
						sys_scope: strAppSysId,
						application: strAppMenuSysId,
						title: strAppMenuSeparator
					},
					{
						order: nAppMenuOrderStart + 100,
						link_type: 'SEPARATOR'
					},
					false);
			}	
		}
		else // The app is a plugin
		{
			if (strAppMenuSeparator == '')
			{
				strAppMenuSeparator = strAppName;
			}
			Log('Adding module "'+strAppMenuSeparator+'"...');
			RecordQueryOrInsert('sys_app_module',
				{
					sys_scope: strAppSysId,
					application: strAppMenuSysId,
					title: strAppMenuSeparator 
				},
				{
					order: nAppMenuOrderStart + 105,
					link_type: 'SEPARATOR'
				},
				false);
		}
		
		Log('Adding module "Manual"...');
		RecordQueryOrInsert('sys_app_module',
			{
				sys_scope: strAppSysId,
				application: strAppMenuSysId,
				title: 'Manual'
			},
								{
				order: nAppMenuOrderStart + 200,
				link_type: 'DIRECT',
				query: '/'+strAppScope+'_manual.do'
			},
			false);
		
		
		if (IsValidSysId(strTestSuiteSysId))
		{
			Log('Adding module "Test Suite"...');
			RecordQueryOrInsert('sys_app_module',
				{
					sys_scope: strAppSysId,
					application: strAppMenuSysId,
					title: 'Test Suite'
				},
				{
					order: nAppMenuOrderStart + 300,
					link_type: 'DETAIL',
					name: 'sys_atf_test_suite',
					view_name: 'DevTools',
					query: 'sysparm_view_forced=true',
					filter: 'sys_id='+strTestSuiteSysId
				},
				false);
		}

		if (strParentAppScope == '') // Only if we are NOT a plugin that embedds itself into another menu 
		{
			Log('Adding module "Log"...');
			RecordQueryOrInsert('sys_app_module',
				{
					sys_scope: strAppSysId,
					application: strAppMenuSysId,	
					title: 'Log'
				},
				{
					order: nAppMenuOrderStart + 400,
					link_type: 'LIST',
					name: 'syslog_app_scope',
					query: '&sysparm_view_forced=true&sysparm_order=sequence&sysparm_order_direction=desc',
					filter: 'sys_created_onONLast 30 minutes@javascript:gs.beginningOfLast30Minutes()@javascript:gs.endOfLast30Minutes()'
							+'^sys_scope='+strAppSysId,
					view_name: 'DevTools' 
				},
				false);
		}

	}
		
	
	
	Log('Done.');
	return grApp;
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-09-07 15:15:09</sys_created_on>
        <sys_id>753cb10c1b6afc50577f43b5bb4bcb58</sys_id>
        <sys_mod_count>150</sys_mod_count>
        <sys_name>AppBuilder</sys_name>
        <sys_package display_value="DevTools" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevTools">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_script_include_753cb10c1b6afc50577f43b5bb4bcb58</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-03-18 07:33:33</sys_updated_on>
    </sys_script_include>
</record_update>
