<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_devtools.ScriptGetFunctionNames</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Retrieves the names of all functions from the given script (or engine object).&#13;
A known deficiency is that anonymous functions erroneously return with the function name of the function that receives the function as a parameter.</description>
        <mobile_callable>false</mobile_callable>
        <name>ScriptGetFunctionNames</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[function ScriptGetFunctionNames(vScriptOrEngine)
{
	var parser = null;
	var engine = null;
	if (IsObject(vScriptOrEngine) == false)
	{
		parser = new sn_parser.RhinoParser();
		if (IsObject(parser) == false)
		{
			return false;
		}
	}
	else
	{
		engine = vScriptOrEngine;
	}
	
	if (IsObject(parser) == false && IsObject(engine) == false)
	{
		return false;
	}
	
	var rootNode = null;
	if (IsObject(parser) == true)
	{
		var strScript = GetStringValue(vScriptOrEngine);
		strScript = strScript.trim();
		if (strScript == '')
		{
			return false;
		}
		try
		{
			rootNode = parser.parse(strScript);
		}
		catch (e)
		{
			LogError('ScriptGetFunctionNames: sn_parser.RhinoParser.parse threw "' + e + '"');
			return false;
		}
	}
	else if (IsObject(engine) == true)
	{
		rootNode = engine.rootNode;
	}
	
	if (IsObject(rootNode) == false)
	{
		return false;
	}

	var aNames = [];


	var nodes = {};
	var functions = [];
	
	// Pass 1: Build an internal representation of the AST
	rootNode.visit(function(node)
	{
		var key = node.getAbsolutePosition() + " ~ " + node.getTypeName();
		if (nodes.hasOwnProperty(key))
		{
			return false;
		}
		nodes[key] = {
			key: key,
			lineNo: node.getLineNo(),
			position: node.getAbsolutePosition(),
			type: node.getTypeName(),
			children: []
		};
		var parent = node.getParent();
		if (!gs.nil(parent))
		{
			var parentKey = parent.getAbsolutePosition() + " ~ " + parent.getTypeName();
			nodes[key].parent = parentKey;
			nodes[parentKey].children.push(key);
		}
		if (node.getTypeName() == "NAME")
		{
			nodes[key].name = node.getNameIdentifier();
		}
		else if (node.getTypeName() == "FUNCTION")
		{
			functions.push(nodes[key]);
		}

	});
		
	// Pass 2: resolve relations between nodes
	for(var key in nodes)
	{
		nodes[key].parent = nodes[nodes[key].parent];
		for(var i = 0; i < nodes[key].children.length; i++)
		{
			childKey = nodes[key].children[i];
			nodes[key].children[i] = nodes[childKey];
		}
	}
	
	var names = [];
	for (var i = 0; i < functions.length; i++)
	{
		var node = functions[i];
		var parent = node.parent;
			
		// Ordinary functions declared on to-level or inside of a block
		if (parent.type == "SCRIPT" || parent.type == "BLOCK")
		{
			if ( node.children.length > 0)
			{
				var child = GetValue(node,'children',0);
				if (child.type == "NAME")
				{
					names.push(child.name);
				}
			}
		} 
		// Member functions declared the "usual" way, e.g. var foo = { bar: function() {} }
		else if (parent.type == "COLON")
		{
			var sibling = GetValue(parent,'children',0);
			if (sibling.type == "NAME")
			{
				names.push(sibling.name);
			}
		} 
		// Member functions declared by assignment, e.g. foo.bar = function() {}
		else if (parent.type == "ASSIGN")
		{
			if(    GetValue(parent,'children',0,'type') == "GETPROP"
				&& GetLength(GetValue(parent,'children',0,'children')) > 1
				&& GetValue(parent,'children',0,'children',1,'type') == "NAME")
			{
				names.push(GetValue(parent,'children',0,'children',1,'name'));
			}
		}
	}
	aNames = names;	
	
	return aNames;
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-10-13 12:47:11</sys_created_on>
        <sys_id>bd70eecd4722d910a4b0d4fe536d43c4</sys_id>
        <sys_mod_count>54</sys_mod_count>
        <sys_name>ScriptGetFunctionNames</sys_name>
        <sys_package display_value="DevTools" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevTools">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_script_include_bd70eecd4722d910a4b0d4fe536d43c4</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-08-28 12:58:56</sys_updated_on>
    </sys_script_include>
</record_update>
