<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description>Performs an ajax request (either synchronous or asynchronous) to a defined API and function.</description>
        <global>true</global>
        <ignore_in_now_experience>false</ignore_in_now_experience>
        <name>x_snc_devtools.ServerRequest</name>
        <script><![CDATA[function ServerRequest(strAPI,strFunction,vParams,callbackResult)
{
	var ga = new GlideAjax(strAPI);
	ga.addParam('sysparm_name',strFunction);
	var aKeys = GetKeys(vParams);
	for (var nKey = 0; nKey < aKeys.length; nKey++)
	{
		var strParam = aKeys[nKey];
		if (strParam == 'name')
		{
			LogError('ServerRequest: The parameter "name" is not allowed, because it is used to specify the function to be called.');
			if (callbackResult != null)
			{
				callbackResult(false);
			}
			return;
		}
		var strValue = ''+vParams[strParam];
		ga.addParam('sysparm_'+strParam,strValue);
	}
	if (callbackResult != null)
	{
		ga.getXML(callbackResponse);
		function callbackResponse(response)
		{
			var result = response.responseXML.documentElement.getAttribute('answer');
			if (result === null)
			{
				LogError('ServerRequest: The response is null. This indicates that an error occured on the server. Caution: Some errors during a server script execution triggered by client requests ARE NOT LOGGED!');
				callbackResult(result);
				return;
			}
			if (result == 'false')
			{
				callbackResult(false);
				return;
			}
			var resultParsed = ParseJson(result);
			if (resultParsed === false)
			{
				callbackResult(result);
				return;
			}
			callbackResult(resultParsed);			
		}
	}
	else
	{
		ga.getXMLWait();
		var result = ga.getAnswer();
		if (result === null)
		{
			LogError('ServerRequest: The response is null. This indicates that an error occured on the server. Caution: Some errors during a server script execution triggered by client requests ARE NOT LOGGED!');
			return false;
		}
		if (result == 'false')
		{
			return false;
		}
		var resultParsed = ParseJson(result);
		if (resultParsed == false)
		{
			return result;			
		}
		else
		{
			return resultParsed;			
		}
	}
	
}]]></script>
        <script_name>ServerRequest</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-12-23 20:59:36</sys_created_on>
        <sys_id>4ffd86e2dbe04990b652edb305961919</sys_id>
        <sys_mod_count>36</sys_mod_count>
        <sys_name>x_snc_devtools.ServerRequest</sys_name>
        <sys_package display_value="DevTools" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevTools">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_ui_script_4ffd86e2dbe04990b652edb305961919</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-10-25 12:43:37</sys_updated_on>
        <ui_type>0</ui_type>
        <use_scoped_format>false</use_scoped_format>
        <x_snc_devtools_global>true</x_snc_devtools_global>
    </sys_ui_script>
</record_update>
