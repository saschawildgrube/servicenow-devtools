<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_devtools.RecordAttachmentAdd</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Adds an attachment to a record.</description>
        <mobile_callable>false</mobile_callable>
        <name>RecordAttachmentAdd</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[function RecordAttachmentAdd(strTable, strRecordSysId, strFileName, strContentType, strContent)
{
	var grRecord = GetRecord(strTable,strRecordSysId);
	if (IsValidRecord(grRecord) == false)
	{
		return false;
	}

	// Warning: GlideSysAttachment.write is not binary safe
	var gsa = new GlideSysAttachment();
	var strSysId = gsa.write(grRecord, strFileName, strContentType, strContent);
	
	if (IsValidSysId(strSysId) == false)
	{
		return false;
	}
	
	return strSysId;	
	
	
	/*
	var Base64 = {

    // private property
    _keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",

    // public method for encoding
    encode : function (input) {
        var output = "";
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
        var i = 0;

        input = Base64._utf8_encode(input);

        while (i < input.length) {

            chr1 = input.charCodeAt(i++);
            chr2 = input.charCodeAt(i++);
            chr3 = input.charCodeAt(i++);

            enc1 = chr1 >> 2;
            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
            enc4 = chr3 & 63;

            if (isNaN(chr2)) {
                enc3 = enc4 = 64;
            } else if (isNaN(chr3)) {
                enc4 = 64;
            }

            output = output +
            this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +
            this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);
        }
        return output;
    },

    // public method for decoding
    decode : function (input) {
        var output = "";
        var chr1, chr2, chr3;
        var enc1, enc2, enc3, enc4;
        var i = 0;

        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

        while (i < input.length) {

            enc1 = this._keyStr.indexOf(input.charAt(i++));
            enc2 = this._keyStr.indexOf(input.charAt(i++));
            enc3 = this._keyStr.indexOf(input.charAt(i++));
            enc4 = this._keyStr.indexOf(input.charAt(i++));

            chr1 = (enc1 << 2) | (enc2 >> 4);
            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
            chr3 = ((enc3 & 3) << 6) | enc4;

            output = output + String.fromCharCode(chr1);

            if (enc3 != 64) {
                output = output + String.fromCharCode(chr2);
            }
            if (enc4 != 64) {
                output = output + String.fromCharCode(chr3);
            }
        }

        output = Base64._utf8_decode(output);

        return output;
    },

    // private method for UTF-8 encoding
    _utf8_encode : function (string) {
        string = string.replace(/\r\n/g,"\n");
        var utftext = "";

        for (var n = 0; n < string.length; n++) {

            var c = string.charCodeAt(n);

            if (c < 128) {
                utftext += String.fromCharCode(c);
            }
            else if((c > 127) && (c < 2048)) {
                utftext += String.fromCharCode((c >> 6) | 192);
                utftext += String.fromCharCode((c & 63) | 128);
            }
            else {
                utftext += String.fromCharCode((c >> 12) | 224);
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                utftext += String.fromCharCode((c & 63) | 128);
            }
        }
        return utftext;
    },

    // private method for UTF-8 decoding
    _utf8_decode : function (utftext) {
        var string = "";
        var i = 0;
        var c = c1 = c2 = 0;

        while ( i < utftext.length ) {

            c = utftext.charCodeAt(i);

            if (c < 128) {
                string += String.fromCharCode(c);
                i++;
            }
            else if((c > 191) && (c < 224)) {
                c2 = utftext.charCodeAt(i+1);
                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
                i += 2;
            }
            else {
                c2 = utftext.charCodeAt(i+1);
                c3 = utftext.charCodeAt(i+2);
                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                i += 3;
            }
        }
        return string;
    }
}	
	
*/	
	
  



/*  // GlideSysAttachment.writeBase64 is not binary safe either
	//var strContentBase64 = gs.base64Encode(strContent);
	
	var strContentBase64 = Base64.encode(strContent);
	Debug(strContentBase64);
	Debug(RenderValueHex(Base64.decode(strContentBase64)));

	var gsa = new GlideSysAttachment();
	var strSysId = gsa.writeBase64(grRecord, strFileName, strContentType, strContentBase64);
	return strSysId;

*/
	
	/*
	var strSysId = gsa.write(grRecord, strFileName, strContentType, '\x42\x4D\x5A\x00\x00\x00\x00\x00\x00\x00\x36\x00\x00\x00\x28\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x01\x00\x18\x00\x00\x00\x00\x00\x24\x00\x00\x00\x13\x0B\x00\x00\x13\x0B\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xFF\xFF\xFF\xFF\xFF\xFF\xCC\xBB\xAA\x00\x00\x00\xFF\xFF\xFF\xCC\xBB\xAA\xFF\xFF\xFF\x00\x00\x00\xCC\xBB\xAA\xFF\xFF\xFF\xFF\xFF\xFF\x00\x00\x00');
	*/

	/*
	// The ecc_queue trick does not work either

	//var strContentBase64 = RunScriptInGlobalScope("result = GlideStringUtil.base64Encode(param1);",strContent);
	//Debug(strContentBase64);
	var strContentBase64 = Base64.encode(strContent);
	var attCreator = new GlideRecord('ecc_queue');
	attCreator.agent = 'AttachmentCreator';
	attCreator.topic = 'AttachmentCreator';
	attCreator.name =   strFileName+':'+strContentType;
	attCreator.source = grRecord.getTableName()+':'+grRecord.sys_id;
	attCreator.setValue('payload',strContent);
	attCreator.insert();	
	//x_snc_devtools.Debug(x_snc_devtools.RenderValue(attCreator));	
	*/
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-03-18 21:53:07</sys_created_on>
        <sys_id>1b67844edb120150bcced03cd396198f</sys_id>
        <sys_mod_count>35</sys_mod_count>
        <sys_name>RecordAttachmentAdd</sys_name>
        <sys_package display_value="DevTools" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevTools">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_script_include_1b67844edb120150bcced03cd396198f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-08-28 12:58:41</sys_updated_on>
    </sys_script_include>
</record_update>
