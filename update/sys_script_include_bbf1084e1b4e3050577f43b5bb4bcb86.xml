<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_devtools.PerformanceQuery</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Measure the average performance of a query in milliseconds from the perspective of a given user based on a defined number of repetitions.&#13;
The result is returned as a JSON object.</description>
        <mobile_callable>false</mobile_callable>
        <name>PerformanceQuery</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[function PerformanceQuery(strName, strTable, strQuery, strOrderBy, nLimit, strUser, nRepetitions)
{
	strName = GetStringValue(strName);
	strTable = GetStringValue(strTable);
	strQuery = GetStringValue(strQuery);
	strOrderBy = GetStringValue(strOrderBy);
	nLimit = GetIntegerValue(nLimit);
	strUser = GetStringValue(strUser);
	nRepetitions = GetIntegerValue(nRepetitions);
		
	var result = {};
	result['name'] = strName;
	result['table'] = strTable;
	result['query'] = strQuery;
	result['orderby'] = strOrderBy;

	var strUserSysId = '';
	var strUserName = '';
	
	if (IsValidTable(strTable) == false)
	{
		return false;
	}

	
	var grUser = GetUserRecord(strUser);
	if (IsValidRecord(grUser))
	{
		strUserSysId = grUser.sys_id;
		strUserName = grUser.user_name; 
	}
	else
	{
		return false;
	}

	result['user_sys_id'] = strUserSysId;
	result['user_name'] = strUserName;

	
	if (nRepetitions == 0)
	{
		nRepetitions = 1;
	}
	result['repetitions'] = nRepetitions;

	var strPreviousUserSysId = UserImpersonate(strUserSysId);
	
	var fFastest = 0;
	var fSlowest = 0;
	var fSum = 0;


	
	for (var nRepetition = 0; nRepetition < nRepetitions; nRepetition++)
	{
		var stopwatch = new StopWatch();

		var gr = new GlideRecordSecure(strTable);
		gr.addEncodedQuery(strQuery);
		
		if (strOrderBy != '')
		{
			gr.orderBy(strOrderBy);
		}
		
		if (nLimit > 0)
		{
			gr.setLimit(nLimit);
		}

		stopwatch.Start();
		gr.query();
		stopwatch.Stop();

		var fMilliseconds = stopwatch.GetMilliSeconds();
		if (nRepetition == 0)
		{
			var fFastest = fMilliseconds;
			var fSlowest = fMilliseconds;
			var fSum = fMilliseconds;
		}
		else
		{
			fFastest = Math.min(fFastest,fMilliseconds);
			fSlowest = Math.max(fSlowest,fMilliseconds);
			fSum += fMilliseconds;
		}
	}
	
	result['response_milliseconds_fastest'] = fFastest;
	result['response_milliseconds_slowest'] = fSlowest;
	result['response_milliseconds_average'] = fSum/nRepetitions;

	result['records'] = gr.getRowCount();
	
	UserImpersonate(strPreviousUserSysId);
	
	return result;
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-08-19 15:08:17</sys_created_on>
        <sys_id>bbf1084e1b4e3050577f43b5bb4bcb86</sys_id>
        <sys_mod_count>15</sys_mod_count>
        <sys_name>PerformanceQuery</sys_name>
        <sys_package display_value="DevTools" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevTools">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_script_include_bbf1084e1b4e3050577f43b5bb4bcb86</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-08-28 12:58:56</sys_updated_on>
    </sys_script_include>
</record_update>
