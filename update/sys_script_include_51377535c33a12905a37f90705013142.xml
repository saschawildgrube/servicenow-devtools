<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_devtools.GetDependencyRecord</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Returns a dependency record based on the given source (or dependency record) and the target.&#13;
The function has been fully implemented using the ArtificalDeveloper using ChatGPT 4o.</description>
        <mobile_callable>false</mobile_callable>
        <name>GetDependencyRecord</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[function GetDependencyRecord(vSource, vTarget) 
{
    // Check if vSource is a GlideRecord-like object and has a field sys_id
    function isGlideRecord(obj) {
        return typeof obj === 'object' && obj !== null && 'sys_id' in obj;
    }
    
    // Convert vSource and vTarget to sys_ids if they are objects
    if (isGlideRecord(vSource)) {
        vSource = vSource.sys_id;
    }
    if (isGlideRecord(vTarget)) {
        vTarget = vTarget.sys_id;
    }

    // Handle case when vSource is already a dependency record (sys_id)
    var grDependency = new GlideRecord('x_snc_devtools_dependency');
    if (grDependency.get(vSource)) {
        if (!vTarget || grDependency.dependency == vTarget) {
            return grDependency;
        }
        return false;
    }

    // If vSource is an app sys_id, look for a dependency
    var grAppSource = new GlideRecord('sys_app');
    if (grAppSource.get(vSource)) {
        grDependency.initialize();
        grDependency.addQuery('sys_scope', vSource);
        grDependency.addQuery('dependency', vTarget);
        grDependency.query();
        if (grDependency.next()) {
            return grDependency;
        }
    }
    
    // If vSource and vTarget are given as strings (scope), look them up
    if (typeof vSource === 'string' && typeof vTarget === 'string') {
        var grAppSourceScope = new GlideRecord('sys_app');
        grAppSourceScope.addQuery('scope', vSource);
        grAppSourceScope.query();

        var grAppTargetScope = new GlideRecord('sys_app');
        grAppTargetScope.addQuery('scope', vTarget);
        grAppTargetScope.query();

        if (grAppSourceScope.next() && grAppTargetScope.next()) {
            grDependency.initialize();
            grDependency.addQuery('sys_scope', grAppSourceScope.sys_id);
            grDependency.addQuery('dependency', grAppTargetScope.sys_id);
            grDependency.query();
            if (grDependency.next()) {
                return grDependency;
            }
        }
    }

    return false;
}
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-12-31 12:42:34</sys_created_on>
        <sys_id>51377535c33a12905a37f90705013142</sys_id>
        <sys_mod_count>3</sys_mod_count>
        <sys_name>GetDependencyRecord</sys_name>
        <sys_package display_value="DevTools" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevTools">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_script_include_51377535c33a12905a37f90705013142</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-01-03 09:33:22</sys_updated_on>
    </sys_script_include>
</record_update>
